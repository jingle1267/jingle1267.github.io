<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱红旗渠</title>
  
  <subtitle>Stay hungry, stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ihongqiqu.com/"/>
  <updated>2018-08-27T06:24:21.964Z</updated>
  <id>http://ihongqiqu.com/</id>
  
  <author>
    <name>Jin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信小程序API</title>
    <link href="http://ihongqiqu.com/2018/08/27/weixin-mini-app-api/"/>
    <id>http://ihongqiqu.com/2018/08/27/weixin-mini-app-api/</id>
    <published>2018-08-27T06:20:04.000Z</published>
    <updated>2018-08-27T06:24:21.964Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>话不说，直接看图：</p><p><img src="http://on-img.com/chart_image/5b4ead6de4b040415ae02def.png" alt="http://on-img.com/chart_image/5b4ead6de4b040415ae02def.png"></p><p>图片来自<a href="https://www.processon.com/i/5467870be4b054d6db9d9ad8" rel="external nofollow noopener noreferrer" target="_blank">ProcessOn</a>，脑图链接：<a href="https://www.processon.com/view/5b4eaf41e4b0f8477d878109" rel="external nofollow noopener noreferrer" target="_blank">https://www.processon.com/view/5b4eaf41e4b0f8477d878109</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2018/08/27/weixin-mini-app-api/">http://ihongqiqu.com/2018/08/27/weixin-mini-app-api/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;话不说，直接看图：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://on-img.com/chart_image/5b4ead
      
    
    </summary>
    
      <category term="微信小程序" scheme="http://ihongqiqu.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序API" scheme="http://ihongqiqu.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FAPI/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序组件介绍</title>
    <link href="http://ihongqiqu.com/2018/08/21/wexin-mini-component/"/>
    <id>http://ihongqiqu.com/2018/08/21/wexin-mini-component/</id>
    <published>2018-08-21T06:20:29.000Z</published>
    <updated>2018-08-21T07:14:09.322Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>话不多说，直接上脑图</p><a id="more"></a><p><img src="http://on-img.com/chart_image/5b4eaf41e4b0f8477d87810f.png?_=1534834440699" alt="微信小程序组件介绍脑图"></p><p>图片来自<a href="https://www.processon.com/i/5467870be4b054d6db9d9ad8" rel="external nofollow noopener noreferrer" target="_blank">ProcessOn</a>，脑图链接：<a href="https://www.processon.com/view/5b4eaf41e4b0f8477d878109" rel="external nofollow noopener noreferrer" target="_blank">https://www.processon.com/view/5b4eaf41e4b0f8477d878109</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2018/08/21/wexin-mini-component/">http://ihongqiqu.com/2018/08/21/wexin-mini-component/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;话不多说，直接上脑图&lt;/p&gt;
    
    </summary>
    
      <category term="微信小程序" scheme="http://ihongqiqu.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序组件" scheme="http://ihongqiqu.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>三国主要人物关系</title>
    <link href="http://ihongqiqu.com/2018/04/13/caocao/"/>
    <id>http://ihongqiqu.com/2018/04/13/caocao/</id>
    <published>2018-04-13T06:56:28.000Z</published>
    <updated>2018-06-21T07:09:59.040Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><a id="more"></a><p><img src="http://on-img.com/chart_image/5a97cbcbe4b09a29d512e3dd.png" alt="三国主要人物关系"></p><p><a href="http://on-img.com/chart_image/5a97cbcbe4b09a29d512e3dd.png" rel="external nofollow noopener noreferrer" target="_blank">http://on-img.com/chart_image/5a97cbcbe4b09a29d512e3dd.png</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2018/04/13/caocao/">http://ihongqiqu.com/2018/04/13/caocao/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;
    
    </summary>
    
      <category term="历史人物" scheme="http://ihongqiqu.com/categories/%E5%8E%86%E5%8F%B2%E4%BA%BA%E7%89%A9/"/>
    
    
  </entry>
  
  <entry>
    <title>微信小程序之页面模板</title>
    <link href="http://ihongqiqu.com/2018/04/09/wxminiapp-template/"/>
    <id>http://ihongqiqu.com/2018/04/09/wxminiapp-template/</id>
    <published>2018-04-09T03:25:48.000Z</published>
    <updated>2018-06-21T07:09:59.040Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>微信小程序提供了页面模板支持，很大程度解决了<em>页面布局复用</em>的问题。</p><a id="more"></a><p>官方说明</p><blockquote><p>WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。</p></blockquote><p>小程序的模板并不难，下面整理了一些基本流程，方便快速上手小程序页面模板。</p><h3 id="1-定义模板布局"><a href="#1-定义模板布局" class="headerlink" title="1. 定义模板布局"></a>1. 定义模板布局</h3><p>建议新建目录专门放置模板。本文在pages目录下创建了template目录。</p><p>在template目录下创建模板布局文件msg.wxml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">!--</span><br><span class="line">  index: int</span><br><span class="line">  msg: string</span><br><span class="line">  time: string</span><br><span class="line">--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"msgItem"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'msgBg'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> Time: &#123;&#123;time&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中template表现的name是模板的id；</p><h3 id="2-定义模板样式"><a href="#2-定义模板样式" class="headerlink" title="2. 定义模板样式"></a>2. 定义模板样式</h3><p>创建模板样式，建议和模板布局放到相同目录；</p><p>在template目录下的模板样式文件msg.wxss：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.msgBg</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#099</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-引用模板"><a href="#3-引用模板" class="headerlink" title="3. 引用模板"></a>3. 引用模板</h3><p>在需要应用模板的地方添加引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"../template/msg.wxml"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>在需要使用模板的地方添加引用代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"msgItem"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...itemOne&#125;&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>完成的业务引用代码如下（index.wxml）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"../template/msg.wxml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"msgItem"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...itemOne&#125;&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用模板for --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;items&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"msgItem"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...item&#125;&#125;"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>is是模板id，data负责传值；data传值使用ES6展开运算符”…”，那么就不需要在模板里面添加item.XXX了。</p><h3 id="4-引用样式"><a href="#4-引用样式" class="headerlink" title="4. 引用样式"></a>4. 引用样式</h3><p>模板样式也需要添加引用，在引用方的样式代码中添加引用代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**引入模板的样式**/</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"../template/msg.wxss"</span>;</span><br></pre></td></tr></table></figure><p>完成的样式引用代码如下（index.wxss）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**引入模板的样式**/</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"../template/msg.wxss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-赋值初始化"><a href="#5-赋值初始化" class="headerlink" title="5. 赋值初始化"></a>5. 赋值初始化</h3><p>通过以上四个步骤，模板布局和样式都有了，剩下的就是如何复制和展示数据了。 代码如下（index.js）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//获取应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    motto: <span class="string">'Hello World'</span>,</span><br><span class="line">    itemOne: &#123;</span><br><span class="line">      index: <span class="number">999</span>,</span><br><span class="line">      msg: <span class="string">'this is a template'</span>,</span><br><span class="line">      time: <span class="string">'2018-01-08'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    items: [&#123;</span><br><span class="line">      index: <span class="number">0</span>,</span><br><span class="line">      msg: <span class="string">'template1'</span>,</span><br><span class="line">      time: <span class="string">'2016-09-15'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      index: <span class="number">1</span>,</span><br><span class="line">      msg: <span class="string">'emplate2'</span>,</span><br><span class="line">      time: <span class="string">'2016-09-16'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      index: <span class="number">2</span>,</span><br><span class="line">      msg: <span class="string">'emplate3'</span>,</span><br><span class="line">      time: <span class="string">'2016-09-17'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      index: <span class="number">3</span>,</span><br><span class="line">      msg: <span class="string">'emplate4'</span>,</span><br><span class="line">      time: <span class="string">'2016-09-18'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>官方介绍地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/template.html" rel="external nofollow noopener noreferrer" target="_blank">https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/template.html</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2018/04/09/wxminiapp-template/">http://ihongqiqu.com/2018/04/09/wxminiapp-template/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;微信小程序提供了页面模板支持，很大程度解决了&lt;em&gt;页面布局复用&lt;/em&gt;的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://ihongqiqu.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://ihongqiqu.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序之坑</title>
    <link href="http://ihongqiqu.com/2018/04/04/wx-mini-app-bug/"/>
    <id>http://ihongqiqu.com/2018/04/04/wx-mini-app-bug/</id>
    <published>2018-04-04T07:00:27.000Z</published>
    <updated>2018-06-21T07:09:59.040Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>微信小程序因其“小”和“轻”，以及微信爸爸的用户量，受到了大家的青睐。下面总结了，我在开发微信小程序的过程中，踩过的坑。希望能够帮助更多的人。</p><a id="more"></a><h3 id="1-服务器域名"><a href="#1-服务器域名" class="headerlink" title="1. 服务器域名"></a>1. 服务器域名</h3><p>微信小程序中<strong>所有</strong>网络通信域名，首先都需要在工信部备案，其次都需要在小程序后台添加合法域名。域名主要有四类：request域名、socket域名、upload域名、download域名；其次，在修改次数上也有限制。下面详细说。</p><h3 id="2-业务域名"><a href="#2-业务域名" class="headerlink" title="2. 业务域名"></a>2. 业务域名</h3><p>这个问题主要针对使用web-view组件的情况。web-view 组件是一个可以用来承载网页的容器，会自动铺满整个小程序页面。<strong>个人类型与海外类型的小程序暂不支持使用。</strong></p><p>web-view中需要加载的所有域名都需要在微信小程序后台配置。</p><p>正确的打开方式是：</p><ol><li>在微信开发者后台-设置-开发设置中添加/修改业务域名，<strong>下载校验文件</strong>。</li><li>在需要访问的业务域名根目录添加第一步下载的校验文件。</li><li>在第一步打开的窗口添加业务域名（必须有第2步，否则添加不成功）。</li></ol><p>如果我们需要在web-view中显示的是一些单页面，这没有什么问题。但是，如果使用了复合页面，涉及到很多页面跳转，那就麻烦了。所有涉及跳转的域名都需要业务域名校验，对是<em>所有的业务域名</em>。如果跳转到三方域名，或者很多外链，添加业务域名校验文件就是很大的难题。</p><p>这可能也是微信故意这样设计，微信不推荐使用web-view做很重的业务，这个符合微信小程序的小而轻原则。</p><h3 id="3-次数限制"><a href="#3-次数限制" class="headerlink" title="3. 次数限制"></a>3. 次数限制</h3><table><thead><tr><th>功能</th><th>功能介绍</th><th>次数</th></tr></thead><tbody><tr><td>小程序头像</td><td>小程序的logo</td><td>5次/月</td></tr><tr><td>介绍</td><td>小程序的介绍信息</td><td>5次/月</td></tr><tr><td>服务类目</td><td>小程序的分类(类目)</td><td>3次/月</td></tr><tr><td>服务器域名</td><td>小程序访问的接口域名</td><td>5次/月</td></tr><tr><td>业务域名</td><td>H5页面的域名</td><td>50次/年</td></tr></tbody></table><h3 id="4-数量限制"><a href="#4-数量限制" class="headerlink" title="4. 数量限制"></a>4. 数量限制</h3><table><thead><tr><th>限制</th><th>介绍</th><th>数量</th></tr></thead><tbody><tr><td>服务器域名</td><td>主要包括：request、socket、upload、download</td><td>20个 * 4</td></tr><tr><td>小程序业务域名</td><td>小程序可以配置的H5页面的域名</td><td>20个</td></tr><tr><td>单业务域名</td><td>每个域名最多可以添加小程序校验文件的数量</td><td>20个</td></tr></tbody></table><p><br>本文地址 <a href="http://ihongqiqu.com/2018/04/04/wx-mini-app-bug/">http://ihongqiqu.com/2018/04/04/wx-mini-app-bug/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;微信小程序因其“小”和“轻”，以及微信爸爸的用户量，受到了大家的青睐。下面总结了，我在开发微信小程序的过程中，踩过的坑。希望能够帮助更多的人。&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://ihongqiqu.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://ihongqiqu.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序介绍</title>
    <link href="http://ihongqiqu.com/2018/01/10/weixin-app/"/>
    <id>http://ihongqiqu.com/2018/01/10/weixin-app/</id>
    <published>2018-01-10T08:34:24.000Z</published>
    <updated>2018-06-21T07:09:59.040Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>微信小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验。</p><a id="more"></a><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a>申请账号</h4><p>访问 <a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/wxopen/waregister?action=step1</a> 根据提示完成注册账号。注册完成后，登陆 <a href="https://mp.weixin.qq.com" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com</a> ，在设置-开发设置中可以找到小程序 AppID。</p><h4 id="安装开发工具"><a href="#安装开发工具" class="headerlink" title="安装开发工具"></a>安装开发工具</h4><p>微信小程序开发工具下载地址：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201818" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201818</a><br>开发工具详细介绍见：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=201818" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=201818</a></p><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>打开微信开发者工具，登录后点击右下角”+”按钮，进入如下界面：</p><p><img src="/imgs/post/wx_app_init.png" alt="Project Init"></p><p>选择项目目录，填写刚刚申请的 AppID 和x项目名称。并选中”建立普通快速启动模板”。点击创建，Hello World就创建出来了。</p><h3 id="项目结构介绍"><a href="#项目结构介绍" class="headerlink" title="项目结构介绍"></a>项目结构介绍</h3><p>项目目录结构如图：</p><p><img src="/imgs/post/wx_app_pj_info.png" alt="Project Info"></p><h4 id="APP-JSON"><a href="#APP-JSON" class="headerlink" title="APP.JSON"></a>APP.JSON</h4><p>app.json 是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。</p><p>例子：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "pages":[</span><br><span class="line">    "pages/index/index",</span><br><span class="line">    "pages/logs/logs"</span><br><span class="line">  ],</span><br><span class="line">  "window":&#123;</span><br><span class="line">    "backgroundTextStyle":"light",</span><br><span class="line">    "navigationBarBackgroundColor": "#fff",</span><br><span class="line">    "navigationBarTitleText": "WeChat",</span><br><span class="line">    "navigationBarTextStyle":"black"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>pages 和 window 介绍：</p><ol><li>pages字段：用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。</li><li>window字段：小程序所有页面的顶部背景颜色，文字颜色定义在这里的。</li></ol><h4 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h4><p>类似网页编程的HTML，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"userinfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;!hasUserInfo &amp;&amp; canIUse&#125;&#125;"</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> <span class="attr">bindgetuserinfo</span>=<span class="string">"getUserInfo"</span>&gt;</span> 获取头像昵称 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">bindtap</span>=<span class="string">"bindViewTap"</span> <span class="attr">class</span>=<span class="string">"userinfo-avatar"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;userInfo.avatarUrl&#125;&#125;"</span> <span class="attr">background-size</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"userinfo-nickname"</span>&gt;</span>&#123;&#123;userInfo.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"usermotto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"user-motto"</span>&gt;</span>&#123;&#123;motto&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上面代码可以看出，代码风格很像HTML，同时也有自己的语法如wx:if和wx:else。更多语法请参考 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/</a> 。</p><h4 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h4><p>WXSS 具有 CSS 大部分的特性，小程序在 WXSS 也做了一些扩充和修改。示例代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**index.wxss**/</span></span><br><span class="line"><span class="selector-class">.userinfo</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.userinfo-avatar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">128</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">128</span>rpx;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.userinfo-nickname</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.usermotto</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多详细请参考 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxss.html" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxss.html</a></p><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><p>和用户交互需要使用 JavaScript 来实现。我们常见的网络请求，事件处理等都有 JavaScript 来处理。关于 JavaScript 这里不做介绍了。</p><h3 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h3><h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><p>如果开发中需要预览和测试，微信需要添加相应的权限。添加预览入口：小程序管理后台 - 用户身份 – 成员管理。</p><p>添加不会推送告知被添加者。添加成功之后，使用被添加者的微信，扫描微信开发工具生成的预览二维码就可以看到开发的微信小程序了。</p><h4 id="提交审核"><a href="#提交审核" class="headerlink" title="提交审核"></a>提交审核</h4><p>开发完成，通过点击微信开发者工具右上角的上传，可以上传到小程序管理后台。在开发管理中可以找到提交的版本。这个时候的版本还是预览版本，通过扫描二维码，可以让添加权限的微信用户体验。</p><p>如果测试确认没问题可以上线，点击管理后台-开发管理中的提交审核。提交审核，第一个版本审核时间可能会有几天，之后审核时间会缩短大概一天左右。</p><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>审核通过之后，管理员会收到微信推送。这个时候，我们的小程序还没有上线，我们可以再后天点击发布按钮来控制什么时间发布。</p><h3 id="Samples"><a href="#Samples" class="headerlink" title="Samples"></a>Samples</h3><table><thead><tr><th>官方例子</th><th>我的例子</th></tr></thead><tbody><tr><td><img src="/imgs/post/weixin_app_demo.jpg" alt="Weixin Demo"></td><td><img src="/imgs/post/wx_app_jingle1267.jpg" alt="Weixin Demo"></td></tr><tr><td>源码地址：<a href="https://github.com/jingle1267/demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/demo</a></td><td>源码地址：<a href="https://github.com/jingle1267/HelloCodeDev" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/HelloCodeDev</a></td></tr></tbody></table><p><br>本文地址 <a href="http://ihongqiqu.com/2018/01/10/weixin-app/">http://ihongqiqu.com/2018/01/10/weixin-app/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;微信小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验。&lt;/p&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://ihongqiqu.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://ihongqiqu.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>司马懿人物关系</title>
    <link href="http://ihongqiqu.com/2018/01/09/SiMaYi/"/>
    <id>http://ihongqiqu.com/2018/01/09/SiMaYi/</id>
    <published>2018-01-09T09:39:35.000Z</published>
    <updated>2018-06-21T07:09:59.040Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><a id="more"></a><p><img src="http://on-img.com/chart_image/5a547978e4b01acda594932b.png" alt="司马懿人物关系"></p><p><a href="http://on-img.com/chart_image/5a547978e4b01acda594932b.png" rel="external nofollow noopener noreferrer" target="_blank">http://on-img.com/chart_image/5a547978e4b01acda594932b.png</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2018/01/09/SiMaYi/">http://ihongqiqu.com/2018/01/09/SiMaYi/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;
    
    </summary>
    
      <category term="历史人物" scheme="http://ihongqiqu.com/categories/%E5%8E%86%E5%8F%B2%E4%BA%BA%E7%89%A9/"/>
    
    
  </entry>
  
  <entry>
    <title>你可能不知道的毛主席</title>
    <link href="http://ihongqiqu.com/2017/12/26/Mr.-Mao/"/>
    <id>http://ihongqiqu.com/2017/12/26/Mr.-Mao/</id>
    <published>2017-12-26T02:21:48.000Z</published>
    <updated>2018-06-21T07:09:59.040Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><a id="more"></a><p>&emsp;&emsp;这几年，国内一些对历史毫无了解的年轻人动辄喜欢拿毛主席说事，可看看仇视红色中国的美国人是怎么评价毛泽东的：</p><p>&emsp; &emsp;是谁能把一个贫瘠的国家，在短短几年的时间里，迅速崛起于世界强国的行列？事实上我记得美国以前有一位总统乔治·华盛顿。他以贫弱的美国北方军，经过多年苦战打败了先进的南方殖民军。使得美国获得了统一与和平。但是，在东方的一个大国，中国，同样出现了一位优秀的领导者：毛泽东先生。正是他领导着他的人民，在贫困，饥饿，压力下却取得了远远超越乔治·华盛顿的伟大成就…1949年，中国在毛先生领导下建立了红色政权，同时也揭开了中国人觉醒的时代。</p><p>&emsp;&emsp;1950年我们可爱的总统大人，他觉得北韩十分不听话，同时他更加厌恶新生的红色中国，为了灭绝赤祸，他决心先打掉北韩，从而占领亚洲大陆一端，再谋求最终消灭赤色中国。随即他调兵遣将， 以联合国安理会的名义，18国集团为核心，总计出兵51万3千 人。坦克2400辆。战机4000架。各型火炮5万门同时动用了原美国海军第1，2， 3，7四只舰队，排山倒海的杀向北韩。在他看来，这样现代化的庞大战斗集群，任何一个国家，哪怕是当时的苏联也不敢与之交手。然而，他似乎忘记了，那位毛先生伟大的军事战略胆量。毛在前苏联犹豫迟疑下，悍然单方面出兵抗击美国联军。于是一场惊人的战争就此爆发了。</p><p>&emsp;&emsp;100万中国士兵，在没有远程炮火支援，没有空中火力掩护，没有地面装甲集群突击的情况下，依靠着最原始的卡宾枪（冲锋枪），手雷。打败了强大的美国联军。这也是人类历史上，首次开创了一个国家单独击败了世界力量的先例。但是，中国人也遭受了525000人的惨烈伤亡。但是对于一个几年前还被日本军队肆意侵略蹂躏的国家，在短短几年后，突然间打败了世界上当时最强军事同盟“北大西洋公约组织”的奇迹除了毛先生敢于创造， 任何人都不可能做到。 美国就这样丢下了113000名阵亡士兵，带着84000名伤员，以及换回来的45000名被俘人员迈着沉重的脚步，蹒跚的回到了自己的老家。</p><p>&emsp;&emsp;前苏联的伟大人物赫鲁晓夫先生，上台后，他觉得中共的毛太不懂得什么叫尊重苏联，竟敢违背他的指令。因此，他发动了一 场更加荒谬的战役——中苏珍宝岛战役。苏军以远东集团军的1个坦克旅，3个摩托化步兵团，总计约20000人在没有事先警告的情况下对中国采取了军事行动。而中国当时最强的主战坦克T59 型也就是前苏联的T54A。战斗全重只有36吨。如果与前苏联最新的T62型坦克对比， 可以说对方无需开火，使用自身就可以将T59 撞翻。 毛先生在接到边防军告警电报后， 他做出了最快决定：打！就把他打疼！结果苏联人丢下了约1个团的装备以及成批尸体气恼的回家去了。 赫鲁晓夫接到失败的电报后，召开了紧急军事会议，先后撤职了隶属于苏联远东集团军1位元帅（坦克装甲诸兵种元帅），3名大将，四名上将，24名中将、少将。抓捕了远东红旗134师（主力师）营级以上全部军事主官。</p><p>&emsp;&emsp;在毛先生对外战争历史中，还有一场值得提起，那就是中印边界之战：麦克马洪线。 印度为了夺取那块不毛之地，与中国军队公然交手。其实在印度背后有输了韩战无处撒气的华盛顿，有丢了珍宝岛满脸怒火的克里姆林宫。有祈求可以捞足好处的大英帝国等等。他们几乎出现了前所未有的合作！ 苏联低价贷款给印度尼赫鲁，装备了7个印度陆军师。华盛顿给了尼赫鲁大批战备物资。英国把自己的那些老式火炮都给了印度。一时间印度成了当时世界两大集团的宠儿。 但是，短短的30天时间，印度军队全军溃败。当时在第2师作战术指挥教导的洛克．弗菲希尔准将说：你见过非洲的斑马群奔跑吗？但是不如印度军队溃逃更加壮观。 8940名印度军人葬身山谷，1370名士兵被俘，1名准将被击毙，亚洲第一旅：“锡克”旅完了。英国全资资助“廓尔柯”营完了。而毛先生在他的官邸中南海，战前就曾说：不管你是印苏联军，还是美印联军，即便是再来一次八国联军我们中国也要与你们打！打出一个真理来。 毛先生的英明是前所未有的。中国拿回来了土地，消灭了印度联军，打败了美国与苏联的再一次的恐吓，这就是毛先生。</p><p>&emsp;&emsp;毛先生一贯坚持自力更生，也是由于他的如此英明，中国建立了自己的核武器工业。制造远程洲际导弹。可是今天的中国人，是不是还都记得我们这位罕见的民族伟人呢？ ……看过之后让人肃然起敬！让我们一起动手，把这篇文章传播出去了，让我们的后代，永远记得这位伟人！ 喜欢的就转一下，至少我很愿意再看一遍。</p><p>&emsp;&emsp;12月26日毛先生的生日，中国人的圣诞节！</p><p><br>本文地址 <a href="http://ihongqiqu.com/2017/12/26/Mr.-Mao/">http://ihongqiqu.com/2017/12/26/Mr.-Mao/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Architecture Components之LiveData</title>
    <link href="http://ihongqiqu.com/2017/12/14/Android-LiveData/"/>
    <id>http://ihongqiqu.com/2017/12/14/Android-LiveData/</id>
    <published>2017-12-14T09:40:07.000Z</published>
    <updated>2018-06-21T07:09:59.039Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>LiveData 是一个数据持有者类，它持有一个值并允许观察该值。不同于普通的可观察者，LiveData 遵守应用程序组件的生命周期，以便 Observer 可以指定一个其应该遵守的 Lifecycle。</p><a id="more"></a><p>LiveData实现了对数据的监听，利用这点，我们可以更好的实现获取数据和数据展示解耦。本文着重讲解数据更新和更新UI逻辑分离，LiveData的LifeCycle特性暂不做介绍。</p><p>下文用一个简单的例子来介绍如何实现数据更新和UI展示解耦，实现逻辑分离。</p><p>UI展示逻辑代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> MutableLiveData&lt;String&gt; username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tvUsername;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_live_data);</span><br><span class="line"></span><br><span class="line">        tvUsername = findViewById(R.id.tv_username);</span><br><span class="line"></span><br><span class="line">        username = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        username.observe(<span class="keyword">this</span>, <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(@Nullable String s)</span> </span>&#123;</span><br><span class="line">                tvUsername.setText(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面代码对应的布局文件代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.ihognqiqu.aac.livedata.LiveDataActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_username"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Default User Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"20dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_change_username"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"onClickMainThread"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Change User Name main thread"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_change_username_background"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"onClickThread"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Change User Name background"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"一个数据持有类，持有数据并且这个数据可以被观察被监听，和其他Observer不同的是，它和Lifecycle是绑定的。"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"17dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上面代码可以发现，除了基本的初始化操作、设置监听，只剩下UI赋值逻辑。</p><p>主线程更新数据代码（点击id为tv_change_username的按钮执行下面的方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 主线程中更新数据</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickMainThread</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">     username.setValue(<span class="string">"New User Name by main thread"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>子线程更新数据代码如下（点击id为tv_change_username_background的按钮执行下面这个方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 子线程中更新数据</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickThread</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                 e.printStackTrace();</span><br><span class="line">             &#125;</span><br><span class="line">             username.postValue(<span class="string">"New User Name by background thread"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).start();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从上面同步和异步两个方法，可以发现这里只有对数据的更新逻辑，没有任何UI更新的逻辑。</p><p>例子很简单，通过使用LiveData，我们实现了业务逻辑和UI更新逻辑分离。通过使用LiveData可以使我们的架构设计更加合理，职责分工更加明确。从小的方面来看，实现了解耦代码分离，从大的方面说，这会改变应用架构设计。</p><p>参考地址：<a href="https://developer.android.com/topic/libraries/architecture/livedata.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/topic/libraries/architecture/livedata.html</a><br>源码地址：<a href="https://github.com/jingle1267/AndroidArchitectureComponets" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/AndroidArchitectureComponets</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2017/12/14/Android-LiveData/">http://ihongqiqu.com/2017/12/14/Android-LiveData/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;LiveData 是一个数据持有者类，它持有一个值并允许观察该值。不同于普通的可观察者，LiveData 遵守应用程序组件的生命周期，以便 Observer 可以指定一个其应该遵守的 Lifecycle。&lt;/p&gt;
    
    </summary>
    
      <category term="Android Architecture Components" scheme="http://ihongqiqu.com/categories/Android-Architecture-Components/"/>
    
    
      <category term="LiveData" scheme="http://ihongqiqu.com/tags/LiveData/"/>
    
  </entry>
  
  <entry>
    <title>Android Architecture Components之LifeCycle</title>
    <link href="http://ihongqiqu.com/2017/12/09/lifecycle/"/>
    <id>http://ihongqiqu.com/2017/12/09/lifecycle/</id>
    <published>2017-12-09T08:13:44.000Z</published>
    <updated>2018-06-21T07:09:59.039Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>LifeCycle 架构设计一大利器，旨在减少Activity和Fragment中代码，简化Activity和Fragment职责，实现功能代码分离，达到解耦的目的。</p><a id="more"></a><p>官方解释：</p><p><em>Lifecycle-aware components perform actions in response to a change in the lifecycle status of another component, such as activities and fragments. These components help you produce better-organized, and often lighter-weight code, that is easier to maintain.</em></p><p>译文：Lifecycle-aware 组件感知Activity和Fragment的周明周期，并能响应个生命周期状态。这个组件有助于产生更有序、更轻和更易维护的代码。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>LifeCycle作用主要是针对开发中遇到的一些痛点，它的优点也是基于现有的痛点，主要以下有点：</p><ol><li>减轻acitivity和fragment的负担，实现调用方代码更加更加简洁</li><li>为封装组件提供更好的支持，达到组件独立，实现更好的内聚和更低的耦合</li><li>复用变得更加简单</li><li>实现组合优于继承的设计思想</li></ol><h3 id="没有LifeCycle的时候"><a href="#没有LifeCycle的时候" class="headerlink" title="没有LifeCycle的时候"></a>没有LifeCycle的时候</h3><p>没有LifeCycle组件的时候，我们实现一个定位功能通常会如下实现：</p><p>主程序代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定位功能一般实现方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocationListener mLocationListener;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_location);</span><br><span class="line">        mLocationListener = <span class="keyword">new</span> LocationListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        <span class="keyword">if</span> (mLocationListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mLocationListener.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        <span class="keyword">if</span> (mLocationListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mLocationListener.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位逻辑实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"LifeCycleListener"</span>, <span class="string">"start"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"LifeCycleListener"</span>, <span class="string">"stop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码，可以发现，实现一个定位，我们需要在activity和fragment处理打开定位和关闭定位。这只是一个定位，在现实开发中，我们会有统计等很多类似的功能，这样我们的activity和fragment代码会变得臃肿，且代码不易复用。</p><h3 id="使用LifeCycle后"><a href="#使用LifeCycle后" class="headerlink" title="使用LifeCycle后"></a>使用LifeCycle后</h3><p>在我们使用LifeCycle之后，主程序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycleActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_life_cycle);</span><br><span class="line"></span><br><span class="line">        getLifecycle().addObserver(<span class="keyword">new</span> LocationListener());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跟生命周期相关的监听器</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 12/5/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationListener</span> <span class="keyword">implements</span> <span class="title">LifecycleObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_START)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"LifeCycleListener"</span>, <span class="string">"start"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_STOP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"LifeCycleListener"</span>, <span class="string">"stop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_ANY)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onAny</span><span class="params">(LifecycleOwner owner, Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"LifeCycleListener"</span>, <span class="string">"onAny:"</span> + event.name());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显而易见，现在调用程序只需一行代码，简化了调用方的代码，调用方不需要关心生命周期的处理逻辑，这部分逻辑转移到具体的业务实现方，实现高内聚和低耦合。</p><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p>官方地址：<a href="https://developer.android.com/topic/libraries/architecture/lifecycle.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/topic/libraries/architecture/lifecycle.html</a><br>源码地址：<a href="https://github.com/jingle1267/AndroidArchitectureComponets" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/AndroidArchitectureComponets</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2017/12/09/lifecycle/">http://ihongqiqu.com/2017/12/09/lifecycle/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;LifeCycle 架构设计一大利器，旨在减少Activity和Fragment中代码，简化Activity和Fragment职责，实现功能代码分离，达到解耦的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="Android Architecture Components" scheme="http://ihongqiqu.com/categories/Android-Architecture-Components/"/>
    
    
      <category term="LifeCycle" scheme="http://ihongqiqu.com/tags/LifeCycle/"/>
    
  </entry>
  
  <entry>
    <title>我在做一个APP中用到的开源库</title>
    <link href="http://ihongqiqu.com/2017/11/29/Common-Android-Open-Source-Project/"/>
    <id>http://ihongqiqu.com/2017/11/29/Common-Android-Open-Source-Project/</id>
    <published>2017-11-29T07:27:34.000Z</published>
    <updated>2018-06-21T07:09:59.039Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>最近开发了一个APP，虽然是一个小APP，但是麻雀虽小五脏俱全。以下简单介绍一下用到的开源组件。</p><a id="more"></a><h3 id="功能类"><a href="#功能类" class="headerlink" title="功能类"></a>功能类</h3><ol><li><a href="https://github.com/JakeWharton/butterknife" rel="external nofollow noopener noreferrer" target="_blank">ButterKnife</a></li><li><a href="https://github.com/rzwitserloot/lombok" rel="external nofollow noopener noreferrer" target="_blank">Lombok</a></li><li><a href="https://github.com/jingle1267/android-utils" rel="external nofollow noopener noreferrer" target="_blank">android-utils</a></li><li><a href="https://github.com/realm/realm-java" rel="external nofollow noopener noreferrer" target="_blank">realm-java</a></li><li><a href="https://github.com/jingle1267/AndroidRequest" rel="external nofollow noopener noreferrer" target="_blank">AndroidRequest</a></li><li><a href="https://github.com/ReactiveX/RxAndroid" rel="external nofollow noopener noreferrer" target="_blank">RxAndroid</a></li></ol><h4 id="ButterKnife"><a href="#ButterKnife" class="headerlink" title="ButterKnife"></a>ButterKnife</h4><p>自从用上Butter Knife，再也不用findViewById这种代码了。Android界JakeWharton大神出品，必属精品，强烈推荐使用。<br>Github地址：<a href="https://github.com/JakeWharton/butterknife" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/JakeWharton/butterknife</a><br>使用文档：<a href="http://jakewharton.github.io/butterknife/" rel="external nofollow noopener noreferrer" target="_blank">http://jakewharton.github.io/butterknife/</a></p><h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><p>自从使用了Lombok，实体类告别了大段大段的set/get方法。简简单单的一行注解，告别成百上千行的实体类。<br>Github地址：<a href="https://github.com/rzwitserloot/lombok" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/rzwitserloot/lombok</a><br>视频演示地址：<a href="https://projectlombok.org/" rel="external nofollow noopener noreferrer" target="_blank">https://projectlombok.org/</a><br>接入文档：<a href="https://projectlombok.org/setup/android" rel="external nofollow noopener noreferrer" target="_blank">https://projectlombok.org/setup/android</a></p><h4 id="android-utils"><a href="#android-utils" class="headerlink" title="android-utils"></a>android-utils</h4><p>开发过程中，工具类必不可少。自从用了android-utils，大大方便了开发，节省了自己开发时间。<br>Github地址：<a href="https://github.com/jingle1267/android-utils" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/android-utils</a></p><h4 id="realm-java"><a href="#realm-java" class="headerlink" title="realm-java"></a>realm-java</h4><p>Realm为移动设备而生！替代 SQLite 和 Core Data。为你省下数周的时间和数千行的代码，帮你创造出更棒的用户体验。</p><p>Github地址：<a href="https://github.com/realm/realm-java" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/realm/realm-java</a><br>使用文档：<a href="https://realm.io/cn/docs/java/latest/" rel="external nofollow noopener noreferrer" target="_blank">https://realm.io/cn/docs/java/latest/</a></p><h4 id="AndroidRequest"><a href="#AndroidRequest" class="headerlink" title="AndroidRequest"></a>AndroidRequest</h4><p>基于retrofit和okhttp封装的网络库，用户不需要了解网络底层实现，通过简单的设置就能实现网络请求。</p><p>Github地址：<a href="https://github.com/jingle1267/AndroidRequest" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/AndroidRequest</a></p><h4 id="RxAndroid"><a href="#RxAndroid" class="headerlink" title="RxAndroid"></a>RxAndroid</h4><p>RxAndroid是RxJava的扩展, 可以优雅地处理异步请求。很好很强大！</p><p>GitHub 地址：<a href="https://github.com/ReactiveX/RxAndroid" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ReactiveX/RxAndroid</a></p><h3 id="UI交互类"><a href="#UI交互类" class="headerlink" title="UI交互类"></a>UI交互类</h3><ol><li><a href="https://github.com/lcodecorex/TwinklingRefreshLayout" rel="external nofollow noopener noreferrer" target="_blank">TwinklingRefreshLayout</a></li><li><a href="https://github.com/bumptech/glide" rel="external nofollow noopener noreferrer" target="_blank">Glide</a></li><li><a href="https://github.com/ikew0ng/SwipeBackLayout" rel="external nofollow noopener noreferrer" target="_blank">SwipeBackLayout</a></li><li><a href="https://github.com/zhihu/Matisse" rel="external nofollow noopener noreferrer" target="_blank">Matisse</a></li><li><a href="https://github.com/hdodenhof/CircleImageView" rel="external nofollow noopener noreferrer" target="_blank">CircleImageView</a></li><li><a href="https://github.com/H07000223/FlycoTabLayout" rel="external nofollow noopener noreferrer" target="_blank">FlycoTabLayout</a></li><li><a href="https://github.com/7heaven/SHSegmentControl" rel="external nofollow noopener noreferrer" target="_blank">SHSegmentControl</a></li><li><a href="https://github.com/google/flexbox-layout" rel="external nofollow noopener noreferrer" target="_blank">flexbox-layout</a></li><li><a href="https://github.com/yanzhenjie/Album" rel="external nofollow noopener noreferrer" target="_blank">Album</a></li><li><a href="https://github.com/MagicMashRoom/SuperCalendar" rel="external nofollow noopener noreferrer" target="_blank">SuperCalendar</a></li><li><a href="https://github.com/fython/MaterialStepperView" rel="external nofollow noopener noreferrer" target="_blank">MaterialStepperView</a></li></ol><h4 id="TwinklingRefreshLayout"><a href="#TwinklingRefreshLayout" class="headerlink" title="TwinklingRefreshLayout"></a>TwinklingRefreshLayout</h4><p>支持下拉刷新和上拉加载的RefreshLayout,自带越界回弹效果，支持RecyclerView,AbsListView,ScrollView,WebView。</p><p>Github地址：<a href="https://github.com/lcodecorex/TwinklingRefreshLayout" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/lcodecorex/TwinklingRefreshLayout</a></p><h4 id="Glide"><a href="#Glide" class="headerlink" title="Glide"></a>Glide</h4><p>Google推荐的图片加载库，专注于流畅的滚动。</p><p>Github地址：<a href="https://github.com/bumptech/glide" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/bumptech/glide</a></p><h4 id="SwipeBackLayout"><a href="#SwipeBackLayout" class="headerlink" title="SwipeBackLayout"></a>SwipeBackLayout</h4><p>类似微信的右滑关闭页面，本开源库支持右滑、左滑、上滑手势</p><p>Github地址：<a href="https://github.com/ikew0ng/SwipeBackLayout" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ikew0ng/SwipeBackLayout</a></p><h4 id="Matisse"><a href="#Matisse" class="headerlink" title="Matisse"></a>Matisse</h4><p>一个设计良好的本地图片／视频文件选择库，支持不同的图片加载方式。知乎出品，也是精品。</p><p>Github地址：<a href="https://github.com/zhihu/Matisse" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/zhihu/Matisse</a></p><h4 id="CircleImageView"><a href="#CircleImageView" class="headerlink" title="CircleImageView"></a>CircleImageView</h4><p>圆形图片，边框等，简单易用。</p><p>Github地址：<a href="https://github.com/hdodenhof/CircleImageView" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/hdodenhof/CircleImageView</a></p><h4 id="FlycoTabLayout"><a href="#FlycoTabLayout" class="headerlink" title="FlycoTabLayout"></a>FlycoTabLayout</h4><p>Tab切换通用样式。</p><p>Github地址：<a href="https://github.com/H07000223/FlycoTabLayout" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/H07000223/FlycoTabLayout</a></p><h4 id="SHSegmentControl"><a href="#SHSegmentControl" class="headerlink" title="SHSegmentControl"></a>SHSegmentControl</h4><p>仿iOS的Tag切换效果。</p><p>Github地址：<a href="https://github.com/7heaven/SHSegmentControl" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/7heaven/SHSegmentControl</a></p><h4 id="flexbox-layout"><a href="#flexbox-layout" class="headerlink" title="flexbox-layout"></a>flexbox-layout</h4><p>谷歌官方流式布局，功能强大。</p><p>Github地址：<a href="https://github.com/google/flexbox-layout" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/google/flexbox-layout</a></p><h4 id="Album"><a href="#Album" class="headerlink" title="Album"></a>Album</h4><p>Album是一个MD风格的开源相册，支持国际化，支持国际化扩展；主要功能模块：选择图片与视频、拍照、录视频、画廊。</p><p>Github地址：<a href="https://github.com/yanzhenjie/Album" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/yanzhenjie/Album</a></p><h4 id="SuperCalendar"><a href="#SuperCalendar" class="headerlink" title="SuperCalendar"></a>SuperCalendar</h4><p>日历选择控件，代码简洁。自定义日历控件 支持左右无限滑动 周月切换 标记日期显示 自定义显示效果跳转到指定日期。</p><p>Github地址：<a href="https://github.com/MagicMashRoom/SuperCalendar" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/MagicMashRoom/SuperCalendar</a></p><h4 id="MaterialStepperView"><a href="#MaterialStepperView" class="headerlink" title="MaterialStepperView"></a>MaterialStepperView</h4><p>带动画效果的步骤控件。</p><p>Github地址：<a href="https://github.com/fython/MaterialStepperView" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/fython/MaterialStepperView</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2017/11/29/Common-Android-Open-Source-Project/">http://ihongqiqu.com/2017/11/29/Common-Android-Open-Source-Project/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;最近开发了一个APP，虽然是一个小APP，但是麻雀虽小五脏俱全。以下简单介绍一下用到的开源组件。&lt;/p&gt;
    
    </summary>
    
      <category term="开源库" scheme="http://ihongqiqu.com/categories/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
    
      <category term="开源库" scheme="http://ihongqiqu.com/tags/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>RxJava Hello World</title>
    <link href="http://ihongqiqu.com/2017/10/16/RxJava-Hello-World/"/>
    <id>http://ihongqiqu.com/2017/10/16/RxJava-Hello-World/</id>
    <published>2017-10-16T10:02:03.000Z</published>
    <updated>2018-06-21T07:09:59.039Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><h4 id="RxJava是什么？"><a href="#RxJava是什么？" class="headerlink" title="RxJava是什么？"></a>RxJava是什么？</h4><blockquote><p>RxJava is a Java VM implementation of Reactive Extensions: a library for composing asynchronous and event-based programs by using observable sequences.</p></blockquote><p>翻译:一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。RxJava官方地址：<a href="https://github.com/ReactiveX/RxJava" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ReactiveX/RxJava</a></p><a id="more"></a><h4 id="RxJava解决了什么问题？"><a href="#RxJava解决了什么问题？" class="headerlink" title="RxJava解决了什么问题？"></a>RxJava解决了什么问题？</h4><p>RxJava近两年来越来越流行，越来越收到广大开发者青睐，肯定它有哪些魔力。这魔力解决了开发者开发过程中的某些痛点，结合对RxJava的理解，你会发现，其实它解决的是<strong>异步</strong>的问题。</p><p>RxJava是如何解决异步处理的问题的呢？开发中异步的主要场景时，耗时操作需要放到单独线程中，异步任务执行成功之后，在主线程中执行更新UI等其它操作。</p><p>使用RxJava之后，通过简单设置，就可以实现执行线程的切换，开发者只需要关心具体的逻辑，不用太多关心那个线程的问题。</p><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>下面举一个异步下载图片，主线程更新显示出来的例子（例子用Android实现）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">"https://avatars2.githubusercontent.com/u/3887795?v=2&amp;s=60"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.将网络地址转换为Drawable</span></span><br><span class="line">Function&lt;String, Drawable&gt; str2Drawable = <span class="keyword">new</span> Function&lt;String, Drawable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">apply</span><span class="params">(@NonNull String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Drawable drawable = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            drawable = Drawable.createFromStream(<span class="keyword">new</span> URL(s).openStream(), <span class="string">"src"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> drawable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.将drawable先是到imageview上</span></span><br><span class="line">Consumer&lt;Drawable&gt; drawableConsumer = <span class="keyword">new</span> Consumer&lt;Drawable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Drawable drawable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ivWebPic.setImageDrawable(drawable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.控制步骤1和步骤2执行线程</span></span><br><span class="line">Observable.just(url)</span><br><span class="line">        .map(str2Drawable)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(drawableConsumer);</span><br></pre></td></tr></table></figure><p>以上代码，下载图片逻辑和展示逻辑完全分离，实现逻辑分离。这只是一个Hello World例子，RxJava很有很多炫酷的功能期待你去解锁。</p><p><br>本文地址 <a href="http://ihongqiqu.com/2017/10/16/RxJava-Hello-World/">http://ihongqiqu.com/2017/10/16/RxJava-Hello-World/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;h4 id=&quot;RxJava是什么？&quot;&gt;&lt;a href=&quot;#RxJava是什么？&quot; class=&quot;headerlink&quot; title=&quot;RxJava是什么？&quot;&gt;&lt;/a&gt;RxJava是什么？&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;RxJava is a Java VM implementation of Reactive Extensions: a library for composing asynchronous and event-based programs by using observable sequences.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;翻译:一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。RxJava官方地址：&lt;a href=&quot;https://github.com/ReactiveX/RxJava&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://github.com/ReactiveX/RxJava&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="RxJava" scheme="http://ihongqiqu.com/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="http://ihongqiqu.com/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>BottomNavigationView</title>
    <link href="http://ihongqiqu.com/2017/06/14/BottomNavigationView/"/>
    <id>http://ihongqiqu.com/2017/06/14/BottomNavigationView/</id>
    <published>2017-06-14T14:35:22.000Z</published>
    <updated>2018-06-21T07:09:59.039Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>要点：本文主要写使用 BottomNavigationView 和遇到的一些问题的解决办法</p><a id="more"></a><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>作为谷歌 <a href="https://developer.android.com/reference/android/support/design/widget/BottomNavigationView.html" rel="external nofollow noopener noreferrer" target="_blank">Material Design Components</a> 新控件 BottomNavigationView， 提供应用底部导航栏的实现。没有这个控件之前，Android 底部导航栏一般通过 LinearLayout 包裹几个 Button 或使用 RadioGroup 和 RadioButton 来实现。使用 BottomNavigationView 这个控件，可以提供更好的用户体验和开发更容易。此文主要介绍在使用 BottomNavigationView 过程中遇到的几个问题。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>这个没有什么好说的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile 'com.android.support:design:25.0.0'</span><br></pre></td></tr></table></figure><h4 id="添加布局"><a href="#添加布局" class="headerlink" title="添加布局"></a>添加布局</h4><p>布局分两个部分，首先是总的布局：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.BottomNavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:itemIconTint</span>=<span class="string">"@color/tab_home"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:itemTextColor</span>=<span class="string">"@color/tab_home"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"?android:attr/windowBackground"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">"@menu/navigation"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>其次，配置导航项。在 res 的 menu 目录下创建上面代码中 app:menu=”@menu/bottom_menu” 要引用到的文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_home"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_home"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/title_home"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_category"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_category"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/title_category"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/title_activity"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_cart"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_cart"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/title_cart"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_mine"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_mine"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/title_mine"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>主要是点击事件的处理，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">navigation = (BottomNavigationView) findViewById(R.id.navigation);</span><br><span class="line">        navigation.setOnNavigationItemSelectedListener(<span class="keyword">new</span> BottomNavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> R.id.navigation_home:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.navigation_category:</span><br><span class="line">                        setTitle(R.string.title_category);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.navigation_activity:</span><br><span class="line">                        setTitle(R.string.title_activity);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.navigation_cart:</span><br><span class="line">                        setTitle(R.string.title_cart);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.navigation_mine:</span><br><span class="line">                        setTitle(R.string.title_mine);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>通过以上的代码，我们的代码就能运行起来，效果图如下:<img src="/imgs/post/bottomnavigation_example_1.png" alt="bottomnavigation_example_1">：</p><h3 id="没那么简单"><a href="#没那么简单" class="headerlink" title="没那么简单"></a>没那么简单</h3><p>很快你会发现，接入简单，但是真正符合我们的设计要求，我们还需要捣腾捣腾。</p><p>下面列举一下我遇到的问题：</p><ol><li>当导航项大于三个的时候，选中项变大，其它文字被隐藏</li><li><p>当我们自定义默认和选中图之后，选中的效果图变色了</p><p>问题来了，我们怎么解决呢？</p><p>针对第一个问题，在网上查资料后，发现是 mShiftingMode 的问题，默认是开启的且谷歌没有开放修改接口。既然谷歌不给修改接口，那么我们就硬来，用反射来解决。实现代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BottomNavigationViewHelper.disableShiftMode(navigation);</span><br></pre></td></tr></table></figure><p>BottomNavigationViewHelper 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BottomNavigationViewHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">disableShiftMode</span><span class="params">(BottomNavigationView view)</span> </span>&#123;</span><br><span class="line">        BottomNavigationMenuView menuView = (BottomNavigationMenuView) view.getChildAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field shiftingMode = menuView.getClass().getDeclaredField(<span class="string">"mShiftingMode"</span>);</span><br><span class="line">            shiftingMode.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            shiftingMode.setBoolean(menuView, <span class="keyword">false</span>);</span><br><span class="line">            shiftingMode.setAccessible(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; menuView.getChildCount(); i++) &#123;</span><br><span class="line">                BottomNavigationItemView item = (BottomNavigationItemView) menuView.getChildAt(i);</span><br><span class="line">                item.setShiftingMode(<span class="keyword">false</span>);</span><br><span class="line">                item.setChecked(item.getItemData().isChecked());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            Log.e(<span class="string">"BottomNavigationViewHelper"</span>, <span class="string">"Unable to get shift mode field"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            Log.e(<span class="string">"BottomNavigationViewHelper"</span>, <span class="string">"Unable to change value of shift mode"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对第二个问题，各种谷歌百度后，发现是控件默认着色器的问题。知道问题所在，解决起来就简单了。只需一行代码禁 tint 就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigation.setItemIconTintList(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>默认和选中文字的颜色，只需要添加颜色 selector 就可以了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:itemTextColor="@color/tab_home"</span><br></pre></td></tr></table></figure><p>另外，BottomNavigationView 支持的导航项数量是3-5个。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>谷歌 BottomNavigationView 效果是挺好的，使用很方便，特效也很不错，唯一不足就是接口不太友善。总的来说，这个控件使用容易且效果很赞，建议使用。</p><p><br>本文地址 <a href="http://ihongqiqu.com/2017/06/14/BottomNavigationView/">http://ihongqiqu.com/2017/06/14/BottomNavigationView/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;要点：本文主要写使用 BottomNavigationView 和遇到的一些问题的解决办法&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ihongqiqu.com/categories/Android/"/>
    
    
      <category term="BottomNavigationView" scheme="http://ihongqiqu.com/tags/BottomNavigationView/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 排序 nested</title>
    <link href="http://ihongqiqu.com/2017/03/11/elasticsearch-sort-nested/"/>
    <id>http://ihongqiqu.com/2017/03/11/elasticsearch-sort-nested/</id>
    <published>2017-03-11T06:41:39.000Z</published>
    <updated>2018-06-21T07:09:59.038Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>此文关于 ElasticSearch 中 nested 类型中某个字段排序的问题。</p><a id="more"></a><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>以官方数据模型为例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/blogpost/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"Investment secrets"</span>,</span><br><span class="line">  <span class="attr">"body"</span>:  <span class="string">"What they don't tell you ..."</span>,</span><br><span class="line">  <span class="attr">"tags"</span>:  [ <span class="string">"shares"</span>, <span class="string">"equities"</span> ],</span><br><span class="line">  <span class="attr">"comments"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>:    <span class="string">"Mary Brown"</span>,</span><br><span class="line">      <span class="attr">"comment"</span>: <span class="string">"Lies, lies, lies"</span>,</span><br><span class="line">      <span class="attr">"age"</span>:     <span class="number">42</span>,</span><br><span class="line">      <span class="attr">"stars"</span>:   <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"date"</span>:    <span class="string">"2014-10-18"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>:    <span class="string">"John Smith"</span>,</span><br><span class="line">      <span class="attr">"comment"</span>: <span class="string">"You're making it up!"</span>,</span><br><span class="line">      <span class="attr">"age"</span>:     <span class="number">28</span>,</span><br><span class="line">      <span class="attr">"stars"</span>:   <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"date"</span>:    <span class="string">"2014-10-16"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上结构能看出，每片文章有很多评论，评论是 nested 类型。业务的场景是：将评论中 starts 为 2的，按照年龄从高到低，对所有的文章进行排序。</p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>废话不多说直接上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SortOrder sortOrder = SortOrder.DESC;</span><br><span class="line"><span class="keyword">int</span> stars = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// String flag = sortOrder.toString().equals("desc") ? "_last" : "_first";</span></span><br><span class="line">SortBuilder sortBuilder = SortBuilders.fieldSort(<span class="string">"comments.age"</span>)</span><br><span class="line">    .setNestedFilter(termQuery(<span class="string">"comments.stars"</span>, stars)).setNestedPath(<span class="string">"comments"</span>).order(sortOrder);<span class="comment">//.missing(flag).unmappedType("long");</span></span><br><span class="line"></span><br><span class="line">requestBuilder.addSort(sortBuilder);</span><br></pre></td></tr></table></figure><p>以上代码中，针对 nested 类型的排序，setNestedPath() 和 setNestedFilter() 两个方法是必须的。其中 setNestedFilter() 的参数 QueryBuilder 的过滤字段，path 是必须要有的（2.1版本亲测），即 “comments.stars”。</p><p>Restful 格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"from"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"size"</span> : <span class="number">20</span>,</span><br><span class="line">  <span class="attr">"sort"</span> : [ &#123;</span><br><span class="line">    <span class="attr">"comments.age"</span> : &#123;</span><br><span class="line">      <span class="attr">"order"</span> : <span class="string">"desc"</span>,</span><br><span class="line">      <span class="attr">"nested_filter"</span> : &#123;</span><br><span class="line">        <span class="attr">"term"</span> : &#123;</span><br><span class="line">          <span class="attr">"comments.stars"</span> : <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"nested_path"</span> : <span class="string">"comments"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>本文参考的链接如下：</p><p>官方网站: <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-sorting.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-sorting.html</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2017/03/11/elasticsearch-sort-nested/">http://ihongqiqu.com/2017/03/11/elasticsearch-sort-nested/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;此文关于 ElasticSearch 中 nested 类型中某个字段排序的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://ihongqiqu.com/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://ihongqiqu.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 快速上手</title>
    <link href="http://ihongqiqu.com/2017/01/22/mybatis/"/>
    <id>http://ihongqiqu.com/2017/01/22/mybatis/</id>
    <published>2017-01-22T12:00:23.000Z</published>
    <updated>2018-06-21T07:09:59.038Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><h3 id="MyBatis-介绍"><a href="#MyBatis-介绍" class="headerlink" title="MyBatis 介绍"></a>MyBatis 介绍</h3><p>MyBatis 本是 apache 的一个开源项目 iBatis，2010年这个项目由 apache software foundation 迁移到了google code，并且改名为 MyBatis 。MyBatis 是一个基于 Java 的持久层框架。iBATIS 提供的持久层框架包括 SQL Maps 和 Data Access Objects（DAO）。</p><a id="more"></a><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects，普通的 Java对象)映射成数据库中的记录。</p><h3 id="MyBatis-架构"><a href="#MyBatis-架构" class="headerlink" title="MyBatis 架构"></a>MyBatis 架构</h3><p>我们把 MyBatis 的<strong><em>功能架构</em></strong>分为三层：</p><ol><li><strong>API 接口层</strong>：提供给外部使用的接口 API，开发人员通过这些本地 API 来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</li><li><strong>数据处理层</strong>：负责具体的 SQL 查找、SQL 解析、SQL 执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</li><li><p><strong>基础支撑层</strong>：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</p><p>MyBatis 功能架构图:</p><p><img src="/imgs/post/mybatis_arch.jpg" alt="mybatis_arch"></p><p>MyBatis 的框架架构图:</p><p><img src="/imgs/post/mybatis_base_arch.png" alt="mybatis_base_arch"></p><p>MyBatis 应用程序根据 XML 配置文件创建 SqlSessionFactory，SqlSessionFactory 根据配置(配置来源于两个地方：配置文件和代码注解)获取一个SqlSession。SqlSession 包含了执行 SQL 所需要的所有方法，可以通过 SqlSession 实例直接运行映射的 SQL 语句，完成对数据的增删改查和事务提交等，用完之后关闭 SqlSession。</p></li></ol><h3 id="MyBatis-开发步骤"><a href="#MyBatis-开发步骤" class="headerlink" title="MyBatis 开发步骤"></a>MyBatis 开发步骤</h3><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建数据库表并配置数据库连接</p></li><li>创建 Model 和 DAO 接口</li><li>实现 DAO 接口<br><strong>配置文件注意</strong>：<br>A. namespace 必须对应完整包路径下的类<br>B. id 必须与 DAO 接口中的方法名相同</li><li>MyBatis 和 Spring 的整合</li><li>编写 MyBatis 配置文件</li></ol><h3 id="开发优化"><a href="#开发优化" class="headerlink" title="开发优化"></a>开发优化</h3><p>在使用 MyBatis 开发过程中，发现创建 Model 和 DAO 有很多工作比较机械切话费较多开发时间。MyBatis 也发现了这个问题，MBG（MyBatis Generator）因此诞生了。</p><p>MBG 使用步骤：</p><h4 id="1-添加插件和依赖"><a href="#1-添加插件和依赖" class="headerlink" title="1. 添加插件和依赖"></a>1. 添加插件和依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>mybatis_generator<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-添加-MBG-生成代码的配置文件"><a href="#2-添加-MBG-生成代码的配置文件" class="headerlink" title="2. 添加 MBG 生成代码的配置文件"></a>2. 添加 MBG 生成代码的配置文件</h4><p>generatorConfig.xml 文件配置一下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">      &lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span></span></span><br><span class="line"><span class="tag">            <span class="attr">location</span>=<span class="string">"/Users/[who am i]/.m2/repository/mysql/mysql-connector-java/5.1.30/mysql-connector-java-5.1.30.jar"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysqlTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的pojo，将implements Serializable--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 数据库链接URL、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"$&#123;jdbc.url&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"$&#123;jdbc.username&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer</span></span><br><span class="line"><span class="comment">            true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，</span></span><br><span class="line"><span class="comment">        也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.ihongqiqu.entity"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!--对应的mapper.xml文件  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mappers"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 对应的Mapper接口类文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.ihongqiqu.dao"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 列出要生成代码的所有表，这里配置的是不生成Example文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"UserInfo"</span> <span class="attr">domainObjectName</span>=<span class="string">"UserInfoPO"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面配置用到 jdbc.properties，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/jdorg</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=</span><br></pre></td></tr></table></figure><h4 id="3-生成代码"><a href="#3-生成代码" class="headerlink" title="3. 生成代码"></a>3. 生成代码</h4><p>点击 Maven 下的 mybatis-generator:generate ，然后就可以看到生成的 XXXPOMapper.xml、XXXPO.java、XXXPOMapper.java 三个文件了。</p><p>上面三个步骤，核心是第二个配置文件。我们可以在 generatorConfig.xml 配置相关的参数，代码中有注释，这里不在细说。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol><li>MyBatis 官方文档: <a href="http://www.mybatis.org/mybatis-3/zh/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.mybatis.org/mybatis-3/zh/index.html</a></li><li>MyBatis generator 文档：<a href="http://generator.sturgeon.mopaas.com/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://generator.sturgeon.mopaas.com/index.html</a></li></ol><p><br>本文地址 <a href="http://ihongqiqu.com/2017/01/22/mybatis/">http://ihongqiqu.com/2017/01/22/mybatis/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;MyBatis-介绍&quot;&gt;&lt;a href=&quot;#MyBatis-介绍&quot; class=&quot;headerlink&quot; title=&quot;MyBatis 介绍&quot;&gt;&lt;/a&gt;MyBatis 介绍&lt;/h3&gt;&lt;p&gt;MyBatis 本是 apache 的一个开源项目 iBatis，2010年这个项目由 apache software foundation 迁移到了google code，并且改名为 MyBatis 。MyBatis 是一个基于 Java 的持久层框架。iBATIS 提供的持久层框架包括 SQL Maps 和 Data Access Objects（DAO）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://ihongqiqu.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>android一键分享热点</title>
    <link href="http://ihongqiqu.com/2017/01/13/android-wifi-hotspot/"/>
    <id>http://ihongqiqu.com/2017/01/13/android-wifi-hotspot/</id>
    <published>2017-01-13T07:53:37.000Z</published>
    <updated>2018-06-21T07:09:59.038Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>产品提了一个需求，希望在手机上能够一键共享自己的移动网络。且希望用户能够通过扫描二维码链接上网络。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>经过各种谷歌和文档资料查询，发现 Android 的 API 是不支持对 AP 的操作。但是，这是难不倒我们的工程师的，通过谷歌搜索出来很多通过反射来管理 AP 的方法。这样第一个问题就算解决了。</p><p>然而，想要实现任何应用扫码连接共享的网络，有很多问题。二维码其实就是一个字符串的一种展现形式。想通过二维码链接网络，其实就是想通过一个字符串来改变世界啊！现在用户量较大的扫二维码应用都会有一些自己的协议，要实现我们的功能，我们必须要选择了通用的协议。扫二维码通用的协议，想来想去就只有链接地址了。一般扫码应用都是支持打开链接地址的。接下来的任务就要交给我们的 H5。想要通过 H5 来实现连接 WiFi 这个功能是不现实(不知道利用 H5 的漏洞能不能搞)。其实如果用户没有网络，二维码携带任何信息都没有什么乱用的。</p><p>通过反射技术来实现对热点的开关控制实现并不复杂，接下来简单介绍一下。</p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>一键建立热点主要需要实现如下功能：</p><ol><li>获取当前 AP 的开关状态</li><li>打开和关闭 AP</li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p>检测 AP 的状态，通过反射实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * check whether wifi hotspot on or off</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isApOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Method method = wifiManager.getClass().getDeclaredMethod(<span class="string">"isWifiApEnabled"</span>);</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (Boolean) method.invoke(wifiManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ignored) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开和关闭 AP，反射实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * wifi热点开关</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> enabled true：打开  false：关闭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true：成功  false：失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setWifiApEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (BuildConfig.DEBUG) Log.d(<span class="string">"WifiAPMgr"</span>, <span class="string">"开启热点"</span>);</span><br><span class="line">    <span class="keyword">if</span> (enabled) &#123;</span><br><span class="line">        <span class="comment">// wifi和热点不能同时打开，所以打开热点的时候需要关闭wifi</span></span><br><span class="line">        wifiManager.setWifiEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) Log.d(<span class="string">"WifiAPMgr"</span>, <span class="string">"关闭wifi"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// wifiManager.setWifiEnabled(true);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 热点的配置类</span></span><br><span class="line">        WifiConfiguration apConfig = <span class="keyword">new</span> WifiConfiguration();</span><br><span class="line">        <span class="comment">// 配置热点的名称(可以在名字后面加点随机数什么的)</span></span><br><span class="line">        apConfig.SSID = apName;</span><br><span class="line">        <span class="comment">// 配置热点的密码</span></span><br><span class="line">        apConfig.preSharedKey = apPwd;</span><br><span class="line">        <span class="comment">// 安全：WPA2_PSK</span></span><br><span class="line">        apConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);</span><br><span class="line">        <span class="comment">// 通过反射调用设置热点</span></span><br><span class="line">        Method method = wifiManager.getClass().getMethod(</span><br><span class="line">                <span class="string">"setWifiApEnabled"</span>, WifiConfiguration.class, Boolean.TYPE);</span><br><span class="line">        <span class="comment">// 返回热点打开状态</span></span><br><span class="line">        <span class="keyword">return</span> (Boolean) method.invoke(wifiManager, apConfig, enabled);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>下载 APK 安装体验，下载地址：<br><a href="https://raw.githubusercontent.com/jingle1267/OneKeyShareWifi/master/app-debug.apk" rel="external nofollow noopener noreferrer" target="_blank">https://raw.githubusercontent.com/jingle1267/OneKeyShareWifi/master/app-debug.apk</a></p><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/jingle1267/OneKeyShareWifi" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/OneKeyShareWifi</a></p><h3 id="参考地址："><a href="#参考地址：" class="headerlink" title="参考地址："></a>参考地址：</h3><ol><li><a href="http://stackoverflow.com/questions/6394599/android-turn-on-off-wifi-hotspot-programmatically" rel="external nofollow noopener noreferrer" target="_blank">http://stackoverflow.com/questions/6394599/android-turn-on-off-wifi-hotspot-programmatically</a></li><li><a href="http://blog.csdn.net/u013049709/article/details/42235829" target="_blank" rel="noopener">http://blog.csdn.net/u013049709/article/details/42235829</a></li></ol><p><br>本文地址 <a href="http://ihongqiqu.com/2017/01/13/android-wifi-hotspot/">http://ihongqiqu.com/2017/01/13/android-wifi-hotspot/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;产品提了一个需求，希望在手机上能够一键共享自己的移动网络。且希望用户能够通过扫描二维码链接上网络。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ihongqiqu.com/categories/Android/"/>
    
    
      <category term="Android WiFi 热点" scheme="http://ihongqiqu.com/tags/Android-WiFi-%E7%83%AD%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Hello World by React</title>
    <link href="http://ihongqiqu.com/2017/01/09/react-hello-world/"/>
    <id>http://ihongqiqu.com/2017/01/09/react-hello-world/</id>
    <published>2017-01-09T09:18:34.000Z</published>
    <updated>2018-06-21T07:09:59.038Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>React 是一个用于构建用户界面的 JAVASCRIPT 库。React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>React 特点:</p><ol><li>声明式设计 −React采用声明范式，可以轻松描述应用。</li><li>高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</li><li>灵活 −React可以与已知的库或框架很好地配合。</li><li>JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li><li>组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li><li>单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</li></ol><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><pre><code>npm install -g create-react-app</code></pre><h3 id="创建Hello-World"><a href="#创建Hello-World" class="headerlink" title="创建Hello World"></a>创建Hello World</h3><pre><code>create-react-app hello-world</code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre><code>cd hello-worldnpm start</code></pre><h3 id="创建成功"><a href="#创建成功" class="headerlink" title="创建成功"></a>创建成功</h3><p>执行命令的输出结果如下:</p><blockquote><p>Success! Created hello-world at /Users/zhenguo/Documents/develop/react/hello-world<br>Inside that directory, you can run several commands:</p><pre><code>npm start</code></pre><p>Starts the development server.</p><pre><code>npm run build</code></pre><p>Bundles the app into static files for production.</p><pre><code>npm test</code></pre><p>Starts the test runner.</p><pre><code>npm run eject</code></pre><p>Removes this tool and copies build dependencies, configuration files and scripts into the app directory. If you do this, you can’t go back!</p><p>We suggest that you begin by typing:</p><pre><code>cd hello-worldnpm start</code></pre><p>Happy hacking!</p></blockquote><p>执行效果如下：</p><p><img src="/imgs/post/react-hello-world-preview.png" alt="react-hello-world-preview"></p><p>以上是 React 给我们创建的默认项目。其实时间 Hello World很简单，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/react-0.14.7/build/react.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/react-0.14.7/build/react-dom.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      ReactDOM.render(</span></span><br><span class="line"><span class="javascript">        &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><br><span class="line"><span class="undefined">      );</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接保存本地就可以看到 “Hello world!” 了！</p><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="https://facebook.github.io/react/docs/installation.html" rel="external nofollow noopener noreferrer" target="_blank">https://facebook.github.io/react/docs/installation.html</a></p><p><a href="http://www.runoob.com/react/react-tutorial.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/react/react-tutorial.html</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2017/01/09/react-hello-world/">http://ihongqiqu.com/2017/01/09/react-hello-world/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;React 是一个用于构建用户界面的 JAVASCRIPT 库。React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://ihongqiqu.com/categories/React/"/>
    
    
      <category term="React" scheme="http://ihongqiqu.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Android WebView组件</title>
    <link href="http://ihongqiqu.com/2017/01/05/android-webview-component/"/>
    <id>http://ihongqiqu.com/2017/01/05/android-webview-component/</id>
    <published>2017-01-05T12:38:22.000Z</published>
    <updated>2018-06-21T07:09:59.038Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><h3 id="原生和-H5-介绍"><a href="#原生和-H5-介绍" class="headerlink" title="原生和 H5 介绍"></a>原生和 H5 介绍</h3><p>原生应用的用户体验不错，但是开发成本相对较高。原生应用的灵活性相对页不如 Web 页，切 Web 页相对原生有更强的控制力。原生应用出了 Bug，如果没有热补丁等热修复技术，应用就需要重新发版上线。Web 页面的控制权都在服务器端，故出了问题，在服务器端修复问题，就把线上的 Bug 修复完了。</p><a id="more"></a><p>下图列出了它们的优势和劣势(包括混合型应用)：</p><p><img src="http://ihongqiqu.com/sliders/assets/images/Android-Intro/NativeVSH5.png" alt="Native VS Hybrid VS H5"></p><p>原生和 Web 页各有优势和劣势，混合应用顺势而生。在原生应用中显示 Web 页也成为很流行的一种策略，即保证了主体功能的用户体验，又包含了 Web 页的灵活性和高控制性。</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>现在，我们的应用中很多都需要能够支持显示 H5 页面。对于活动页和变动比较频繁以及尚在尝试阶段的需求，一般都会先用 H5 来实现。我们原生应用显示 H5 页面也称为应用的一个强需求，故做此组件。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Android 中使用 WebView 来显示网页。WebViewClient 帮助 WebView 处理各种通知、请求事件。WebChromeClient 主要辅助 WebView 处理 Javascript 的对话框、网站图标、网站 title、加载进度等。</p><h4 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h4><p>简单使用方法调用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebActivity.launch(<span class="keyword">this</span>, <span class="string">"http://ihongqiqu.com"</span>, <span class="string">"标题"</span>);</span><br></pre></td></tr></table></figure><h4 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h4><p>UrlHandler 负责对 url 进行拦截。<strong>独立的业务可以实现自己的 UrlHandler</strong>。然后只需要在 MyWebViewClient 修改一下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    FirstUrlHandler firstUrlHandler = <span class="keyword">new</span> FirstUrlHandler(view.getContext());</span><br><span class="line">    OriginUrlHandler originUrlHandler = <span class="keyword">new</span> OriginUrlHandler(view.getContext());</span><br><span class="line">    firstUrlHandler.setNextUrlHandler(originUrlHandler);</span><br><span class="line">    <span class="comment">// 此处可以设置自己的 UrlHandler 处理</span></span><br><span class="line">    <span class="keyword">boolean</span> isHandle = firstUrlHandler.handlerUrl(url);</span><br><span class="line">    <span class="keyword">if</span> (isHandle) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        view.loadUrl(url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebView 设置在 WebFragment 中，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWebView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mWebView.getSettings().setDefaultTextEncodingName(<span class="string">"utf-8"</span>);</span><br><span class="line">    mWebView.getSettings().setSupportZoom(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 设置是否支持执行JS，如果设置为true会存在XSS攻击风险</span></span><br><span class="line">    mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// mWebView.addJavascriptInterface(new HTMLheaderJavaScriptInterface(), "local_obj");</span></span><br><span class="line">    mWebView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);</span><br><span class="line">    <span class="comment">// 水平不显示</span></span><br><span class="line">    mWebView.setHorizontalScrollBarEnabled(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 垂直不显示</span></span><br><span class="line">    mWebView.setVerticalScrollBarEnabled(<span class="keyword">false</span>);</span><br><span class="line">    mWebView.setWebViewClient(<span class="keyword">new</span> MyWebViewClient());</span><br><span class="line">    mWebView.setWebChromeClient(<span class="keyword">new</span> MyWebChromeClient(mListener));</span><br><span class="line">    mWebView.getSettings().setUseWideViewPort(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 安全考虑，防止密码泄漏，尤其是root过的手机</span></span><br><span class="line">    mWebView.getSettings().setSavePassword(<span class="keyword">false</span>);</span><br><span class="line">    String ua = mWebView.getSettings().getUserAgentString();</span><br><span class="line">    String appUA = ua + <span class="string">"; MYAPP"</span>;</span><br><span class="line">    mWebView.getSettings().setUserAgentString(appUA);</span><br><span class="line">    mWebView.getSettings().setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);</span><br><span class="line"></span><br><span class="line">    mWebView.getSettings().setDatabaseEnabled(<span class="keyword">true</span>);</span><br><span class="line">    String dir = getActivity().getApplicationContext().getDir(<span class="string">"database"</span>, Context.MODE_PRIVATE).getPath();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启用地理定位</span></span><br><span class="line">    mWebView.getSettings().setGeolocationEnabled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 设置定位的数据库路径</span></span><br><span class="line">    mWebView.getSettings().setGeolocationDatabasePath(dir);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最重要的方法，一定要设置，这就是出不来的主要原因</span></span><br><span class="line">    mWebView.getSettings().setDomStorageEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    mWebView.loadUrl(mUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p><a href="https://github.com/jingle1267/WebActivity" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/WebActivity</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2017/01/05/android-webview-component/">http://ihongqiqu.com/2017/01/05/android-webview-component/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;原生和-H5-介绍&quot;&gt;&lt;a href=&quot;#原生和-H5-介绍&quot; class=&quot;headerlink&quot; title=&quot;原生和 H5 介绍&quot;&gt;&lt;/a&gt;原生和 H5 介绍&lt;/h3&gt;&lt;p&gt;原生应用的用户体验不错，但是开发成本相对较高。原生应用的灵活性相对页不如 Web 页，切 Web 页相对原生有更强的控制力。原生应用出了 Bug，如果没有热补丁等热修复技术，应用就需要重新发版上线。Web 页面的控制权都在服务器端，故出了问题，在服务器端修复问题，就把线上的 Bug 修复完了。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ihongqiqu.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://ihongqiqu.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AOP JDK动态代理</title>
    <link href="http://ihongqiqu.com/2016/12/26/AOP-JDK/"/>
    <id>http://ihongqiqu.com/2016/12/26/AOP-JDK/</id>
    <published>2016-12-26T02:01:41.000Z</published>
    <updated>2018-06-21T07:09:59.037Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>上文 <a href="http://ihongqiqu.com/2016/12/24/aop/">通过三方库 CGLIB 动态代理实现的 AOP</a>，其实 JDK 动态代理也可以实现 AOP。JDK 动态代理实现面向切面编程，不需要依赖外部的库。</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>JDK 动态代理主要涉及到 java.lang.reflect 包中的两个类：Proxy 和InvocationHandler。InvocationHandler 是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编制在一起。 Proxy 利用 InvocationHandler 动态创建一个符合某一接口的实例，生成目标类的代理对象。</p><h3 id="AOP-应用"><a href="#AOP-应用" class="headerlink" title="AOP 应用"></a>AOP 应用</h3><p>AOP 很强大，现在用的比较广泛的有如下：</p><ol><li>性能监控，在方法调用前后记录调用时间，方法执行太长或超时报警。</li><li>缓存代理，缓存某方法的返回值，下次执行该方法时，直接从缓存里获取。</li><li>软件破解，使用 AOP 修改软件的验证类的判断逻辑。</li><li>记录日志，在方法执行前后记录系统日志。</li><li>工作流系统，工作流系统需要将业务代码和流程引擎代码混合在一起执行，那么我们可以使用 AOP 将其分离，并动态挂接业务。</li><li>权限验证，方法执行前验证是否有权限执行当前方法，没有则抛出没有权限执行异常，由业务代码捕捉。</li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><h4 id="业务接口"><a href="#业务接口" class="headerlink" title="业务接口"></a>业务接口</h4><p>Calculator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h4><p>CalculatorImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现-InvocationHandler"><a href="#实现-InvocationHandler" class="headerlink" title="实现 InvocationHandler"></a>实现 InvocationHandler</h4><p>LogHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"start"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        result = method.invoke(target, args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"end   time cost : "</span> + (end - start));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"JDK 动态代理"</span>);</span><br><span class="line"></span><br><span class="line">        Calculator target = <span class="keyword">new</span> CalculatorImpl();</span><br><span class="line">        LogHandler logHandler = <span class="keyword">new</span> LogHandler(target);</span><br><span class="line"></span><br><span class="line">        Calculator proxy = (Calculator) Proxy.newProxyInstance(target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                logHandler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = proxy.calculate(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">        System.out.println(<span class="string">"result : "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JDK 动态代理</span><br><span class="line">start</span><br><span class="line">end   time cost : 2295</span><br><span class="line">result : 13</span><br></pre></td></tr></table></figure><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p>源码下载：<a href="https://github.com/jingle1267/aop.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/aop.git</a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2016/12/26/AOP-JDK/">http://ihongqiqu.com/2016/12/26/AOP-JDK/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;上文 &lt;a href=&quot;http://ihongqiqu.com/2016/12/24/aop/&quot;&gt;通过三方库 CGLIB 动态代理实现的 AOP&lt;/a&gt;，其实 JDK 动态代理也可以实现 AOP。JDK 动态代理实现面向切面编程，不需要依赖外部的库。&lt;/p&gt;
    
    </summary>
    
      <category term="AOP" scheme="http://ihongqiqu.com/categories/AOP/"/>
    
    
      <category term="AOP" scheme="http://ihongqiqu.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>AOP CGLIB动态代理</title>
    <link href="http://ihongqiqu.com/2016/12/24/aop/"/>
    <id>http://ihongqiqu.com/2016/12/24/aop/</id>
    <published>2016-12-24T04:12:30.000Z</published>
    <updated>2018-06-21T07:09:59.037Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --><p>AOP 为 Aspect Oriented Programming 的缩写，意为面向切面编程。所谓的面向 切面编程其实是对业务逻辑又进行了进一步的抽取，将多种业务逻辑中的公用部分抽取出来做成一种服务，从而实现代码复用。</p><a id="more"></a><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>利用 AOP 可以对业务逻辑的各个部分进行分离，从而使得业务逻辑各部分之间的耦合度降低。</p><p>比较常见的有日志记录，性能统计，安全验证等。</p><p>Java 中实现 AOP 有多种方式，下文介绍基于 cglib 的 AOP 的例子。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p>以下四个类实现了，在不改变原 CalculatorImpl 代码的基础上，实现了对 calculate 执行时间的统计。</p><h4 id="Client-java"><a href="#Client-java" class="headerlink" title="Client.java"></a>Client.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   CalculatorInterceptor calculatorInterceptor = <span class="keyword">new</span> CalculatorInterceptor();</span><br><span class="line">trueCalculatorImpl calculatorImpl = <span class="keyword">new</span> CalculatorImpl();</span><br><span class="line"></span><br><span class="line">trueCalculator calculator = (Calculator) calculatorInterceptor.createProxyObject(calculatorImpl);</span><br><span class="line">true<span class="keyword">int</span> result = calculator.calculate(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">trueSystem.out.println(<span class="string">"result : "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Calculator-java"><a href="#Calculator-java" class="headerlink" title="Calculator.java"></a>Calculator.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CalculatorImpl-java"><a href="#CalculatorImpl-java" class="headerlink" title="CalculatorImpl.java"></a>CalculatorImpl.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CalculatorInterceptor-java"><a href="#CalculatorInterceptor-java" class="headerlink" title="CalculatorInterceptor.java"></a>CalculatorInterceptor.java</h4><p><strong>前方高能代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object targetObject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">createProxyObject</span><span class="params">(Object targetObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetObject = targetObject;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(<span class="keyword">this</span>.targetObject.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"start"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        result = method.invoke(targetObject, objects);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"end   time cost : "</span> + (end - start));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h4><p>执行 Client 的 main 方法，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CGLIB 动态代理</span><br><span class="line">start</span><br><span class="line">end   time cost : 2262</span><br><span class="line">result : 13</span><br></pre></td></tr></table></figure><p>最终实现的效果是：<strong>在不破坏原来代码逻辑的基础上，对原来的逻辑添加了前置和后置操作</strong>。例子中实现的统计代码的执行时间，我们还可以做日志记录，性能统计，安全验证等。</p><h3 id="AOP-与-OOP-的区别"><a href="#AOP-与-OOP-的区别" class="headerlink" title="AOP 与 OOP 的区别"></a>AOP 与 OOP 的区别</h3><p>AOP、OOP 在字面上虽然非常类似，但却是面向不同领域的两种设计思想。</p><ol><li>OOP（面向对象编程）针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。</li><li>AOP 则是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。这两种设计思想在目标上有着本质的差异。</li></ol><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p>源码下载：<a href="https://github.com/jingle1267/aop.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/aop.git</a></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>实现 AOP 方法的其它方式介绍：<a href="http://ihongqiqu.com/2016/12/26/AOP-JDK/"><a href="http://ihongqiqu.com/2016/12/26/AOP-JDK/">AOP JDK动态代理</a></a></p><p><br>本文地址 <a href="http://ihongqiqu.com/2016/12/24/aop/">http://ihongqiqu.com/2016/12/24/aop/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 27 2018 14:24:45 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;AOP 为 Aspect Oriented Programming 的缩写，意为面向切面编程。所谓的面向 切面编程其实是对业务逻辑又进行了进一步的抽取，将多种业务逻辑中的公用部分抽取出来做成一种服务，从而实现代码复用。&lt;/p&gt;
    
    </summary>
    
      <category term="AOP" scheme="http://ihongqiqu.com/categories/AOP/"/>
    
    
      <category term="AOP" scheme="http://ihongqiqu.com/tags/AOP/"/>
    
  </entry>
  
</feed>
