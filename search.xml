<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[前端十年变迁史]]></title>
      <url>http://94275.cn/2019/11/20/fe-2008-2017/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="前端标准发展史"><a href="#前端标准发展史" class="headerlink" title="前端标准发展史"></a>前端标准发展史</h3><p><img src="/sliders/assets/images/fe/前端标准迭代历史.png" alt="前端标准迭代历史"></p><h3 id="分享主要内容"><a href="#分享主要内容" class="headerlink" title="分享主要内容"></a>分享主要内容</h3><ol><li>原始社会</li><li>石器时代</li><li>铁器时代</li><li>工业时代</li><li>前端拓展</li></ol><a id="more"></a><h2 id="1-原始社会"><a href="#1-原始社会" class="headerlink" title="1. 原始社会"></a>1. 原始社会</h2><h3 id="1-1-图示"><a href="#1-1-图示" class="headerlink" title="1.1 图示"></a>1.1 图示</h3><p><img src="/sliders/assets/images/fe/原始社会.jpeg" alt="原始社会"></p><h3 id="1-2-形象"><a href="#1-2-形象" class="headerlink" title="1.2 形象"></a>1.2 形象</h3><p><img src="/sliders/assets/images/fe/原始社会-形象图.jpeg" alt="原始社会-形象图"></p><h3 id="1-3-主要特征"><a href="#1-3-主要特征" class="headerlink" title="1.3 主要特征"></a>1.3 主要特征</h3><ol><li>响应时间较长，小操作都需要刷整个页面</li><li>页面简陋</li></ol><h3 id="1-4-重要元素"><a href="#1-4-重要元素" class="headerlink" title="1.4 重要元素"></a>1.4 重要元素</h3><ol><li>1990 年 Netscape 浏览器</li><li>1991 年 WWW 诞生</li><li>1994 W3C 成立</li></ol><h2 id="2-石器时代"><a href="#2-石器时代" class="headerlink" title="2. 石器时代"></a>2. 石器时代</h2><h3 id="2-1-图示"><a href="#2-1-图示" class="headerlink" title="2.1 图示"></a>2.1 图示</h3><p><img src="/sliders/assets/images/fe/石器时代.jpeg" alt="石器时代"></p><h3 id="2-2-形象图"><a href="#2-2-形象图" class="headerlink" title="2.2 形象图"></a>2.2 形象图</h3><p><img src="/sliders/assets/images/fe/石器社会-钻木取火-形象图.jpeg" alt="石器时代-形象图"></p><h3 id="2-3-主要特征"><a href="#2-3-主要特征" class="headerlink" title="2.3 主要特征"></a>2.3 主要特征</h3><ol><li>页面还是需要整体刷新</li><li>页面变漂亮了</li><li>HTML 为骨架，CSS 为外貌，Java 为交互。</li></ol><h3 id="2-4-重要元素"><a href="#2-4-重要元素" class="headerlink" title="2.4 重要元素"></a>2.4 重要元素</h3><ol><li>PHP/JSP/ASP.NET</li><li>CSS</li></ol><h2 id="3-铁器时代"><a href="#3-铁器时代" class="headerlink" title="3. 铁器时代"></a>3. 铁器时代</h2><h3 id="3-1-图示"><a href="#3-1-图示" class="headerlink" title="3.1 图示"></a>3.1 图示</h3><p><img src="/sliders/assets/images/fe/铁器时代.png" alt="铁器时代"></p><h3 id="3-2-形象"><a href="#3-2-形象" class="headerlink" title="3.2 形象"></a>3.2 形象</h3><p><img src="/sliders/assets/images/fe/铁器社会-形象图.jpeg" alt="铁器社会-形象图"></p><h3 id="3-3-主要特征"><a href="#3-3-主要特征" class="headerlink" title="3.3 主要特征"></a>3.3 主要特征</h3><ol><li>支持异步请求，不用刷整个页面(Ajax 1998 创建-2006 纳入W3C)</li><li>前端不再是模板</li><li>HTML 为骨架，CSS 为外貌，Java和 JavaScript 为交互。</li></ol><h3 id="3-4-重要元素"><a href="#3-4-重要元素" class="headerlink" title="3.4 重要元素"></a>3.4 重要元素</h3><ol><li>浏览器兼容</li><li>Ajax</li><li>jQuery</li></ol><h2 id="4-工业时代"><a href="#4-工业时代" class="headerlink" title="4. 工业时代"></a>4. 工业时代</h2><h3 id="4-1-图示"><a href="#4-1-图示" class="headerlink" title="4.1 图示"></a>4.1 图示</h3><p><img src="/sliders/assets/images/fe/工业时代.png" alt="工业时代"></p><h3 id="4-2-形象图"><a href="#4-2-形象图" class="headerlink" title="4.2 形象图"></a>4.2 形象图</h3><h3 id="4-3-主要特征"><a href="#4-3-主要特征" class="headerlink" title="4.3 主要特征"></a>4.3 主要特征</h3><ol><li>页面变得越来越复杂</li><li>对用户体验要求越来越高</li><li>前端开发变立体</li><li>模块化/工程化</li><li>技术后端化(MVVM，nginx，lua)</li><li>后端微服务 / 前端更多业务逻辑</li></ol><h3 id="4-4-重要元素"><a href="#4-4-重要元素" class="headerlink" title="4.4 重要元素"></a>4.4 重要元素</h3><ol><li>Angular/React/Vue</li><li>MVVM</li><li>前端更多的原生能力</li><li>HTML5</li><li>CommonJS / AMD(requireJS) / CMD(SeaJS) / ES6</li></ol><h3 id="4-5-相对铁器时代变化"><a href="#4-5-相对铁器时代变化" class="headerlink" title="4.5 相对铁器时代变化"></a>4.5 相对铁器时代变化</h3><p><img src="/sliders/assets/images/fe/前端架构变化.png" alt="相对铁器时代变化"></p><h2 id="5-前端拓展"><a href="#5-前端拓展" class="headerlink" title="5. 前端拓展"></a>5. 前端拓展</h2><h3 id="5-1-浏览器近代史"><a href="#5-1-浏览器近代史" class="headerlink" title="5.1 浏览器近代史"></a>5.1 浏览器近代史</h3><h4 id="5-1-1-全球浏览器"><a href="#5-1-1-全球浏览器" class="headerlink" title="5.1.1 全球浏览器"></a>5.1.1 全球浏览器</h4><p><img src="/sliders/assets/images/fe/StatCounter-browser-all-200901-201909.png" alt="全世界浏览器占比"></p><h4 id="5-1-2-全球浏览器M"><a href="#5-1-2-全球浏览器M" class="headerlink" title="5.1.2 全球浏览器M"></a>5.1.2 全球浏览器M</h4><p><img src="/sliders/assets/images/fe/StatCounter-browser-m-200901-201909.png" alt="全世界浏览器占比m"></p><h4 id="5-1-3-中国浏览器"><a href="#5-1-3-中国浏览器" class="headerlink" title="5.1.3 中国浏览器"></a>5.1.3 中国浏览器</h4><p><img src="/sliders/assets/images/fe/StatCounter-browser-CN-all-200901-201909.png" alt="中国浏览器占比"></p><h4 id="5-1-4-中国浏览器M"><a href="#5-1-4-中国浏览器M" class="headerlink" title="5.1.4 中国浏览器M"></a>5.1.4 中国浏览器M</h4><p><img src="/sliders/assets/images/fe/StatCounter-browser-CN-m-200901-201909.png" alt="中国浏览器占比"></p><h3 id="5-2-前端知识体系"><a href="#5-2-前端知识体系" class="headerlink" title="5.2 前端知识体系"></a>5.2 前端知识体系</h3><p><a href="https://www.processon.com/view/5d92f0a9e4b0e26dddaed714?fromnew=1#map" rel="external nofollow noopener noreferrer" target="_blank"><img src="/sliders/assets/images/fe/Web前端知识提起-概要.png" alt="Web前端知识体系"></a></p><h3 id="5-3-从前端走向全端"><a href="#5-3-从前端走向全端" class="headerlink" title="5.3 从前端走向全端"></a>5.3 从前端走向全端</h3><ol><li>node</li><li>react native</li><li>小程序</li><li>PWA</li><li>…</li></ol><p><img src="/sliders/assets/images/fe/前端发展史二维码.png" alt="前端发展史二维码"></p><p><br>本文地址 <a href="http://94275.cn/2019/11/20/fe-2008-2017/">http://94275.cn/2019/11/20/fe-2008-2017/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 学习指南]]></title>
      <url>http://94275.cn/2019/02/07/Spring-MVC/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>近日读《Spring MVC 学习指南》，对 Spring MVC 有了更深一些的了解。</p><a id="more"></a><p>主要包含以下几个方面：Spring MVC 框架、模式2和 MVC 模式、Spring MVC 介绍、基于注解的控制器、数据绑定和表单标签库、转换器和格式化、验证器、表达式语言、JSTL、国际化、上传文件、下载文件。</p><p><img src="http://assets.processon.com/chart_image/5c541629e4b048f108e44c23.png" alt="Spring MVC 学习指南"></p><p>希望本图对你有所帮助。源图连接地址：<a href="https://www.processon.com/view/5c541629e4b048f108e44c20" rel="external nofollow noopener noreferrer" target="_blank">https://www.processon.com/view/5c541629e4b048f108e44c20</a></p><p><br>本文地址 <a href="http://94275.cn/2019/02/07/Spring-MVC/">http://94275.cn/2019/02/07/Spring-MVC/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Effective JavaScript 提高代码质量的68个有效方法]]></title>
      <url>http://94275.cn/2019/02/01/Effective-JavaScript/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>近日，读《Effective JavaScript-编写高质量 JavaScript 代码的68个有效方法》，感觉很实用很不错，特整理出书中的68个方法的思维导图。</p><a id="more"></a><p>脑图如下：</p><p><img src="http://assets.processon.com/chart_image/5c5428ebe4b025fe7c91873a.png" alt="68个提高代码质量的方法"></p><p>原版在 <a href="https://www.processon.com/i/5467870be4b054d6db9d9ad8" rel="external nofollow noopener noreferrer" target="_blank">ProcessOn</a> 上创作，需要原版思维脑图请访问：<a href="https://www.processon.com/view/link/5c5464fbe4b0fa03cead9989" rel="external nofollow noopener noreferrer" target="_blank">https://www.processon.com/view/link/5c5464fbe4b0fa03cead9989</a></p><p>ProcessOn 注册地址：<a href="https://www.processon.com/i/5467870be4b054d6db9d9ad8" rel="external nofollow noopener noreferrer" target="_blank">https://www.processon.com/i/5467870be4b054d6db9d9ad8</a></p><p><br>本文地址 <a href="http://94275.cn/2019/02/01/Effective-JavaScript/">http://94275.cn/2019/02/01/Effective-JavaScript/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序之分享到朋友圈]]></title>
      <url>http://94275.cn/2018/11/19/wxminiapp-canvas/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>微信小程序目前仅支持分享给好友，暂不支持直接分享到朋友圈。针对分享到朋友圈这个问题，通常的做法是生成一张海报图片然后把图片分享到朋友圈。朋友圈到我们的小程序，通过长按图片识别图中小程序码实现。<img src="https://img.shields.io/badge/wx-canvas-green.svg" alt="WX Canvas"></p><a id="more"></a><h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h3><p>本代码库是微信小程序的一个每日分享案例。每天会中英文美句，推荐给大家，可以点击保存图片到本地，然后分享到朋友圈（小程序暂不支持直接分享到朋友圈）。主要用到的技术点就是 canvas 画图。</p><p><img src="https://github.com/jingle1267/HelloCodeDev/raw/master/doc/gh_4d67d640e67d_430.jpg" alt="洪谷山小程序码"></p><p>欢迎微信扫码体验，有任何问题可以提意见反馈。谢谢！</p><p>效果图如下：<br><img src="https://github.com/jingle1267/HelloCodeDev/raw/master/doc/preview20181117.jpeg" alt="小程序预览图"></p><p>如果对小程序不太了解的话，可以先看我的小程序入门介绍：<a href="http://ihongqiqu.com/2018/01/10/weixin-app/" rel="external nofollow noopener noreferrer" target="_blank">http://ihongqiqu.com/2018/01/10/weixin-app/</a></p><h3 id="2-遇到的问题"><a href="#2-遇到的问题" class="headerlink" title="2. 遇到的问题"></a>2. 遇到的问题</h3><p>本小程序开发中，逻辑并不复杂。相对难处理一点就是中英文换行的问题。针对中英文换行的问题，我实现了一下换行逻辑，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文本转换为数组，数组里面分别是每行的文本内容，支持英文分行</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ctx Context</span></span><br><span class="line"><span class="comment"> * txt 待换行的文本</span></span><br><span class="line"><span class="comment"> * width 需要显示文本的最大宽度</span></span><br><span class="line"><span class="comment"> * isEng 是否是英文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">txt2arr: <span class="function"><span class="keyword">function</span> (<span class="params">ctx, txt, width, isEng</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> chr = txt.split(isEng ? <span class="string">" "</span> : <span class="string">""</span>);</span><br><span class="line">  <span class="keyword">var</span> temp = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> row = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; chr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> cur = chr[i];</span><br><span class="line">    <span class="keyword">var</span> tempWidth = ctx.measureText(temp).width;</span><br><span class="line">    <span class="keyword">var</span> curWidth = ctx.measureText(cur).width;</span><br><span class="line">    <span class="comment">// 需要考虑英文换行问题</span></span><br><span class="line">    <span class="keyword">if</span> (tempWidth + curWidth &lt; width) &#123;</span><br><span class="line">      temp += cur;</span><br><span class="line">      temp += (isEng ? <span class="string">" "</span> : <span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      row.push(temp);</span><br><span class="line">      temp = <span class="string">""</span>;</span><br><span class="line">      temp += cur;</span><br><span class="line">      temp += (isEng ? <span class="string">" "</span> : <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  row.push(temp);</span><br><span class="line">  <span class="keyword">return</span> row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法是把字符串处理为字符串数组，数组每个值代表一行，这里是换行核心逻辑，但不是全部逻辑，全部逻辑见核心代码调用。</p><h3 id="3-核心代码"><a href="#3-核心代码" class="headerlink" title="3. 核心代码"></a>3. 核心代码</h3><p>核心的 canvas 画图逻辑代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">drawShare: <span class="function"><span class="keyword">function</span> (<span class="params">imgPath, sRes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = wx.createContext()</span><br><span class="line">  <span class="keyword">var</span> screenWidth = wx.getSystemInfoSync().windowWidth</span><br><span class="line">  <span class="keyword">var</span> screenHeight = wx.getSystemInfoSync().screenHeight</span><br><span class="line">  <span class="comment">// 小程序码宽度</span></span><br><span class="line">  <span class="keyword">var</span> qrWidth = <span class="number">80</span></span><br><span class="line">  <span class="comment">// 小程序码边距</span></span><br><span class="line">  <span class="keyword">var</span> qrMargin = screenHeight * <span class="number">0.02</span></span><br><span class="line">  <span class="comment">// 小程序码路径</span></span><br><span class="line">  <span class="keyword">var</span> qrPath = <span class="string">'../../img/ic_wx_mini.jpg'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画背景图</span></span><br><span class="line">  <span class="comment">// ctx.drawImage(this.data.background, 0, 0, screenWidth, screenHeight - 30)</span></span><br><span class="line">  <span class="comment">// ctx.save()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画白色背景</span></span><br><span class="line">  ctx.setFillStyle(<span class="string">"#FFFFFF"</span>)</span><br><span class="line">  ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, screenWidth, screenHeight)</span><br><span class="line">  ctx.save()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画右上角几何图形</span></span><br><span class="line">  ctx.setLineWidth(<span class="number">1</span>)</span><br><span class="line">  ctx.setStrokeStyle(<span class="string">"#079dd8"</span>)</span><br><span class="line">  ctx.setFillStyle(<span class="string">"#079dd8"</span>)</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.moveTo(screenWidth * <span class="number">100</span> / <span class="number">640</span>, <span class="number">0</span>)</span><br><span class="line">  ctx.lineTo(screenWidth - screenWidth * <span class="number">100</span> / <span class="number">640</span>, screenHeight * <span class="number">140</span> / <span class="number">1000</span>)</span><br><span class="line">  ctx.lineTo(screenWidth, screenHeight * <span class="number">110</span> / <span class="number">1000</span>)</span><br><span class="line">  ctx.lineTo(screenWidth, <span class="number">0</span>)</span><br><span class="line">  ctx.fill()</span><br><span class="line">  ctx.stroke()</span><br><span class="line">  ctx.closePath()</span><br><span class="line">  ctx.save()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画日期</span></span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  ctx.setFontSize(<span class="number">40</span>)</span><br><span class="line">  ctx.setFillStyle(<span class="string">"#FF8700"</span>)</span><br><span class="line">  ctx.fillText(<span class="string">''</span> + date.getDate(), <span class="number">15</span>, <span class="number">65</span>)</span><br><span class="line">  ctx.setFontSize(<span class="number">20</span>)</span><br><span class="line">  ctx.fillText(<span class="string">''</span> + (date.getMonth() + <span class="number">1</span>) + <span class="string">'.'</span> + date.getFullYear(), <span class="number">70</span>, <span class="number">65</span>)</span><br><span class="line">  ctx.save()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画每日一句-英文</span></span><br><span class="line">  ctx.setFontSize(<span class="number">22</span>)</span><br><span class="line">  ctx.setFillStyle(<span class="string">"#BBBBBB"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"shareRes : "</span> + sRes);</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="keyword">this</span>.txt2arr(ctx, sRes.content, screenWidth * <span class="number">0.9</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="comment">// console.log(arr)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    ctx.fillText(<span class="string">''</span> + arr[i], <span class="number">15</span>, screenHeight * <span class="number">145</span> / <span class="number">1000</span> + (i + <span class="number">1</span>) * <span class="number">24</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.save()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画每日一句-中文</span></span><br><span class="line">  ctx.setFontSize(<span class="number">14</span>)</span><br><span class="line">  ctx.setFillStyle(<span class="string">"#7D7D7D"</span>)</span><br><span class="line">  <span class="comment">// ctx.fillText(sRes.note, 15, screenHeight * 375 / 1000)</span></span><br><span class="line">  <span class="keyword">var</span> arrZH = <span class="keyword">this</span>.txt2arr(ctx, sRes.note, screenWidth * <span class="number">0.9</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// console.log(arrCH)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; arrZH.length; k++) &#123;</span><br><span class="line">    ctx.fillText(<span class="string">''</span> + arrZH[k], <span class="number">15</span>, screenHeight * <span class="number">345</span> / <span class="number">1000</span> + (k + <span class="number">1</span>) * <span class="number">16</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.save()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画配图</span></span><br><span class="line">  <span class="keyword">var</span> picY = screenHeight * <span class="number">0.4</span></span><br><span class="line">  <span class="keyword">var</span> picHeight = screenWidth * <span class="number">580</span> / <span class="number">938</span></span><br><span class="line">  ctx.drawImage(<span class="keyword">this</span>.data.background, <span class="number">0</span>, picY, screenWidth, picHeight)</span><br><span class="line">  ctx.save()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画渐变</span></span><br><span class="line">  <span class="keyword">var</span> grd = ctx.createLinearGradient(screenWidth / <span class="number">2</span>, picY - <span class="number">2</span>, screenWidth / <span class="number">2</span>, picY * <span class="number">1.3</span>);</span><br><span class="line">  grd.addColorStop(<span class="number">0</span>, <span class="string">'rgba(255, 255, 255, 1)'</span>)</span><br><span class="line">  grd.addColorStop(<span class="number">1</span>, <span class="string">'rgba(255, 255, 255, 0)'</span>)</span><br><span class="line">  ctx.setFillStyle(grd)</span><br><span class="line">  ctx.fillRect(<span class="number">0</span>, picY - <span class="number">2</span>, screenWidth, picHeight / <span class="number">3</span>)</span><br><span class="line">  ctx.save()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画底部梯形</span></span><br><span class="line">  <span class="keyword">var</span> blueHeight = picY + picHeight;</span><br><span class="line">  ctx.setLineWidth(<span class="number">5</span>)</span><br><span class="line">  ctx.setStrokeStyle(<span class="string">"#079dd8"</span>)</span><br><span class="line">  ctx.setFillStyle(<span class="string">"#079dd8"</span>)</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.moveTo(<span class="number">0</span>, blueHeight - screenWidth * <span class="number">70</span> / <span class="number">640</span>)</span><br><span class="line">  ctx.lineTo(screenWidth, blueHeight)</span><br><span class="line">  ctx.lineTo(screenWidth, screenHeight)</span><br><span class="line">  ctx.lineTo(<span class="number">0</span>, screenHeight)</span><br><span class="line">  ctx.lineTo(<span class="number">0</span>, blueHeight - screenWidth * <span class="number">70</span> / <span class="number">640</span>)</span><br><span class="line">  ctx.fill()</span><br><span class="line">  ctx.stroke()</span><br><span class="line">  ctx.closePath()</span><br><span class="line">  ctx.save()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画小编的话</span></span><br><span class="line">  ctx.setFontSize(<span class="number">12</span>)</span><br><span class="line">  ctx.setFillStyle(<span class="string">"#FFFFFF"</span>)</span><br><span class="line">  <span class="keyword">var</span> arr2 = <span class="keyword">this</span>.txt2arr(ctx, sRes.translation, screenWidth * <span class="number">0.6</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr)</span><br><span class="line">  <span class="keyword">var</span> startHeight = blueHeight * <span class="number">1.04</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr2.length; j++) &#123;</span><br><span class="line">    ctx.fillText(<span class="string">''</span> + arr2[j], <span class="number">15</span>, startHeight + j * <span class="number">18</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.save()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画小程序码</span></span><br><span class="line">  ctx.setLineWidth(<span class="number">1</span>)</span><br><span class="line">  ctx.beginPath()</span><br><span class="line">  ctx.arc(screenWidth - qrWidth / <span class="number">2</span> - qrMargin, screenHeight - qrWidth / <span class="number">2</span> - qrMargin, qrWidth / <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI)</span><br><span class="line">  ctx.setStrokeStyle(<span class="string">"#ffff00"</span>)</span><br><span class="line">  ctx.stroke()</span><br><span class="line">  ctx.clip()</span><br><span class="line">  ctx.drawImage(qrPath, screenWidth - qrWidth - qrMargin, screenHeight - qrWidth - qrMargin, qrWidth, qrWidth)</span><br><span class="line">  ctx.save()</span><br><span class="line"></span><br><span class="line">  wx.drawCanvas(&#123;</span><br><span class="line">    canvasId: <span class="string">'canvas'</span>,</span><br><span class="line">    actions: ctx.getActions()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有任何问题欢迎留言反馈。</p><p><br>本文地址 <a href="http://94275.cn/2018/11/19/wxminiapp-canvas/">http://94275.cn/2018/11/19/wxminiapp-canvas/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack4 入门]]></title>
      <url>http://94275.cn/2018/11/13/webpack4-intro/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h3><blockquote><p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(static module bundler)。</p></blockquote><p>Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。</p><a id="more"></a><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>Webpack4 将命令行相关抽离到 webpack-cli 中，所以要使用 webpack 也要安装 webpack-cli。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli webpack-dev-server -g</span><br></pre></td></tr></table></figure><h3 id="3-核心概念"><a href="#3-核心概念" class="headerlink" title="3. 核心概念"></a>3. 核心概念</h3><p>webpack 最核心的概念主要有以下四个：</p><ol><li>entry （入口）</li><li>output（输出）</li><li>loader（加载器）</li><li>plugins（插件）</li></ol><h4 id="3-1-entry（入口）"><a href="#3-1-entry（入口）" class="headerlink" title="3.1 entry（入口）"></a>3.1 entry（入口）</h4><p>entry 指定 weipack 应该使用哪个模块来作为构建内部依赖的开始。多页面应用也在这里配置。</p><p>webpack.config.js 的 entry 配置示例如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var path = require('path');</span><br><span class="line">const HtmlWebpackPlugin = require("html-webpack-plugin");</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: './src/js/index.js',</span><br><span class="line">        hello: './src/js/hello.js'</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-2-output-输出"><a href="#3-2-output-输出" class="headerlink" title="3.2 output (输出)"></a>3.2 output (输出)</h4><p>output 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置。</p><p>webpack.config.js 的 output 配置示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: &apos;./src/js/index.js&apos;,</span><br><span class="line">        hello: &apos;./src/js/hello.js&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, &apos;./dist&apos;),</span><br><span class="line">        filename: &apos;js/[name]-[chunkhash].js&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-3-loader（加载器）"><a href="#3-3-loader（加载器）" class="headerlink" title="3.3 loader（加载器）"></a>3.3 loader（加载器）</h4><p>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！</p><p>常用的 loader 有 style、css、url、html等。安装插件命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev css-loader style-loader</span><br></pre></td></tr></table></figure><p>webpack.config.js 的 loader 配置示例如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.js?$/,</span><br><span class="line">                exclude: /node_modules/,</span><br><span class="line">                loader: 'babel-loader',</span><br><span class="line">                query: &#123;</span><br><span class="line">                    presets: ['es2015']</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                loader: ['style-loader', 'css-loader']</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.html$/,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: "html-loader",</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            attrs: ["img:src"]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.(png|jpg|jpeg|gif)$/,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: "url-loader",</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            name: "[name]-[hash:5].min.[ext]",</span><br><span class="line">                            limit: 10000, // size &lt;= 20KB</span><br><span class="line">                            publicPath: "static/",</span><br><span class="line">                            outputPath: "static/"</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-4-plugins（插件）"><a href="#3-4-plugins（插件）" class="headerlink" title="3.4 plugins（插件）"></a>3.4 plugins（插件）</h4><p>插件是 webpack 的支柱功能。webpack 自身也是构建于，你在 webpack 配置中用到的相同的插件系统之上！插件目的在于解决 loader 无法实现的其他事。</p><p>webpack.config.js 的 plugins 的配置示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            // filename: &quot;index.html&quot;,</span><br><span class="line">            template: &quot;./src/index.html&quot;,</span><br><span class="line">            inject: &quot;head&quot;,</span><br><span class="line">            // chunks: [&quot;src&quot;], // entry中的app入口才会被打包</span><br><span class="line">            minify: &#123;</span><br><span class="line">                // 压缩选项</span><br><span class="line">                collapseWhitespace: true</span><br><span class="line">            &#125;,</span><br><span class="line">            title: &apos;webpack test title&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>webpack 主要解决了组件封装，规范测试打包上线流程，把很多需要手动处理和配置的工作工具化，给我们提供极大便利。wepack 并不复杂，熟悉核心的概念就能打造出符合我们要求的脚本。</p><h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h3><p>webpack 官方文档地址：<a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/</a></p><p>webpack 中文文档地址：<a href="https://webpack.css88.com/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.css88.com/</a></p><h3 id="6-代码"><a href="#6-代码" class="headerlink" title="6. 代码"></a>6. 代码</h3><p>示例代码地址：<a href="https://github.com/jingle1267/webpack-hello.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/webpack-hello.git</a></p><p><br>本文地址 <a href="http://94275.cn/2018/11/13/webpack4-intro/">http://94275.cn/2018/11/13/webpack4-intro/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> webpack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序从入门到放弃]]></title>
      <url>http://94275.cn/2018/09/20/wxmini-in-out/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><h3 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h3><ol><li>小程序组件</li><li>小程序接口</li><li>小程序 vs H5</li><li>小程序新特性</li><li>放弃</li></ol><a id="more"></a><h3 id="1-小程序组件"><a href="#1-小程序组件" class="headerlink" title="1. 小程序组件"></a>1. 小程序组件</h3><h4 id="1-1-小程序组件脑图"><a href="#1-1-小程序组件脑图" class="headerlink" title="1.1 小程序组件脑图"></a>1.1 小程序组件脑图</h4><p><img src="http://on-img.com/chart_image/5b4eaf41e4b0f8477d87810f.png?_=1537179276919" alt="小程序组件"></p><h4 id="1-2-小程序组件二维码"><a href="#1-2-小程序组件二维码" class="headerlink" title="1.2 小程序组件二维码"></a>1.2 小程序组件二维码</h4><p><img src="/sliders/assets/images/weixin/xcxzj.png" alt="小程序组件二维码"></p><h3 id="2-小程序接口"><a href="#2-小程序接口" class="headerlink" title="2. 小程序接口"></a>2. 小程序接口</h3><h4 id="2-1-小程序接口脑图"><a href="#2-1-小程序接口脑图" class="headerlink" title="2.1 小程序接口脑图"></a>2.1 小程序接口脑图</h4><p><img src="http://on-img.com/chart_image/5b4ead6de4b040415ae02def.png?_=1537180108030" alt="小程序接口"></p><h4 id="2-2-小程序接口二维码"><a href="#2-2-小程序接口二维码" class="headerlink" title="2.2 小程序接口二维码"></a>2.2 小程序接口二维码</h4><p><img src="/sliders/assets/images/weixin/xcxjk.png" alt="小程序接口二维码"></p><h4 id="2-3-登录态打通"><a href="#2-3-登录态打通" class="headerlink" title="2.3 登录态打通"></a>2.3 登录态打通</h4><p><img src="/sliders/assets/images/weixin/wx_mini2h5.jpeg" alt="小程序接口二维码"></p><h3 id="3-小程序-vs-H5"><a href="#3-小程序-vs-H5" class="headerlink" title="3. 小程序 vs H5"></a>3. 小程序 vs H5</h3><h4 id="3-1-标签对比"><a href="#3-1-标签对比" class="headerlink" title="3.1 标签对比"></a>3.1 标签对比</h4><p><img src="/sliders/assets/images/weixin/wx_h5_sign.png" alt="小程序vsH5"></p><h4 id="3-2-选图上传"><a href="#3-2-选图上传" class="headerlink" title="3.2 选图上传"></a>3.2 选图上传</h4><p><img src="/sliders/assets/images/weixin/wx_h5_upload.png" alt="小程序vsH5"></p><h4 id="3-3-开发框架对比"><a href="#3-3-开发框架对比" class="headerlink" title="3.3 开发框架对比"></a>3.3 开发框架对比</h4><p><img src="/sliders/assets/images/weixin/wx_compare.png" alt="小程序vsH5"></p><h3 id="4-小程序新特性"><a href="#4-小程序新特性" class="headerlink" title="4. 小程序新特性"></a>4. 小程序新特性</h3><ol><li>支持自定义标题栏</li><li>分包加载</li><li>云开发</li></ol><h3 id="5-放弃"><a href="#5-放弃" class="headerlink" title="5. 放弃"></a>5. 放弃</h3><h4 id="5-1-遇到过的问题"><a href="#5-1-遇到过的问题" class="headerlink" title="5.1 遇到过的问题"></a>5.1 遇到过的问题</h4><p><img src="/sliders/assets/images/weixin/wx_question.png" alt="wx_question"></p><h4 id="5-2-微信的限制"><a href="#5-2-微信的限制" class="headerlink" title="5.2 微信的限制"></a>5.2 微信的限制</h4><ol><li>服务器域名和业务域名限制</li><li>页面层级最大10</li><li>服务通知 formId payId</li><li>只可微信支付</li><li>打开APP</li><li>…</li></ol><h4 id="5-3-大坑预警web-view"><a href="#5-3-大坑预警web-view" class="headerlink" title="5.3 大坑预警web-view"></a>5.3 大坑预警web-view</h4><h5 id="5-3-1-优点"><a href="#5-3-1-优点" class="headerlink" title="5.3.1 优点"></a>5.3.1 优点</h5><p>不需重复开发，H5拿来就能用</p><h5 id="5-3-2"><a href="#5-3-2" class="headerlink" title="5.3.2"></a>5.3.2</h5><ol><li>用户体验没有原生好</li><li>限制较多，业务域名校验和数量限制</li><li>原生和小程序交互能力薄弱</li><li>web-view层级高会覆盖其他组件</li></ol><h4 id="5-4-限制加强项目"><a href="#5-4-限制加强项目" class="headerlink" title="5.4 限制加强项目"></a>5.4 限制加强项目</h4><ol><li>限制分享</li><li>getUserInfo</li><li>打开设置</li></ol><h3 id="手机上看"><a href="#手机上看" class="headerlink" title="手机上看"></a>手机上看</h3><p><img src="/sliders/assets/images/weixin/qr_ppt.png" alt="小程序组件二维码"></p><h3 id="iOS手机专享-慎扫"><a href="#iOS手机专享-慎扫" class="headerlink" title="iOS手机专享-慎扫"></a>iOS手机专享-慎扫</h3><p><img src="/sliders/assets/images/weixin/ios_shutdown.png" alt="小程序组件二维码"></p><p>PPT链接地址：<a href="/sliders/wxmini-in-out/index.html#/">/sliders/wxmini-in-out/index.html#/</a></p><p><br>本文地址 <a href="http://94275.cn/2018/09/20/wxmini-in-out/">http://94275.cn/2018/09/20/wxmini-in-out/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序API]]></title>
      <url>http://94275.cn/2018/08/27/weixin-mini-app-api/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>话不说，直接看图：</p><a id="more"></a><p><img src="http://on-img.com/chart_image/5b4ead6de4b040415ae02def.png" alt="http://on-img.com/chart_image/5b4ead6de4b040415ae02def.png"></p><p>图片来自<a href="https://www.processon.com/i/5467870be4b054d6db9d9ad8" rel="external nofollow noopener noreferrer" target="_blank">ProcessOn</a>，脑图链接：<a href="https://www.processon.com/view/5b4eaf41e4b0f8477d878109" rel="external nofollow noopener noreferrer" target="_blank">https://www.processon.com/view/5b4eaf41e4b0f8477d878109</a></p><p><br>本文地址 <a href="http://94275.cn/2018/08/27/weixin-mini-app-api/">http://94275.cn/2018/08/27/weixin-mini-app-api/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序组件介绍]]></title>
      <url>http://94275.cn/2018/08/21/wexin-mini-component/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>话不多说，直接上脑图</p><a id="more"></a><p><img src="http://on-img.com/chart_image/5b4eaf41e4b0f8477d87810f.png?_=1534834440699" alt="微信小程序组件介绍脑图"></p><p>图片来自<a href="https://www.processon.com/i/5467870be4b054d6db9d9ad8" rel="external nofollow noopener noreferrer" target="_blank">ProcessOn</a>，脑图链接：<a href="https://www.processon.com/view/5b4eaf41e4b0f8477d878109" rel="external nofollow noopener noreferrer" target="_blank">https://www.processon.com/view/5b4eaf41e4b0f8477d878109</a></p><p><br>本文地址 <a href="http://94275.cn/2018/08/21/wexin-mini-component/">http://94275.cn/2018/08/21/wexin-mini-component/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序组件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git工作流]]></title>
      <url>http://94275.cn/2018/04/17/git-flow/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><a id="more"></a><p><img src="http://on-img.com/chart_image/5ad46af0e4b0518eacb413fd.png" alt="Git Flow"></p><p><a href="https://www.processon.com/diagraming/5ad46af0e4b0518eacb413f8" rel="external nofollow noopener noreferrer" target="_blank">https://www.processon.com/diagraming/5ad46af0e4b0518eacb413f8</a></p><p><br>本文地址 <a href="http://94275.cn/2018/04/17/git-flow/">http://94275.cn/2018/04/17/git-flow/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git Flow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[三国主要人物关系]]></title>
      <url>http://94275.cn/2018/04/13/caocao/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><a id="more"></a><p><img src="http://on-img.com/chart_image/5a97cbcbe4b09a29d512e3dd.png" alt="三国主要人物关系"></p><p><a href="http://on-img.com/chart_image/5a97cbcbe4b09a29d512e3dd.png" rel="external nofollow noopener noreferrer" target="_blank">http://on-img.com/chart_image/5a97cbcbe4b09a29d512e3dd.png</a></p><p><br>本文地址 <a href="http://94275.cn/2018/04/13/caocao/">http://94275.cn/2018/04/13/caocao/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 历史人物 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序之页面模板]]></title>
      <url>http://94275.cn/2018/04/09/wxminiapp-template/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>微信小程序提供了页面模板支持，很大程度解决了<em>页面布局复用</em>的问题。</p><a id="more"></a><p>官方说明</p><blockquote><p>WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。</p></blockquote><p>小程序的模板并不难，下面整理了一些基本流程，方便快速上手小程序页面模板。</p><h3 id="1-定义模板布局"><a href="#1-定义模板布局" class="headerlink" title="1. 定义模板布局"></a>1. 定义模板布局</h3><p>建议新建目录专门放置模板。本文在pages目录下创建了template目录。</p><p>在template目录下创建模板布局文件msg.wxml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">!--</span><br><span class="line">  index: int</span><br><span class="line">  msg: string</span><br><span class="line">  time: string</span><br><span class="line">--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"msgItem"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'msgBg'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> Time: &#123;&#123;time&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中template表现的name是模板的id；</p><h3 id="2-定义模板样式"><a href="#2-定义模板样式" class="headerlink" title="2. 定义模板样式"></a>2. 定义模板样式</h3><p>创建模板样式，建议和模板布局放到相同目录；</p><p>在template目录下的模板样式文件msg.wxss：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.msgBg</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#099</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-引用模板"><a href="#3-引用模板" class="headerlink" title="3. 引用模板"></a>3. 引用模板</h3><p>在需要应用模板的地方添加引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"../template/msg.wxml"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>在需要使用模板的地方添加引用代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"msgItem"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...itemOne&#125;&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>完成的业务引用代码如下（index.wxml）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"../template/msg.wxml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"msgItem"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...itemOne&#125;&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用模板for --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;items&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"msgItem"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...item&#125;&#125;"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>is是模板id，data负责传值；data传值使用ES6展开运算符”…”，那么就不需要在模板里面添加item.XXX了。</p><h3 id="4-引用样式"><a href="#4-引用样式" class="headerlink" title="4. 引用样式"></a>4. 引用样式</h3><p>模板样式也需要添加引用，在引用方的样式代码中添加引用代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**引入模板的样式**/</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"../template/msg.wxss"</span>;</span><br></pre></td></tr></table></figure><p>完成的样式引用代码如下（index.wxss）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**引入模板的样式**/</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"../template/msg.wxss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-赋值初始化"><a href="#5-赋值初始化" class="headerlink" title="5. 赋值初始化"></a>5. 赋值初始化</h3><p>通过以上四个步骤，模板布局和样式都有了，剩下的就是如何复制和展示数据了。 代码如下（index.js）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//获取应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    motto: <span class="string">'Hello World'</span>,</span><br><span class="line">    itemOne: &#123;</span><br><span class="line">      index: <span class="number">999</span>,</span><br><span class="line">      msg: <span class="string">'this is a template'</span>,</span><br><span class="line">      time: <span class="string">'2018-01-08'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    items: [&#123;</span><br><span class="line">      index: <span class="number">0</span>,</span><br><span class="line">      msg: <span class="string">'template1'</span>,</span><br><span class="line">      time: <span class="string">'2016-09-15'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      index: <span class="number">1</span>,</span><br><span class="line">      msg: <span class="string">'emplate2'</span>,</span><br><span class="line">      time: <span class="string">'2016-09-16'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      index: <span class="number">2</span>,</span><br><span class="line">      msg: <span class="string">'emplate3'</span>,</span><br><span class="line">      time: <span class="string">'2016-09-17'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      index: <span class="number">3</span>,</span><br><span class="line">      msg: <span class="string">'emplate4'</span>,</span><br><span class="line">      time: <span class="string">'2016-09-18'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>官方介绍地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/template.html" rel="external nofollow noopener noreferrer" target="_blank">https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/template.html</a></p><p><br>本文地址 <a href="http://94275.cn/2018/04/09/wxminiapp-template/">http://94275.cn/2018/04/09/wxminiapp-template/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序之坑]]></title>
      <url>http://94275.cn/2018/04/04/wx-mini-app-bug/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>微信小程序因其“小”和“轻”，以及微信爸爸的用户量，受到了大家的青睐。下面总结了，我在开发微信小程序的过程中，踩过的坑。希望能够帮助更多的人。</p><a id="more"></a><h3 id="1-服务器域名"><a href="#1-服务器域名" class="headerlink" title="1. 服务器域名"></a>1. 服务器域名</h3><p>微信小程序中<strong>所有</strong>网络通信域名，首先都需要在工信部备案，其次都需要在小程序后台添加合法域名。域名主要有四类：request域名、socket域名、upload域名、download域名；其次，在修改次数上也有限制。下面详细说。</p><h3 id="2-业务域名"><a href="#2-业务域名" class="headerlink" title="2. 业务域名"></a>2. 业务域名</h3><p>这个问题主要针对使用web-view组件的情况。web-view 组件是一个可以用来承载网页的容器，会自动铺满整个小程序页面。<strong>个人类型与海外类型的小程序暂不支持使用。</strong></p><p>web-view中需要加载的所有域名都需要在微信小程序后台配置。</p><p>正确的打开方式是：</p><ol><li>在微信开发者后台-设置-开发设置中添加/修改业务域名，<strong>下载校验文件</strong>。</li><li>在需要访问的业务域名根目录添加第一步下载的校验文件。</li><li>在第一步打开的窗口添加业务域名（必须有第2步，否则添加不成功）。</li></ol><p>如果我们需要在web-view中显示的是一些单页面，这没有什么问题。但是，如果使用了复合页面，涉及到很多页面跳转，那就麻烦了。所有涉及跳转的域名都需要业务域名校验，对是<em>所有的业务域名</em>。如果跳转到三方域名，或者很多外链，添加业务域名校验文件就是很大的难题。</p><p>这可能也是微信故意这样设计，微信不推荐使用web-view做很重的业务，这个符合微信小程序的小而轻原则。</p><h3 id="3-次数限制"><a href="#3-次数限制" class="headerlink" title="3. 次数限制"></a>3. 次数限制</h3><table><thead><tr><th>功能</th><th>功能介绍</th><th>次数</th></tr></thead><tbody><tr><td>小程序头像</td><td>小程序的logo</td><td>5次/月</td></tr><tr><td>介绍</td><td>小程序的介绍信息</td><td>5次/月</td></tr><tr><td>服务类目</td><td>小程序的分类(类目)</td><td>3次/月</td></tr><tr><td>服务器域名</td><td>小程序访问的接口域名</td><td>5次/月</td></tr><tr><td>业务域名</td><td>H5页面的域名</td><td>50次/年</td></tr></tbody></table><h3 id="4-数量限制"><a href="#4-数量限制" class="headerlink" title="4. 数量限制"></a>4. 数量限制</h3><table><thead><tr><th>限制</th><th>介绍</th><th>数量</th></tr></thead><tbody><tr><td>服务器域名</td><td>主要包括：request、socket、upload、download</td><td>20个 * 4</td></tr><tr><td>小程序业务域名</td><td>小程序可以配置的H5页面的域名</td><td>20个</td></tr><tr><td>单业务域名</td><td>每个域名最多可以添加小程序校验文件的数量</td><td>20个</td></tr></tbody></table><p><br>本文地址 <a href="http://94275.cn/2018/04/04/wx-mini-app-bug/">http://94275.cn/2018/04/04/wx-mini-app-bug/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序介绍]]></title>
      <url>http://94275.cn/2018/01/10/weixin-app/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>微信小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验。</p><a id="more"></a><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a>申请账号</h4><p>访问 <a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/wxopen/waregister?action=step1</a> 根据提示完成注册账号。注册完成后，登陆 <a href="https://mp.weixin.qq.com" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com</a> ，在设置-开发设置中可以找到小程序 AppID。</p><h4 id="安装开发工具"><a href="#安装开发工具" class="headerlink" title="安装开发工具"></a>安装开发工具</h4><p>微信小程序开发工具下载地址：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201818" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201818</a><br>开发工具详细介绍见：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=201818" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=201818</a></p><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>打开微信开发者工具，登录后点击右下角”+”按钮，进入如下界面：</p><p><img src="/imgs/post/wx_app_init.png" alt="Project Init"></p><p>选择项目目录，填写刚刚申请的 AppID 和x项目名称。并选中”建立普通快速启动模板”。点击创建，Hello World就创建出来了。</p><h3 id="项目结构介绍"><a href="#项目结构介绍" class="headerlink" title="项目结构介绍"></a>项目结构介绍</h3><p>项目目录结构如图：</p><p><img src="/imgs/post/wx_app_pj_info.png" alt="Project Info"></p><h4 id="APP-JSON"><a href="#APP-JSON" class="headerlink" title="APP.JSON"></a>APP.JSON</h4><p>app.json 是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。</p><p>例子：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "pages":[</span><br><span class="line">    "pages/index/index",</span><br><span class="line">    "pages/logs/logs"</span><br><span class="line">  ],</span><br><span class="line">  "window":&#123;</span><br><span class="line">    "backgroundTextStyle":"light",</span><br><span class="line">    "navigationBarBackgroundColor": "#fff",</span><br><span class="line">    "navigationBarTitleText": "WeChat",</span><br><span class="line">    "navigationBarTextStyle":"black"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>pages 和 window 介绍：</p><ol><li>pages字段：用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。</li><li>window字段：小程序所有页面的顶部背景颜色，文字颜色定义在这里的。</li></ol><h4 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h4><p>类似网页编程的HTML，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"userinfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;!hasUserInfo &amp;&amp; canIUse&#125;&#125;"</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> <span class="attr">bindgetuserinfo</span>=<span class="string">"getUserInfo"</span>&gt;</span> 获取头像昵称 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">bindtap</span>=<span class="string">"bindViewTap"</span> <span class="attr">class</span>=<span class="string">"userinfo-avatar"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;userInfo.avatarUrl&#125;&#125;"</span> <span class="attr">background-size</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"userinfo-nickname"</span>&gt;</span>&#123;&#123;userInfo.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"usermotto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"user-motto"</span>&gt;</span>&#123;&#123;motto&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上面代码可以看出，代码风格很像HTML，同时也有自己的语法如wx:if和wx:else。更多语法请参考 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/</a> 。</p><h4 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h4><p>WXSS 具有 CSS 大部分的特性，小程序在 WXSS 也做了一些扩充和修改。示例代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**index.wxss**/</span></span><br><span class="line"><span class="selector-class">.userinfo</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.userinfo-avatar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">128</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">128</span>rpx;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.userinfo-nickname</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.usermotto</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多详细请参考 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxss.html" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxss.html</a></p><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><p>和用户交互需要使用 JavaScript 来实现。我们常见的网络请求，事件处理等都有 JavaScript 来处理。关于 JavaScript 这里不做介绍了。</p><h3 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h3><h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><p>如果开发中需要预览和测试，微信需要添加相应的权限。添加预览入口：小程序管理后台 - 用户身份 – 成员管理。</p><p>添加不会推送告知被添加者。添加成功之后，使用被添加者的微信，扫描微信开发工具生成的预览二维码就可以看到开发的微信小程序了。</p><h4 id="提交审核"><a href="#提交审核" class="headerlink" title="提交审核"></a>提交审核</h4><p>开发完成，通过点击微信开发者工具右上角的上传，可以上传到小程序管理后台。在开发管理中可以找到提交的版本。这个时候的版本还是预览版本，通过扫描二维码，可以让添加权限的微信用户体验。</p><p>如果测试确认没问题可以上线，点击管理后台-开发管理中的提交审核。提交审核，第一个版本审核时间可能会有几天，之后审核时间会缩短大概一天左右。</p><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>审核通过之后，管理员会收到微信推送。这个时候，我们的小程序还没有上线，我们可以再后天点击发布按钮来控制什么时间发布。</p><h3 id="Samples"><a href="#Samples" class="headerlink" title="Samples"></a>Samples</h3><table><thead><tr><th>官方例子</th><th>我的例子</th></tr></thead><tbody><tr><td><img src="/imgs/post/weixin_app_demo.jpg" alt="Weixin Demo"></td><td><img src="/imgs/post/wx_app_jingle1267.jpg" alt="Weixin Demo"></td></tr><tr><td>源码地址：<a href="https://github.com/jingle1267/demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/demo</a></td><td>源码地址：<a href="https://github.com/jingle1267/HelloCodeDev" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/HelloCodeDev</a></td></tr></tbody></table><p><br>本文地址 <a href="http://94275.cn/2018/01/10/weixin-app/">http://94275.cn/2018/01/10/weixin-app/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[司马懿人物关系]]></title>
      <url>http://94275.cn/2018/01/09/SiMaYi/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><a id="more"></a><p><img src="http://on-img.com/chart_image/5a547978e4b01acda594932b.png" alt="司马懿人物关系"></p><p><a href="http://on-img.com/chart_image/5a547978e4b01acda594932b.png" rel="external nofollow noopener noreferrer" target="_blank">http://on-img.com/chart_image/5a547978e4b01acda594932b.png</a></p><p><br>本文地址 <a href="http://94275.cn/2018/01/09/SiMaYi/">http://94275.cn/2018/01/09/SiMaYi/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 历史人物 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[你可能不知道的毛主席]]></title>
      <url>http://94275.cn/2017/12/26/Mr.-Mao/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><a id="more"></a><p>&emsp;&emsp;这几年，国内一些对历史毫无了解的年轻人动辄喜欢拿毛主席说事，可看看仇视红色中国的美国人是怎么评价毛泽东的：</p><p>&emsp; &emsp;是谁能把一个贫瘠的国家，在短短几年的时间里，迅速崛起于世界强国的行列？事实上我记得美国以前有一位总统乔治·华盛顿。他以贫弱的美国北方军，经过多年苦战打败了先进的南方殖民军。使得美国获得了统一与和平。但是，在东方的一个大国，中国，同样出现了一位优秀的领导者：毛泽东先生。正是他领导着他的人民，在贫困，饥饿，压力下却取得了远远超越乔治·华盛顿的伟大成就…1949年，中国在毛先生领导下建立了红色政权，同时也揭开了中国人觉醒的时代。</p><p>&emsp;&emsp;1950年我们可爱的总统大人，他觉得北韩十分不听话，同时他更加厌恶新生的红色中国，为了灭绝赤祸，他决心先打掉北韩，从而占领亚洲大陆一端，再谋求最终消灭赤色中国。随即他调兵遣将， 以联合国安理会的名义，18国集团为核心，总计出兵51万3千 人。坦克2400辆。战机4000架。各型火炮5万门同时动用了原美国海军第1，2， 3，7四只舰队，排山倒海的杀向北韩。在他看来，这样现代化的庞大战斗集群，任何一个国家，哪怕是当时的苏联也不敢与之交手。然而，他似乎忘记了，那位毛先生伟大的军事战略胆量。毛在前苏联犹豫迟疑下，悍然单方面出兵抗击美国联军。于是一场惊人的战争就此爆发了。</p><p>&emsp;&emsp;100万中国士兵，在没有远程炮火支援，没有空中火力掩护，没有地面装甲集群突击的情况下，依靠着最原始的卡宾枪（冲锋枪），手雷。打败了强大的美国联军。这也是人类历史上，首次开创了一个国家单独击败了世界力量的先例。但是，中国人也遭受了525000人的惨烈伤亡。但是对于一个几年前还被日本军队肆意侵略蹂躏的国家，在短短几年后，突然间打败了世界上当时最强军事同盟“北大西洋公约组织”的奇迹除了毛先生敢于创造， 任何人都不可能做到。 美国就这样丢下了113000名阵亡士兵，带着84000名伤员，以及换回来的45000名被俘人员迈着沉重的脚步，蹒跚的回到了自己的老家。</p><p>&emsp;&emsp;前苏联的伟大人物赫鲁晓夫先生，上台后，他觉得中共的毛太不懂得什么叫尊重苏联，竟敢违背他的指令。因此，他发动了一 场更加荒谬的战役——中苏珍宝岛战役。苏军以远东集团军的1个坦克旅，3个摩托化步兵团，总计约20000人在没有事先警告的情况下对中国采取了军事行动。而中国当时最强的主战坦克T59 型也就是前苏联的T54A。战斗全重只有36吨。如果与前苏联最新的T62型坦克对比， 可以说对方无需开火，使用自身就可以将T59 撞翻。 毛先生在接到边防军告警电报后， 他做出了最快决定：打！就把他打疼！结果苏联人丢下了约1个团的装备以及成批尸体气恼的回家去了。 赫鲁晓夫接到失败的电报后，召开了紧急军事会议，先后撤职了隶属于苏联远东集团军1位元帅（坦克装甲诸兵种元帅），3名大将，四名上将，24名中将、少将。抓捕了远东红旗134师（主力师）营级以上全部军事主官。</p><p>&emsp;&emsp;在毛先生对外战争历史中，还有一场值得提起，那就是中印边界之战：麦克马洪线。 印度为了夺取那块不毛之地，与中国军队公然交手。其实在印度背后有输了韩战无处撒气的华盛顿，有丢了珍宝岛满脸怒火的克里姆林宫。有祈求可以捞足好处的大英帝国等等。他们几乎出现了前所未有的合作！ 苏联低价贷款给印度尼赫鲁，装备了7个印度陆军师。华盛顿给了尼赫鲁大批战备物资。英国把自己的那些老式火炮都给了印度。一时间印度成了当时世界两大集团的宠儿。 但是，短短的30天时间，印度军队全军溃败。当时在第2师作战术指挥教导的洛克．弗菲希尔准将说：你见过非洲的斑马群奔跑吗？但是不如印度军队溃逃更加壮观。 8940名印度军人葬身山谷，1370名士兵被俘，1名准将被击毙，亚洲第一旅：“锡克”旅完了。英国全资资助“廓尔柯”营完了。而毛先生在他的官邸中南海，战前就曾说：不管你是印苏联军，还是美印联军，即便是再来一次八国联军我们中国也要与你们打！打出一个真理来。 毛先生的英明是前所未有的。中国拿回来了土地，消灭了印度联军，打败了美国与苏联的再一次的恐吓，这就是毛先生。</p><p>&emsp;&emsp;毛先生一贯坚持自力更生，也是由于他的如此英明，中国建立了自己的核武器工业。制造远程洲际导弹。可是今天的中国人，是不是还都记得我们这位罕见的民族伟人呢？ ……看过之后让人肃然起敬！让我们一起动手，把这篇文章传播出去了，让我们的后代，永远记得这位伟人！ 喜欢的就转一下，至少我很愿意再看一遍。</p><p>&emsp;&emsp;12月26日毛先生的生日，中国人的圣诞节！</p><p><br>本文地址 <a href="http://94275.cn/2017/12/26/Mr.-Mao/">http://94275.cn/2017/12/26/Mr.-Mao/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Architecture Components之LiveData]]></title>
      <url>http://94275.cn/2017/12/14/Android-LiveData/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>LiveData 是一个数据持有者类，它持有一个值并允许观察该值。不同于普通的可观察者，LiveData 遵守应用程序组件的生命周期，以便 Observer 可以指定一个其应该遵守的 Lifecycle。</p><a id="more"></a><p>LiveData实现了对数据的监听，利用这点，我们可以更好的实现获取数据和数据展示解耦。本文着重讲解数据更新和更新UI逻辑分离，LiveData的LifeCycle特性暂不做介绍。</p><p>下文用一个简单的例子来介绍如何实现数据更新和UI展示解耦，实现逻辑分离。</p><p>UI展示逻辑代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> MutableLiveData&lt;String&gt; username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tvUsername;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_live_data);</span><br><span class="line"></span><br><span class="line">        tvUsername = findViewById(R.id.tv_username);</span><br><span class="line"></span><br><span class="line">        username = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        username.observe(<span class="keyword">this</span>, <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(@Nullable String s)</span> </span>&#123;</span><br><span class="line">                tvUsername.setText(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面代码对应的布局文件代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.ihognqiqu.aac.livedata.LiveDataActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_username"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Default User Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"20dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_change_username"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"onClickMainThread"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Change User Name main thread"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_change_username_background"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"onClickThread"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Change User Name background"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"一个数据持有类，持有数据并且这个数据可以被观察被监听，和其他Observer不同的是，它和Lifecycle是绑定的。"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"17dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上面代码可以发现，除了基本的初始化操作、设置监听，只剩下UI赋值逻辑。</p><p>主线程更新数据代码（点击id为tv_change_username的按钮执行下面的方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 主线程中更新数据</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickMainThread</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">     username.setValue(<span class="string">"New User Name by main thread"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>子线程更新数据代码如下（点击id为tv_change_username_background的按钮执行下面这个方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 子线程中更新数据</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickThread</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                 e.printStackTrace();</span><br><span class="line">             &#125;</span><br><span class="line">             username.postValue(<span class="string">"New User Name by background thread"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).start();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从上面同步和异步两个方法，可以发现这里只有对数据的更新逻辑，没有任何UI更新的逻辑。</p><p>例子很简单，通过使用LiveData，我们实现了业务逻辑和UI更新逻辑分离。通过使用LiveData可以使我们的架构设计更加合理，职责分工更加明确。从小的方面来看，实现了解耦代码分离，从大的方面说，这会改变应用架构设计。</p><p>参考地址：<a href="https://developer.android.com/topic/libraries/architecture/livedata.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/topic/libraries/architecture/livedata.html</a><br>源码地址：<a href="https://github.com/jingle1267/AndroidArchitectureComponets" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/AndroidArchitectureComponets</a></p><p><br>本文地址 <a href="http://94275.cn/2017/12/14/Android-LiveData/">http://94275.cn/2017/12/14/Android-LiveData/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android Architecture Components </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LiveData </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Architecture Components之LifeCycle]]></title>
      <url>http://94275.cn/2017/12/09/lifecycle/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>LifeCycle 架构设计一大利器，旨在减少Activity和Fragment中代码，简化Activity和Fragment职责，实现功能代码分离，达到解耦的目的。</p><a id="more"></a><p>官方解释：</p><p><em>Lifecycle-aware components perform actions in response to a change in the lifecycle status of another component, such as activities and fragments. These components help you produce better-organized, and often lighter-weight code, that is easier to maintain.</em></p><p>译文：Lifecycle-aware 组件感知Activity和Fragment的周明周期，并能响应个生命周期状态。这个组件有助于产生更有序、更轻和更易维护的代码。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>LifeCycle作用主要是针对开发中遇到的一些痛点，它的优点也是基于现有的痛点，主要以下有点：</p><ol><li>减轻acitivity和fragment的负担，实现调用方代码更加更加简洁</li><li>为封装组件提供更好的支持，达到组件独立，实现更好的内聚和更低的耦合</li><li>复用变得更加简单</li><li>实现组合优于继承的设计思想</li></ol><h3 id="没有LifeCycle的时候"><a href="#没有LifeCycle的时候" class="headerlink" title="没有LifeCycle的时候"></a>没有LifeCycle的时候</h3><p>没有LifeCycle组件的时候，我们实现一个定位功能通常会如下实现：</p><p>主程序代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定位功能一般实现方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocationListener mLocationListener;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_location);</span><br><span class="line">        mLocationListener = <span class="keyword">new</span> LocationListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        <span class="keyword">if</span> (mLocationListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mLocationListener.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        <span class="keyword">if</span> (mLocationListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mLocationListener.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位逻辑实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"LifeCycleListener"</span>, <span class="string">"start"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"LifeCycleListener"</span>, <span class="string">"stop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码，可以发现，实现一个定位，我们需要在activity和fragment处理打开定位和关闭定位。这只是一个定位，在现实开发中，我们会有统计等很多类似的功能，这样我们的activity和fragment代码会变得臃肿，且代码不易复用。</p><h3 id="使用LifeCycle后"><a href="#使用LifeCycle后" class="headerlink" title="使用LifeCycle后"></a>使用LifeCycle后</h3><p>在我们使用LifeCycle之后，主程序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycleActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_life_cycle);</span><br><span class="line"></span><br><span class="line">        getLifecycle().addObserver(<span class="keyword">new</span> LocationListener());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跟生命周期相关的监听器</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 12/5/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationListener</span> <span class="keyword">implements</span> <span class="title">LifecycleObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_START)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"LifeCycleListener"</span>, <span class="string">"start"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_STOP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"LifeCycleListener"</span>, <span class="string">"stop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_ANY)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onAny</span><span class="params">(LifecycleOwner owner, Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"LifeCycleListener"</span>, <span class="string">"onAny:"</span> + event.name());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显而易见，现在调用程序只需一行代码，简化了调用方的代码，调用方不需要关心生命周期的处理逻辑，这部分逻辑转移到具体的业务实现方，实现高内聚和低耦合。</p><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p>官方地址：<a href="https://developer.android.com/topic/libraries/architecture/lifecycle.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/topic/libraries/architecture/lifecycle.html</a><br>源码地址：<a href="https://github.com/jingle1267/AndroidArchitectureComponets" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/AndroidArchitectureComponets</a></p><p><br>本文地址 <a href="http://94275.cn/2017/12/09/lifecycle/">http://94275.cn/2017/12/09/lifecycle/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android Architecture Components </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LifeCycle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我在做一个APP中用到的开源库]]></title>
      <url>http://94275.cn/2017/11/29/Common-Android-Open-Source-Project/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>最近开发了一个APP，虽然是一个小APP，但是麻雀虽小五脏俱全。以下简单介绍一下用到的开源组件。</p><a id="more"></a><h3 id="功能类"><a href="#功能类" class="headerlink" title="功能类"></a>功能类</h3><ol><li><a href="https://github.com/JakeWharton/butterknife" rel="external nofollow noopener noreferrer" target="_blank">ButterKnife</a></li><li><a href="https://github.com/rzwitserloot/lombok" rel="external nofollow noopener noreferrer" target="_blank">Lombok</a></li><li><a href="https://github.com/jingle1267/android-utils" rel="external nofollow noopener noreferrer" target="_blank">android-utils</a></li><li><a href="https://github.com/realm/realm-java" rel="external nofollow noopener noreferrer" target="_blank">realm-java</a></li><li><a href="https://github.com/jingle1267/AndroidRequest" rel="external nofollow noopener noreferrer" target="_blank">AndroidRequest</a></li><li><a href="https://github.com/ReactiveX/RxAndroid" rel="external nofollow noopener noreferrer" target="_blank">RxAndroid</a></li></ol><h4 id="ButterKnife"><a href="#ButterKnife" class="headerlink" title="ButterKnife"></a>ButterKnife</h4><p>自从用上Butter Knife，再也不用findViewById这种代码了。Android界JakeWharton大神出品，必属精品，强烈推荐使用。<br>Github地址：<a href="https://github.com/JakeWharton/butterknife" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/JakeWharton/butterknife</a><br>使用文档：<a href="http://jakewharton.github.io/butterknife/" rel="external nofollow noopener noreferrer" target="_blank">http://jakewharton.github.io/butterknife/</a></p><h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><p>自从使用了Lombok，实体类告别了大段大段的set/get方法。简简单单的一行注解，告别成百上千行的实体类。<br>Github地址：<a href="https://github.com/rzwitserloot/lombok" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/rzwitserloot/lombok</a><br>视频演示地址：<a href="https://projectlombok.org/" rel="external nofollow noopener noreferrer" target="_blank">https://projectlombok.org/</a><br>接入文档：<a href="https://projectlombok.org/setup/android" rel="external nofollow noopener noreferrer" target="_blank">https://projectlombok.org/setup/android</a></p><h4 id="android-utils"><a href="#android-utils" class="headerlink" title="android-utils"></a>android-utils</h4><p>开发过程中，工具类必不可少。自从用了android-utils，大大方便了开发，节省了自己开发时间。<br>Github地址：<a href="https://github.com/jingle1267/android-utils" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/android-utils</a></p><h4 id="realm-java"><a href="#realm-java" class="headerlink" title="realm-java"></a>realm-java</h4><p>Realm为移动设备而生！替代 SQLite 和 Core Data。为你省下数周的时间和数千行的代码，帮你创造出更棒的用户体验。</p><p>Github地址：<a href="https://github.com/realm/realm-java" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/realm/realm-java</a><br>使用文档：<a href="https://realm.io/cn/docs/java/latest/" rel="external nofollow noopener noreferrer" target="_blank">https://realm.io/cn/docs/java/latest/</a></p><h4 id="AndroidRequest"><a href="#AndroidRequest" class="headerlink" title="AndroidRequest"></a>AndroidRequest</h4><p>基于retrofit和okhttp封装的网络库，用户不需要了解网络底层实现，通过简单的设置就能实现网络请求。</p><p>Github地址：<a href="https://github.com/jingle1267/AndroidRequest" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/AndroidRequest</a></p><h4 id="RxAndroid"><a href="#RxAndroid" class="headerlink" title="RxAndroid"></a>RxAndroid</h4><p>RxAndroid是RxJava的扩展, 可以优雅地处理异步请求。很好很强大！</p><p>GitHub 地址：<a href="https://github.com/ReactiveX/RxAndroid" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ReactiveX/RxAndroid</a></p><h3 id="UI交互类"><a href="#UI交互类" class="headerlink" title="UI交互类"></a>UI交互类</h3><ol><li><a href="https://github.com/lcodecorex/TwinklingRefreshLayout" rel="external nofollow noopener noreferrer" target="_blank">TwinklingRefreshLayout</a></li><li><a href="https://github.com/bumptech/glide" rel="external nofollow noopener noreferrer" target="_blank">Glide</a></li><li><a href="https://github.com/ikew0ng/SwipeBackLayout" rel="external nofollow noopener noreferrer" target="_blank">SwipeBackLayout</a></li><li><a href="https://github.com/zhihu/Matisse" rel="external nofollow noopener noreferrer" target="_blank">Matisse</a></li><li><a href="https://github.com/hdodenhof/CircleImageView" rel="external nofollow noopener noreferrer" target="_blank">CircleImageView</a></li><li><a href="https://github.com/H07000223/FlycoTabLayout" rel="external nofollow noopener noreferrer" target="_blank">FlycoTabLayout</a></li><li><a href="https://github.com/7heaven/SHSegmentControl" rel="external nofollow noopener noreferrer" target="_blank">SHSegmentControl</a></li><li><a href="https://github.com/google/flexbox-layout" rel="external nofollow noopener noreferrer" target="_blank">flexbox-layout</a></li><li><a href="https://github.com/yanzhenjie/Album" rel="external nofollow noopener noreferrer" target="_blank">Album</a></li><li><a href="https://github.com/MagicMashRoom/SuperCalendar" rel="external nofollow noopener noreferrer" target="_blank">SuperCalendar</a></li><li><a href="https://github.com/fython/MaterialStepperView" rel="external nofollow noopener noreferrer" target="_blank">MaterialStepperView</a></li></ol><h4 id="TwinklingRefreshLayout"><a href="#TwinklingRefreshLayout" class="headerlink" title="TwinklingRefreshLayout"></a>TwinklingRefreshLayout</h4><p>支持下拉刷新和上拉加载的RefreshLayout,自带越界回弹效果，支持RecyclerView,AbsListView,ScrollView,WebView。</p><p>Github地址：<a href="https://github.com/lcodecorex/TwinklingRefreshLayout" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/lcodecorex/TwinklingRefreshLayout</a></p><h4 id="Glide"><a href="#Glide" class="headerlink" title="Glide"></a>Glide</h4><p>Google推荐的图片加载库，专注于流畅的滚动。</p><p>Github地址：<a href="https://github.com/bumptech/glide" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/bumptech/glide</a></p><h4 id="SwipeBackLayout"><a href="#SwipeBackLayout" class="headerlink" title="SwipeBackLayout"></a>SwipeBackLayout</h4><p>类似微信的右滑关闭页面，本开源库支持右滑、左滑、上滑手势</p><p>Github地址：<a href="https://github.com/ikew0ng/SwipeBackLayout" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ikew0ng/SwipeBackLayout</a></p><h4 id="Matisse"><a href="#Matisse" class="headerlink" title="Matisse"></a>Matisse</h4><p>一个设计良好的本地图片／视频文件选择库，支持不同的图片加载方式。知乎出品，也是精品。</p><p>Github地址：<a href="https://github.com/zhihu/Matisse" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/zhihu/Matisse</a></p><h4 id="CircleImageView"><a href="#CircleImageView" class="headerlink" title="CircleImageView"></a>CircleImageView</h4><p>圆形图片，边框等，简单易用。</p><p>Github地址：<a href="https://github.com/hdodenhof/CircleImageView" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/hdodenhof/CircleImageView</a></p><h4 id="FlycoTabLayout"><a href="#FlycoTabLayout" class="headerlink" title="FlycoTabLayout"></a>FlycoTabLayout</h4><p>Tab切换通用样式。</p><p>Github地址：<a href="https://github.com/H07000223/FlycoTabLayout" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/H07000223/FlycoTabLayout</a></p><h4 id="SHSegmentControl"><a href="#SHSegmentControl" class="headerlink" title="SHSegmentControl"></a>SHSegmentControl</h4><p>仿iOS的Tag切换效果。</p><p>Github地址：<a href="https://github.com/7heaven/SHSegmentControl" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/7heaven/SHSegmentControl</a></p><h4 id="flexbox-layout"><a href="#flexbox-layout" class="headerlink" title="flexbox-layout"></a>flexbox-layout</h4><p>谷歌官方流式布局，功能强大。</p><p>Github地址：<a href="https://github.com/google/flexbox-layout" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/google/flexbox-layout</a></p><h4 id="Album"><a href="#Album" class="headerlink" title="Album"></a>Album</h4><p>Album是一个MD风格的开源相册，支持国际化，支持国际化扩展；主要功能模块：选择图片与视频、拍照、录视频、画廊。</p><p>Github地址：<a href="https://github.com/yanzhenjie/Album" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/yanzhenjie/Album</a></p><h4 id="SuperCalendar"><a href="#SuperCalendar" class="headerlink" title="SuperCalendar"></a>SuperCalendar</h4><p>日历选择控件，代码简洁。自定义日历控件 支持左右无限滑动 周月切换 标记日期显示 自定义显示效果跳转到指定日期。</p><p>Github地址：<a href="https://github.com/MagicMashRoom/SuperCalendar" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/MagicMashRoom/SuperCalendar</a></p><h4 id="MaterialStepperView"><a href="#MaterialStepperView" class="headerlink" title="MaterialStepperView"></a>MaterialStepperView</h4><p>带动画效果的步骤控件。</p><p>Github地址：<a href="https://github.com/fython/MaterialStepperView" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/fython/MaterialStepperView</a></p><p><br>本文地址 <a href="http://94275.cn/2017/11/29/Common-Android-Open-Source-Project/">http://94275.cn/2017/11/29/Common-Android-Open-Source-Project/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 开源库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开源库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxJava Hello World]]></title>
      <url>http://94275.cn/2017/10/16/RxJava-Hello-World/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><h4 id="RxJava是什么？"><a href="#RxJava是什么？" class="headerlink" title="RxJava是什么？"></a>RxJava是什么？</h4><blockquote><p>RxJava is a Java VM implementation of Reactive Extensions: a library for composing asynchronous and event-based programs by using observable sequences.</p></blockquote><p>翻译:一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。RxJava官方地址：<a href="https://github.com/ReactiveX/RxJava" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ReactiveX/RxJava</a></p><a id="more"></a><h4 id="RxJava解决了什么问题？"><a href="#RxJava解决了什么问题？" class="headerlink" title="RxJava解决了什么问题？"></a>RxJava解决了什么问题？</h4><p>RxJava近两年来越来越流行，越来越收到广大开发者青睐，肯定它有哪些魔力。这魔力解决了开发者开发过程中的某些痛点，结合对RxJava的理解，你会发现，其实它解决的是<strong>异步</strong>的问题。</p><p>RxJava是如何解决异步处理的问题的呢？开发中异步的主要场景时，耗时操作需要放到单独线程中，异步任务执行成功之后，在主线程中执行更新UI等其它操作。</p><p>使用RxJava之后，通过简单设置，就可以实现执行线程的切换，开发者只需要关心具体的逻辑，不用太多关心那个线程的问题。</p><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>下面举一个异步下载图片，主线程更新显示出来的例子（例子用Android实现）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">"https://avatars2.githubusercontent.com/u/3887795?v=2&amp;s=60"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.将网络地址转换为Drawable</span></span><br><span class="line">Function&lt;String, Drawable&gt; str2Drawable = <span class="keyword">new</span> Function&lt;String, Drawable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">apply</span><span class="params">(@NonNull String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Drawable drawable = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            drawable = Drawable.createFromStream(<span class="keyword">new</span> URL(s).openStream(), <span class="string">"src"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> drawable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.将drawable先是到imageview上</span></span><br><span class="line">Consumer&lt;Drawable&gt; drawableConsumer = <span class="keyword">new</span> Consumer&lt;Drawable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Drawable drawable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ivWebPic.setImageDrawable(drawable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.控制步骤1和步骤2执行线程</span></span><br><span class="line">Observable.just(url)</span><br><span class="line">        .map(str2Drawable)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(drawableConsumer);</span><br></pre></td></tr></table></figure><p>以上代码，下载图片逻辑和展示逻辑完全分离，实现逻辑分离。这只是一个Hello World例子，RxJava很有很多炫酷的功能期待你去解锁。</p><p><br>本文地址 <a href="http://94275.cn/2017/10/16/RxJava-Hello-World/">http://94275.cn/2017/10/16/RxJava-Hello-World/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> RxJava </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BottomNavigationView]]></title>
      <url>http://94275.cn/2017/06/14/BottomNavigationView/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>要点：本文主要写使用 BottomNavigationView 和遇到的一些问题的解决办法</p><a id="more"></a><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>作为谷歌 <a href="https://developer.android.com/reference/android/support/design/widget/BottomNavigationView.html" rel="external nofollow noopener noreferrer" target="_blank">Material Design Components</a> 新控件 BottomNavigationView， 提供应用底部导航栏的实现。没有这个控件之前，Android 底部导航栏一般通过 LinearLayout 包裹几个 Button 或使用 RadioGroup 和 RadioButton 来实现。使用 BottomNavigationView 这个控件，可以提供更好的用户体验和开发更容易。此文主要介绍在使用 BottomNavigationView 过程中遇到的几个问题。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>这个没有什么好说的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile 'com.android.support:design:25.0.0'</span><br></pre></td></tr></table></figure><h4 id="添加布局"><a href="#添加布局" class="headerlink" title="添加布局"></a>添加布局</h4><p>布局分两个部分，首先是总的布局：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.BottomNavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:itemIconTint</span>=<span class="string">"@color/tab_home"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:itemTextColor</span>=<span class="string">"@color/tab_home"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"?android:attr/windowBackground"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">"@menu/navigation"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>其次，配置导航项。在 res 的 menu 目录下创建上面代码中 app:menu=”@menu/bottom_menu” 要引用到的文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_home"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_home"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/title_home"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_category"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_category"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/title_category"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_activity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/title_activity"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_cart"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_cart"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/title_cart"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_mine"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_mine"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/title_mine"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>主要是点击事件的处理，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">navigation = (BottomNavigationView) findViewById(R.id.navigation);</span><br><span class="line">        navigation.setOnNavigationItemSelectedListener(<span class="keyword">new</span> BottomNavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> R.id.navigation_home:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.navigation_category:</span><br><span class="line">                        setTitle(R.string.title_category);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.navigation_activity:</span><br><span class="line">                        setTitle(R.string.title_activity);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.navigation_cart:</span><br><span class="line">                        setTitle(R.string.title_cart);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.navigation_mine:</span><br><span class="line">                        setTitle(R.string.title_mine);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>通过以上的代码，我们的代码就能运行起来，效果图如下:<img src="/imgs/post/bottomnavigation_example_1.png" alt="bottomnavigation_example_1">：</p><h3 id="没那么简单"><a href="#没那么简单" class="headerlink" title="没那么简单"></a>没那么简单</h3><p>很快你会发现，接入简单，但是真正符合我们的设计要求，我们还需要捣腾捣腾。</p><p>下面列举一下我遇到的问题：</p><ol><li>当导航项大于三个的时候，选中项变大，其它文字被隐藏</li><li><p>当我们自定义默认和选中图之后，选中的效果图变色了</p><p>问题来了，我们怎么解决呢？</p><p>针对第一个问题，在网上查资料后，发现是 mShiftingMode 的问题，默认是开启的且谷歌没有开放修改接口。既然谷歌不给修改接口，那么我们就硬来，用反射来解决。实现代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BottomNavigationViewHelper.disableShiftMode(navigation);</span><br></pre></td></tr></table></figure><p>BottomNavigationViewHelper 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BottomNavigationViewHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">disableShiftMode</span><span class="params">(BottomNavigationView view)</span> </span>&#123;</span><br><span class="line">        BottomNavigationMenuView menuView = (BottomNavigationMenuView) view.getChildAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field shiftingMode = menuView.getClass().getDeclaredField(<span class="string">"mShiftingMode"</span>);</span><br><span class="line">            shiftingMode.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            shiftingMode.setBoolean(menuView, <span class="keyword">false</span>);</span><br><span class="line">            shiftingMode.setAccessible(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; menuView.getChildCount(); i++) &#123;</span><br><span class="line">                BottomNavigationItemView item = (BottomNavigationItemView) menuView.getChildAt(i);</span><br><span class="line">                item.setShiftingMode(<span class="keyword">false</span>);</span><br><span class="line">                item.setChecked(item.getItemData().isChecked());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            Log.e(<span class="string">"BottomNavigationViewHelper"</span>, <span class="string">"Unable to get shift mode field"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            Log.e(<span class="string">"BottomNavigationViewHelper"</span>, <span class="string">"Unable to change value of shift mode"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对第二个问题，各种谷歌百度后，发现是控件默认着色器的问题。知道问题所在，解决起来就简单了。只需一行代码禁 tint 就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigation.setItemIconTintList(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>默认和选中文字的颜色，只需要添加颜色 selector 就可以了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:itemTextColor="@color/tab_home"</span><br></pre></td></tr></table></figure><p>另外，BottomNavigationView 支持的导航项数量是3-5个。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>谷歌 BottomNavigationView 效果是挺好的，使用很方便，特效也很不错，唯一不足就是接口不太友善。总的来说，这个控件使用容易且效果很赞，建议使用。</p><p><br>本文地址 <a href="http://94275.cn/2017/06/14/BottomNavigationView/">http://94275.cn/2017/06/14/BottomNavigationView/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BottomNavigationView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ElasticSearch 排序 nested]]></title>
      <url>http://94275.cn/2017/03/11/elasticsearch-sort-nested/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>此文关于 ElasticSearch 中 nested 类型中某个字段排序的问题。</p><a id="more"></a><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>以官方数据模型为例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/blogpost/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"Investment secrets"</span>,</span><br><span class="line">  <span class="attr">"body"</span>:  <span class="string">"What they don't tell you ..."</span>,</span><br><span class="line">  <span class="attr">"tags"</span>:  [ <span class="string">"shares"</span>, <span class="string">"equities"</span> ],</span><br><span class="line">  <span class="attr">"comments"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>:    <span class="string">"Mary Brown"</span>,</span><br><span class="line">      <span class="attr">"comment"</span>: <span class="string">"Lies, lies, lies"</span>,</span><br><span class="line">      <span class="attr">"age"</span>:     <span class="number">42</span>,</span><br><span class="line">      <span class="attr">"stars"</span>:   <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"date"</span>:    <span class="string">"2014-10-18"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>:    <span class="string">"John Smith"</span>,</span><br><span class="line">      <span class="attr">"comment"</span>: <span class="string">"You're making it up!"</span>,</span><br><span class="line">      <span class="attr">"age"</span>:     <span class="number">28</span>,</span><br><span class="line">      <span class="attr">"stars"</span>:   <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"date"</span>:    <span class="string">"2014-10-16"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上结构能看出，每片文章有很多评论，评论是 nested 类型。业务的场景是：将评论中 starts 为 2的，按照年龄从高到低，对所有的文章进行排序。</p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>废话不多说直接上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SortOrder sortOrder = SortOrder.DESC;</span><br><span class="line"><span class="keyword">int</span> stars = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// String flag = sortOrder.toString().equals("desc") ? "_last" : "_first";</span></span><br><span class="line">SortBuilder sortBuilder = SortBuilders.fieldSort(<span class="string">"comments.age"</span>)</span><br><span class="line">    .setNestedFilter(termQuery(<span class="string">"comments.stars"</span>, stars)).setNestedPath(<span class="string">"comments"</span>).order(sortOrder);<span class="comment">//.missing(flag).unmappedType("long");</span></span><br><span class="line"></span><br><span class="line">requestBuilder.addSort(sortBuilder);</span><br></pre></td></tr></table></figure><p>以上代码中，针对 nested 类型的排序，setNestedPath() 和 setNestedFilter() 两个方法是必须的。其中 setNestedFilter() 的参数 QueryBuilder 的过滤字段，path 是必须要有的（2.1版本亲测），即 “comments.stars”。</p><p>Restful 格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"from"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"size"</span> : <span class="number">20</span>,</span><br><span class="line">  <span class="attr">"sort"</span> : [ &#123;</span><br><span class="line">    <span class="attr">"comments.age"</span> : &#123;</span><br><span class="line">      <span class="attr">"order"</span> : <span class="string">"desc"</span>,</span><br><span class="line">      <span class="attr">"nested_filter"</span> : &#123;</span><br><span class="line">        <span class="attr">"term"</span> : &#123;</span><br><span class="line">          <span class="attr">"comments.stars"</span> : <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"nested_path"</span> : <span class="string">"comments"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>本文参考的链接如下：</p><p>官方网站: <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-sorting.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-sorting.html</a></p><p><br>本文地址 <a href="http://94275.cn/2017/03/11/elasticsearch-sort-nested/">http://94275.cn/2017/03/11/elasticsearch-sort-nested/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> ElasticSearch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MyBatis 快速上手]]></title>
      <url>http://94275.cn/2017/01/22/mybatis/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><h3 id="MyBatis-介绍"><a href="#MyBatis-介绍" class="headerlink" title="MyBatis 介绍"></a>MyBatis 介绍</h3><p>MyBatis 本是 apache 的一个开源项目 iBatis，2010年这个项目由 apache software foundation 迁移到了google code，并且改名为 MyBatis 。MyBatis 是一个基于 Java 的持久层框架。iBATIS 提供的持久层框架包括 SQL Maps 和 Data Access Objects（DAO）。</p><a id="more"></a><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects，普通的 Java对象)映射成数据库中的记录。</p><h3 id="MyBatis-架构"><a href="#MyBatis-架构" class="headerlink" title="MyBatis 架构"></a>MyBatis 架构</h3><p>我们把 MyBatis 的<strong><em>功能架构</em></strong>分为三层：</p><ol><li><strong>API 接口层</strong>：提供给外部使用的接口 API，开发人员通过这些本地 API 来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</li><li><strong>数据处理层</strong>：负责具体的 SQL 查找、SQL 解析、SQL 执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</li><li><p><strong>基础支撑层</strong>：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</p><p>MyBatis 功能架构图:</p><p><img src="/imgs/post/mybatis_arch.jpg" alt="mybatis_arch"></p><p>MyBatis 的框架架构图:</p><p><img src="/imgs/post/mybatis_base_arch.png" alt="mybatis_base_arch"></p><p>MyBatis 应用程序根据 XML 配置文件创建 SqlSessionFactory，SqlSessionFactory 根据配置(配置来源于两个地方：配置文件和代码注解)获取一个SqlSession。SqlSession 包含了执行 SQL 所需要的所有方法，可以通过 SqlSession 实例直接运行映射的 SQL 语句，完成对数据的增删改查和事务提交等，用完之后关闭 SqlSession。</p></li></ol><h3 id="MyBatis-开发步骤"><a href="#MyBatis-开发步骤" class="headerlink" title="MyBatis 开发步骤"></a>MyBatis 开发步骤</h3><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建数据库表并配置数据库连接</p></li><li>创建 Model 和 DAO 接口</li><li>实现 DAO 接口<br><strong>配置文件注意</strong>：<br>A. namespace 必须对应完整包路径下的类<br>B. id 必须与 DAO 接口中的方法名相同</li><li>MyBatis 和 Spring 的整合</li><li>编写 MyBatis 配置文件</li></ol><h3 id="开发优化"><a href="#开发优化" class="headerlink" title="开发优化"></a>开发优化</h3><p>在使用 MyBatis 开发过程中，发现创建 Model 和 DAO 有很多工作比较机械切话费较多开发时间。MyBatis 也发现了这个问题，MBG（MyBatis Generator）因此诞生了。</p><p>MBG 使用步骤：</p><h4 id="1-添加插件和依赖"><a href="#1-添加插件和依赖" class="headerlink" title="1. 添加插件和依赖"></a>1. 添加插件和依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>mybatis_generator<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-添加-MBG-生成代码的配置文件"><a href="#2-添加-MBG-生成代码的配置文件" class="headerlink" title="2. 添加 MBG 生成代码的配置文件"></a>2. 添加 MBG 生成代码的配置文件</h4><p>generatorConfig.xml 文件配置一下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">      &lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span></span></span><br><span class="line"><span class="tag">            <span class="attr">location</span>=<span class="string">"/Users/[who am i]/.m2/repository/mysql/mysql-connector-java/5.1.30/mysql-connector-java-5.1.30.jar"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysqlTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的pojo，将implements Serializable--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 数据库链接URL、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"$&#123;jdbc.url&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"$&#123;jdbc.username&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer</span></span><br><span class="line"><span class="comment">            true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，</span></span><br><span class="line"><span class="comment">        也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.ihongqiqu.entity"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!--对应的mapper.xml文件  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mappers"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 对应的Mapper接口类文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.ihongqiqu.dao"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 列出要生成代码的所有表，这里配置的是不生成Example文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"UserInfo"</span> <span class="attr">domainObjectName</span>=<span class="string">"UserInfoPO"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面配置用到 jdbc.properties，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/jdorg</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=</span><br></pre></td></tr></table></figure><h4 id="3-生成代码"><a href="#3-生成代码" class="headerlink" title="3. 生成代码"></a>3. 生成代码</h4><p>点击 Maven 下的 mybatis-generator:generate ，然后就可以看到生成的 XXXPOMapper.xml、XXXPO.java、XXXPOMapper.java 三个文件了。</p><p>上面三个步骤，核心是第二个配置文件。我们可以在 generatorConfig.xml 配置相关的参数，代码中有注释，这里不在细说。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol><li>MyBatis 官方文档: <a href="http://www.mybatis.org/mybatis-3/zh/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.mybatis.org/mybatis-3/zh/index.html</a></li><li>MyBatis generator 文档：<a href="http://generator.sturgeon.mopaas.com/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://generator.sturgeon.mopaas.com/index.html</a></li></ol><p><br>本文地址 <a href="http://94275.cn/2017/01/22/mybatis/">http://94275.cn/2017/01/22/mybatis/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android一键分享热点]]></title>
      <url>http://94275.cn/2017/01/13/android-wifi-hotspot/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>产品提了一个需求，希望在手机上能够一键共享自己的移动网络。且希望用户能够通过扫描二维码链接上网络。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>经过各种谷歌和文档资料查询，发现 Android 的 API 是不支持对 AP 的操作。但是，这是难不倒我们的工程师的，通过谷歌搜索出来很多通过反射来管理 AP 的方法。这样第一个问题就算解决了。</p><p>然而，想要实现任何应用扫码连接共享的网络，有很多问题。二维码其实就是一个字符串的一种展现形式。想通过二维码链接网络，其实就是想通过一个字符串来改变世界啊！现在用户量较大的扫二维码应用都会有一些自己的协议，要实现我们的功能，我们必须要选择了通用的协议。扫二维码通用的协议，想来想去就只有链接地址了。一般扫码应用都是支持打开链接地址的。接下来的任务就要交给我们的 H5。想要通过 H5 来实现连接 WiFi 这个功能是不现实(不知道利用 H5 的漏洞能不能搞)。其实如果用户没有网络，二维码携带任何信息都没有什么乱用的。</p><p>通过反射技术来实现对热点的开关控制实现并不复杂，接下来简单介绍一下。</p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>一键建立热点主要需要实现如下功能：</p><ol><li>获取当前 AP 的开关状态</li><li>打开和关闭 AP</li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p>检测 AP 的状态，通过反射实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * check whether wifi hotspot on or off</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isApOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Method method = wifiManager.getClass().getDeclaredMethod(<span class="string">"isWifiApEnabled"</span>);</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (Boolean) method.invoke(wifiManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ignored) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开和关闭 AP，反射实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * wifi热点开关</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> enabled true：打开  false：关闭</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true：成功  false：失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setWifiApEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (BuildConfig.DEBUG) Log.d(<span class="string">"WifiAPMgr"</span>, <span class="string">"开启热点"</span>);</span><br><span class="line">    <span class="keyword">if</span> (enabled) &#123;</span><br><span class="line">        <span class="comment">// wifi和热点不能同时打开，所以打开热点的时候需要关闭wifi</span></span><br><span class="line">        wifiManager.setWifiEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) Log.d(<span class="string">"WifiAPMgr"</span>, <span class="string">"关闭wifi"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// wifiManager.setWifiEnabled(true);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 热点的配置类</span></span><br><span class="line">        WifiConfiguration apConfig = <span class="keyword">new</span> WifiConfiguration();</span><br><span class="line">        <span class="comment">// 配置热点的名称(可以在名字后面加点随机数什么的)</span></span><br><span class="line">        apConfig.SSID = apName;</span><br><span class="line">        <span class="comment">// 配置热点的密码</span></span><br><span class="line">        apConfig.preSharedKey = apPwd;</span><br><span class="line">        <span class="comment">// 安全：WPA2_PSK</span></span><br><span class="line">        apConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);</span><br><span class="line">        <span class="comment">// 通过反射调用设置热点</span></span><br><span class="line">        Method method = wifiManager.getClass().getMethod(</span><br><span class="line">                <span class="string">"setWifiApEnabled"</span>, WifiConfiguration.class, Boolean.TYPE);</span><br><span class="line">        <span class="comment">// 返回热点打开状态</span></span><br><span class="line">        <span class="keyword">return</span> (Boolean) method.invoke(wifiManager, apConfig, enabled);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>下载 APK 安装体验，下载地址：<br><a href="https://raw.githubusercontent.com/jingle1267/OneKeyShareWifi/master/app-debug.apk" rel="external nofollow noopener noreferrer" target="_blank">https://raw.githubusercontent.com/jingle1267/OneKeyShareWifi/master/app-debug.apk</a></p><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/jingle1267/OneKeyShareWifi" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/OneKeyShareWifi</a></p><h3 id="参考地址："><a href="#参考地址：" class="headerlink" title="参考地址："></a>参考地址：</h3><ol><li><a href="http://stackoverflow.com/questions/6394599/android-turn-on-off-wifi-hotspot-programmatically" rel="external nofollow noopener noreferrer" target="_blank">http://stackoverflow.com/questions/6394599/android-turn-on-off-wifi-hotspot-programmatically</a></li><li><a href="http://blog.csdn.net/u013049709/article/details/42235829" target="_blank" rel="noopener">http://blog.csdn.net/u013049709/article/details/42235829</a></li></ol><p><br>本文地址 <a href="http://94275.cn/2017/01/13/android-wifi-hotspot/">http://94275.cn/2017/01/13/android-wifi-hotspot/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android WiFi 热点 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World by React]]></title>
      <url>http://94275.cn/2017/01/09/react-hello-world/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>React 是一个用于构建用户界面的 JAVASCRIPT 库。React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>React 特点:</p><ol><li>声明式设计 −React采用声明范式，可以轻松描述应用。</li><li>高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</li><li>灵活 −React可以与已知的库或框架很好地配合。</li><li>JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li><li>组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li><li>单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</li></ol><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><pre><code>npm install -g create-react-app
</code></pre><h3 id="创建Hello-World"><a href="#创建Hello-World" class="headerlink" title="创建Hello World"></a>创建Hello World</h3><pre><code>create-react-app hello-world
</code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre><code>cd hello-world
npm start
</code></pre><h3 id="创建成功"><a href="#创建成功" class="headerlink" title="创建成功"></a>创建成功</h3><p>执行命令的输出结果如下:</p><blockquote><p>Success! Created hello-world at /Users/zhenguo/Documents/develop/react/hello-world<br>Inside that directory, you can run several commands:</p><pre><code>npm start
</code></pre><p>Starts the development server.</p><pre><code>npm run build
</code></pre><p>Bundles the app into static files for production.</p><pre><code>npm test
</code></pre><p>Starts the test runner.</p><pre><code>npm run eject
</code></pre><p>Removes this tool and copies build dependencies, configuration files and scripts into the app directory. If you do this, you can’t go back!</p><p>We suggest that you begin by typing:</p><pre><code>cd hello-world
npm start
</code></pre><p>Happy hacking!</p></blockquote><p>执行效果如下：</p><p><img src="/imgs/post/react-hello-world-preview.png" alt="react-hello-world-preview"></p><p>以上是 React 给我们创建的默认项目。其实时间 Hello World很简单，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/react-0.14.7/build/react.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/react-0.14.7/build/react-dom.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      ReactDOM.render(</span></span><br><span class="line"><span class="javascript">        &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><br><span class="line"><span class="undefined">      );</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接保存本地就可以看到 “Hello world!” 了！</p><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="https://facebook.github.io/react/docs/installation.html" rel="external nofollow noopener noreferrer" target="_blank">https://facebook.github.io/react/docs/installation.html</a></p><p><a href="http://www.runoob.com/react/react-tutorial.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/react/react-tutorial.html</a></p><p><br>本文地址 <a href="http://94275.cn/2017/01/09/react-hello-world/">http://94275.cn/2017/01/09/react-hello-world/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> React </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android WebView组件]]></title>
      <url>http://94275.cn/2017/01/05/android-webview-component/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><h3 id="原生和-H5-介绍"><a href="#原生和-H5-介绍" class="headerlink" title="原生和 H5 介绍"></a>原生和 H5 介绍</h3><p>原生应用的用户体验不错，但是开发成本相对较高。原生应用的灵活性相对页不如 Web 页，切 Web 页相对原生有更强的控制力。原生应用出了 Bug，如果没有热补丁等热修复技术，应用就需要重新发版上线。Web 页面的控制权都在服务器端，故出了问题，在服务器端修复问题，就把线上的 Bug 修复完了。</p><a id="more"></a><p>下图列出了它们的优势和劣势(包括混合型应用)：</p><p><img src="http://ihongqiqu.com/sliders/assets/images/Android-Intro/NativeVSH5.png" alt="Native VS Hybrid VS H5"></p><p>原生和 Web 页各有优势和劣势，混合应用顺势而生。在原生应用中显示 Web 页也成为很流行的一种策略，即保证了主体功能的用户体验，又包含了 Web 页的灵活性和高控制性。</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>现在，我们的应用中很多都需要能够支持显示 H5 页面。对于活动页和变动比较频繁以及尚在尝试阶段的需求，一般都会先用 H5 来实现。我们原生应用显示 H5 页面也称为应用的一个强需求，故做此组件。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Android 中使用 WebView 来显示网页。WebViewClient 帮助 WebView 处理各种通知、请求事件。WebChromeClient 主要辅助 WebView 处理 Javascript 的对话框、网站图标、网站 title、加载进度等。</p><h4 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h4><p>简单使用方法调用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebActivity.launch(<span class="keyword">this</span>, <span class="string">"http://ihongqiqu.com"</span>, <span class="string">"标题"</span>);</span><br></pre></td></tr></table></figure><h4 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h4><p>UrlHandler 负责对 url 进行拦截。<strong>独立的业务可以实现自己的 UrlHandler</strong>。然后只需要在 MyWebViewClient 修改一下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    FirstUrlHandler firstUrlHandler = <span class="keyword">new</span> FirstUrlHandler(view.getContext());</span><br><span class="line">    OriginUrlHandler originUrlHandler = <span class="keyword">new</span> OriginUrlHandler(view.getContext());</span><br><span class="line">    firstUrlHandler.setNextUrlHandler(originUrlHandler);</span><br><span class="line">    <span class="comment">// 此处可以设置自己的 UrlHandler 处理</span></span><br><span class="line">    <span class="keyword">boolean</span> isHandle = firstUrlHandler.handlerUrl(url);</span><br><span class="line">    <span class="keyword">if</span> (isHandle) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        view.loadUrl(url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebView 设置在 WebFragment 中，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWebView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mWebView.getSettings().setDefaultTextEncodingName(<span class="string">"utf-8"</span>);</span><br><span class="line">    mWebView.getSettings().setSupportZoom(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 设置是否支持执行JS，如果设置为true会存在XSS攻击风险</span></span><br><span class="line">    mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// mWebView.addJavascriptInterface(new HTMLheaderJavaScriptInterface(), "local_obj");</span></span><br><span class="line">    mWebView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);</span><br><span class="line">    <span class="comment">// 水平不显示</span></span><br><span class="line">    mWebView.setHorizontalScrollBarEnabled(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 垂直不显示</span></span><br><span class="line">    mWebView.setVerticalScrollBarEnabled(<span class="keyword">false</span>);</span><br><span class="line">    mWebView.setWebViewClient(<span class="keyword">new</span> MyWebViewClient());</span><br><span class="line">    mWebView.setWebChromeClient(<span class="keyword">new</span> MyWebChromeClient(mListener));</span><br><span class="line">    mWebView.getSettings().setUseWideViewPort(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 安全考虑，防止密码泄漏，尤其是root过的手机</span></span><br><span class="line">    mWebView.getSettings().setSavePassword(<span class="keyword">false</span>);</span><br><span class="line">    String ua = mWebView.getSettings().getUserAgentString();</span><br><span class="line">    String appUA = ua + <span class="string">"; MYAPP"</span>;</span><br><span class="line">    mWebView.getSettings().setUserAgentString(appUA);</span><br><span class="line">    mWebView.getSettings().setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);</span><br><span class="line"></span><br><span class="line">    mWebView.getSettings().setDatabaseEnabled(<span class="keyword">true</span>);</span><br><span class="line">    String dir = getActivity().getApplicationContext().getDir(<span class="string">"database"</span>, Context.MODE_PRIVATE).getPath();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启用地理定位</span></span><br><span class="line">    mWebView.getSettings().setGeolocationEnabled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 设置定位的数据库路径</span></span><br><span class="line">    mWebView.getSettings().setGeolocationDatabasePath(dir);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最重要的方法，一定要设置，这就是出不来的主要原因</span></span><br><span class="line">    mWebView.getSettings().setDomStorageEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    mWebView.loadUrl(mUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p><a href="https://github.com/jingle1267/WebActivity" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/WebActivity</a></p><p><br>本文地址 <a href="http://94275.cn/2017/01/05/android-webview-component/">http://94275.cn/2017/01/05/android-webview-component/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AOP JDK动态代理]]></title>
      <url>http://94275.cn/2016/12/26/AOP-JDK/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>上文 <a href="http://ihongqiqu.com/2016/12/24/aop/" rel="external nofollow noopener noreferrer" target="_blank">通过三方库 CGLIB 动态代理实现的 AOP</a>，其实 JDK 动态代理也可以实现 AOP。JDK 动态代理实现面向切面编程，不需要依赖外部的库。</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>JDK 动态代理主要涉及到 java.lang.reflect 包中的两个类：Proxy 和InvocationHandler。InvocationHandler 是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编制在一起。 Proxy 利用 InvocationHandler 动态创建一个符合某一接口的实例，生成目标类的代理对象。</p><h3 id="AOP-应用"><a href="#AOP-应用" class="headerlink" title="AOP 应用"></a>AOP 应用</h3><p>AOP 很强大，现在用的比较广泛的有如下：</p><ol><li>性能监控，在方法调用前后记录调用时间，方法执行太长或超时报警。</li><li>缓存代理，缓存某方法的返回值，下次执行该方法时，直接从缓存里获取。</li><li>软件破解，使用 AOP 修改软件的验证类的判断逻辑。</li><li>记录日志，在方法执行前后记录系统日志。</li><li>工作流系统，工作流系统需要将业务代码和流程引擎代码混合在一起执行，那么我们可以使用 AOP 将其分离，并动态挂接业务。</li><li>权限验证，方法执行前验证是否有权限执行当前方法，没有则抛出没有权限执行异常，由业务代码捕捉。</li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><h4 id="业务接口"><a href="#业务接口" class="headerlink" title="业务接口"></a>业务接口</h4><p>Calculator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h4><p>CalculatorImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现-InvocationHandler"><a href="#实现-InvocationHandler" class="headerlink" title="实现 InvocationHandler"></a>实现 InvocationHandler</h4><p>LogHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"start"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        result = method.invoke(target, args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"end   time cost : "</span> + (end - start));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"JDK 动态代理"</span>);</span><br><span class="line"></span><br><span class="line">        Calculator target = <span class="keyword">new</span> CalculatorImpl();</span><br><span class="line">        LogHandler logHandler = <span class="keyword">new</span> LogHandler(target);</span><br><span class="line"></span><br><span class="line">        Calculator proxy = (Calculator) Proxy.newProxyInstance(target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                logHandler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = proxy.calculate(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">        System.out.println(<span class="string">"result : "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JDK 动态代理</span><br><span class="line">start</span><br><span class="line">end   time cost : 2295</span><br><span class="line">result : 13</span><br></pre></td></tr></table></figure><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p>源码下载：<a href="https://github.com/jingle1267/aop.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/aop.git</a></p><p><br>本文地址 <a href="http://94275.cn/2016/12/26/AOP-JDK/">http://94275.cn/2016/12/26/AOP-JDK/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> AOP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AOP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AOP CGLIB动态代理]]></title>
      <url>http://94275.cn/2016/12/24/aop/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>AOP 为 Aspect Oriented Programming 的缩写，意为面向切面编程。所谓的面向 切面编程其实是对业务逻辑又进行了进一步的抽取，将多种业务逻辑中的公用部分抽取出来做成一种服务，从而实现代码复用。</p><a id="more"></a><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>利用 AOP 可以对业务逻辑的各个部分进行分离，从而使得业务逻辑各部分之间的耦合度降低。</p><p>比较常见的有日志记录，性能统计，安全验证等。</p><p>Java 中实现 AOP 有多种方式，下文介绍基于 cglib 的 AOP 的例子。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p>以下四个类实现了，在不改变原 CalculatorImpl 代码的基础上，实现了对 calculate 执行时间的统计。</p><h4 id="Client-java"><a href="#Client-java" class="headerlink" title="Client.java"></a>Client.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   CalculatorInterceptor calculatorInterceptor = <span class="keyword">new</span> CalculatorInterceptor();</span><br><span class="line">trueCalculatorImpl calculatorImpl = <span class="keyword">new</span> CalculatorImpl();</span><br><span class="line"></span><br><span class="line">trueCalculator calculator = (Calculator) calculatorInterceptor.createProxyObject(calculatorImpl);</span><br><span class="line">true<span class="keyword">int</span> result = calculator.calculate(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">trueSystem.out.println(<span class="string">"result : "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Calculator-java"><a href="#Calculator-java" class="headerlink" title="Calculator.java"></a>Calculator.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CalculatorImpl-java"><a href="#CalculatorImpl-java" class="headerlink" title="CalculatorImpl.java"></a>CalculatorImpl.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CalculatorInterceptor-java"><a href="#CalculatorInterceptor-java" class="headerlink" title="CalculatorInterceptor.java"></a>CalculatorInterceptor.java</h4><p><strong>前方高能代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object targetObject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">createProxyObject</span><span class="params">(Object targetObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetObject = targetObject;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(<span class="keyword">this</span>.targetObject.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"start"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        result = method.invoke(targetObject, objects);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"end   time cost : "</span> + (end - start));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h4><p>执行 Client 的 main 方法，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CGLIB 动态代理</span><br><span class="line">start</span><br><span class="line">end   time cost : 2262</span><br><span class="line">result : 13</span><br></pre></td></tr></table></figure><p>最终实现的效果是：<strong>在不破坏原来代码逻辑的基础上，对原来的逻辑添加了前置和后置操作</strong>。例子中实现的统计代码的执行时间，我们还可以做日志记录，性能统计，安全验证等。</p><h3 id="AOP-与-OOP-的区别"><a href="#AOP-与-OOP-的区别" class="headerlink" title="AOP 与 OOP 的区别"></a>AOP 与 OOP 的区别</h3><p>AOP、OOP 在字面上虽然非常类似，但却是面向不同领域的两种设计思想。</p><ol><li>OOP（面向对象编程）针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。</li><li>AOP 则是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。这两种设计思想在目标上有着本质的差异。</li></ol><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p>源码下载：<a href="https://github.com/jingle1267/aop.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/aop.git</a></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>实现 AOP 方法的其它方式介绍：<a href="http://ihongqiqu.com/2016/12/26/AOP-JDK/" rel="external nofollow noopener noreferrer" target="_blank"><a href="http://ihongqiqu.com/2016/12/26/AOP-JDK/" rel="external nofollow noopener noreferrer" target="_blank">AOP JDK动态代理</a></a></p><p><br>本文地址 <a href="http://94275.cn/2016/12/24/aop/">http://94275.cn/2016/12/24/aop/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> AOP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AOP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Things [译]]]></title>
      <url>http://94275.cn/2016/12/20/Android-Things/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>Android Things 出现让我们对嵌入式开发更加的容易，它提供了和 Android 一样的开发工具、基于优秀的 Android Framework 的架构和 Google APIs。</p><p><img src="/imgs/post/platform-architecture.png" alt="platform-architecture"></p><a id="more"></a><p>嵌入式应用提供了可类似于手机和平板的设备和驱动。此外，嵌入式设备通常呈现一个单一的应用程序体验到用户。本文主要讨论 Android 开发和 Android Things 开发的差异，主要包括增加、删除和区别。</p><p>Android Things 通过增加 Things Support Library 来拓展了 Android Framework 框架。这些新的 APIs 是移动设备上没有的，可以和新的硬件设备结合起来。</p><p>Android Things 平台为流线型单应用而生。Android Things 不存在系统应用，你的应用会在设备开机的时候启动，这个设计号称为体验而生。</p><h3 id="Things-Support-Library"><a href="#Things-Support-Library" class="headerlink" title="Things Support Library"></a>Things Support Library</h3><hr><h4 id="外设-I-O-API"><a href="#外设-I-O-API" class="headerlink" title="外设 I/O API"></a>外设 I/O API</h4><p>外围 I/O API 让你的应用程序使用工业标准协议和接口与传感器和执行器进行通信。支持的协议有：GPIO、PWM、I2C、SPI、UART。</p><p>如果获取更多如何使用 APIs 可以通过查看 <a href="https://developer.android.com/things/sdk/pio/index.html" rel="external nofollow noopener noreferrer" target="_blank">外设 I/O API 指南</a>。</p><h4 id="用户驱动-API"><a href="#用户驱动-API" class="headerlink" title="用户驱动 API"></a>用户驱动 API</h4><p>用户驱动程序扩展现有的 Android 框架服务，并允许应用程序将硬件事件注入框架，其他应用程序可以访问使用标准的 Android APIs。</p><p>有关如何使用 API 的详细信息，请参见<a href="https://developer.android.com/things/sdk/drivers/index.html" rel="external nofollow noopener noreferrer" target="_blank">用户驱动程序指南</a>。</p><h3 id="操作调整"><a href="#操作调整" class="headerlink" title="操作调整"></a>操作调整</h3><hr><h4 id="核心应用包"><a href="#核心应用包" class="headerlink" title="核心应用包"></a>核心应用包</h4><p>Android Things 不包括标准的系统应用程序和 Content Provider。避免使用<a href="https://developer.android.com/guide/components/intents-common.html" rel="external nofollow noopener noreferrer" target="_blank">通用的 Intent </a>以及以下 Content Provider API：</p><p><a href="https://developer.android.com/reference/android/provider/CalendarContract.html" rel="external nofollow noopener noreferrer" target="_blank">CalendarContract</a><br><a href="https://developer.android.com/reference/android/provider/ContactsContract.html" rel="external nofollow noopener noreferrer" target="_blank">ContactsContract</a><br><a href="https://developer.android.com/reference/android/provider/DocumentsContract.html" rel="external nofollow noopener noreferrer" target="_blank">DocumentsContract</a><br><a href="https://developer.android.com/reference/android/app/DownloadManager.html" rel="external nofollow noopener noreferrer" target="_blank">DownloadManager</a><br><a href="https://developer.android.com/reference/android/provider/MediaStore.html" rel="external nofollow noopener noreferrer" target="_blank">MediaStore</a><br><a href="https://developer.android.com/reference/android/provider/Settings.html" rel="external nofollow noopener noreferrer" target="_blank">Settings</a><br><a href="https://developer.android.com/reference/android/provider/Telephony.html" rel="external nofollow noopener noreferrer" target="_blank">Telephony</a><br><a href="https://developer.android.com/reference/android/provider/UserDictionary.html" rel="external nofollow noopener noreferrer" target="_blank">UserDictionary</a><br><a href="https://developer.android.com/reference/android/provider/VoicemailContract.html" rel="external nofollow noopener noreferrer" target="_blank">VoicemailContract</a></p><h4 id="显示非必需"><a href="#显示非必需" class="headerlink" title="显示非必需"></a>显示非必需</h4><p>Android Things 支持图形化界面，使用和 Android 相同的的 UI 工具包。在图形模式下，应用占用全部的屏幕。Android Things 没有状态栏和导航按钮，这为应用提供了完全可控的用户体验。</p><p>不过，Android Things 一般不需要显示屏。在不存在显示屏的设备上，Activity 任然是 Android Things 的主要组件。这是因为框架将所有输入事件传递给具有焦点的前台活动。你的应用程序无法通过其他应用程序组件（例如服务）接受关键事件或活动事件。</p><h4 id="Home-Activity-支持"><a href="#Home-Activity-支持" class="headerlink" title="Home Activity 支持"></a>Home Activity 支持</h4><p>Android Things 希望应用让 Manifest 中的 Home Activity 作为系统自动启动的主要入口点。这个 Activity 添加一个同时包含 <a href="https://developer.android.com/reference/android/content/Intent.html#CATEGORY_DEFAULT" rel="external nofollow noopener noreferrer" target="_blank">CATEGORY_DEFAULT</a> 和 IOT_LAUNCHER 的 intent filter。</p><p>为了方便开发，这样的活动应该包括 <a href="https://developer.android.com/reference/android/content/Intent.html#CATEGORY_LAUNCHER" rel="external nofollow noopener noreferrer" target="_blank">CATEGORY_LAUNCHER</a> 意图过滤器，这样 Android Studio 可以启动默认的 Activity 便于部署和测试。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".HomeActivity"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Launch activity as default from Android Studio --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Launch activity automatically on boot --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.IOT_LAUNCHER"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Google-Services-支持"><a href="#Google-Services-支持" class="headerlink" title="Google Services 支持"></a>Google Services 支持</h4><p>Android Things 支持 <a href="https://developers.google.com/android/" rel="external nofollow noopener noreferrer" target="_blank">Google APIs for Android</a> 的一个子集。一般来说，要求用户输入或认证凭证的 API 不适用 Android Things 应用。下面表中列举了在 Android Things 中废弃掉的 API：</p><table><thead><tr><th>Supported APIs</th><th>Unavailable APIs</th></tr></thead><tbody><tr><td><a href="https://developers.google.com/cast/" rel="external nofollow noopener noreferrer" target="_blank">Cast</a></td><td><a href="https://firebase.google.com/docs/admob/" rel="external nofollow noopener noreferrer" target="_blank">AdMob</a></td></tr><tr><td><a href="https://developers.google.com/drive/" rel="external nofollow noopener noreferrer" target="_blank">Drive</a></td><td><a href="https://developers.google.com/android-pay/" rel="external nofollow noopener noreferrer" target="_blank">Android Pay</a></td></tr><tr><td><a href="https://firebase.google.com/docs/analytics/" rel="external nofollow noopener noreferrer" target="_blank">Firebase Analytics</a></td><td><a href="https://firebase.google.com/docs/app-indexing/" rel="external nofollow noopener noreferrer" target="_blank">Firebase App Indexing</a></td></tr><tr><td><a href="https://firebase.google.com/docs/cloud-messaging/" rel="external nofollow noopener noreferrer" target="_blank">Firebase Cloud Messaging (FCM)</a></td><td><a href="https://firebase.google.com/docs/auth/" rel="external nofollow noopener noreferrer" target="_blank">Firebase Authentication</a></td></tr><tr><td><a href="https://firebase.google.com/docs/crash/" rel="external nofollow noopener noreferrer" target="_blank">Firebase Crash Reporting</a></td><td><a href="https://firebase.google.com/docs/dynamic-links/" rel="external nofollow noopener noreferrer" target="_blank">Firebase Dynamic Links</a></td></tr><tr><td><a href="https://firebase.google.com/docs/database/" rel="external nofollow noopener noreferrer" target="_blank">Firebase Realtime Database</a></td><td><a href="https://firebase.google.com/docs/invites/" rel="external nofollow noopener noreferrer" target="_blank">Firebase Invites</a></td></tr><tr><td><a href="https://firebase.google.com/docs/remote-config/" rel="external nofollow noopener noreferrer" target="_blank">Firebase Remote Config</a></td><td><a href="https://firebase.google.com/docs/notifications/" rel="external nofollow noopener noreferrer" target="_blank">Firebase Notifications</a></td></tr><tr><td><a href="https://firebase.google.com/docs/storage/" rel="external nofollow noopener noreferrer" target="_blank">Firebase Storage</a></td><td><a href="https://developers.google.com/maps/" rel="external nofollow noopener noreferrer" target="_blank">Maps</a></td></tr><tr><td><a href="https://developers.google.com/fit/" rel="external nofollow noopener noreferrer" target="_blank">Fit</a></td><td><a href="https://developers.google.com/games/services/" rel="external nofollow noopener noreferrer" target="_blank">Play Games</a></td></tr><tr><td><a href="https://developers.google.com/instance-id/" rel="external nofollow noopener noreferrer" target="_blank">Instance ID</a></td><td><a href="https://developers.google.com/search/" rel="external nofollow noopener noreferrer" target="_blank">Search</a></td></tr><tr><td><a href="https://developers.google.com/awareness-location/" rel="external nofollow noopener noreferrer" target="_blank">Location</a></td><td><a href="https://developers.google.com/identity/" rel="external nofollow noopener noreferrer" target="_blank">Sign-In</a></td></tr><tr><td><a href="https://developers.google.com/nearby/" rel="external nofollow noopener noreferrer" target="_blank">Nearby</a></td><td></td></tr><tr><td><a href="https://developers.google.com/places/" rel="external nofollow noopener noreferrer" target="_blank">Places</a></td><td></td></tr><tr><td><a href="https://developers.google.com/vision/" rel="external nofollow noopener noreferrer" target="_blank">Mobile Vision</a></td></tr></tbody></table><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p>Android Things 不支持在运行时请求权限，因为嵌入式设备不一定有显示屏幕。你需要在 Manifest 中声明需要的权限。所有的正常的和危险的权限都会在安装时被授权。</p><h4 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h4><p>由于 Android Things 没有状态栏，所以不支持通知就理所当然了。开发中一定要避免要避免在你的应用中调用 <a href="https://developer.android.com/reference/android/app/NotificationManager.html" rel="external nofollow noopener noreferrer" target="_blank">NotificationManager</a> APIs。</p><h3 id="英文地址"><a href="#英文地址" class="headerlink" title="英文地址"></a>英文地址</h3><p><a href="https://developer.android.com/things/sdk/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/things/sdk/index.html</a></p><p><br>本文地址 <a href="http://94275.cn/2016/12/20/Android-Things/">http://94275.cn/2016/12/20/Android-Things/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL重复记录查询和删除方法]]></title>
      <url>http://94275.cn/2016/11/24/repeat-sql-data/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>MYSQL 查询和删除重复记录的方法很多，下面就为您介绍几种最常用的 MYSQL 查询和删除重复记录的方法，希望对您查询和删除重复数据方面能有所帮助。</p><a id="more"></a><p>SQL重复记录查询的几种方法：</p><p><strong>1. 查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> people</span><br><span class="line"><span class="keyword">where</span> peopleId </span><br><span class="line"><span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> peopleId </span><br><span class="line">    <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>2. 删除表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断，只留有 rowid 最小的记录</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> people </span><br><span class="line"><span class="keyword">where</span> peopleId </span><br><span class="line"><span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> peopleId</span><br><span class="line">    <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> people </span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> peopleId </span><br><span class="line">        <span class="keyword">having</span> <span class="keyword">count</span>(peopleId)&gt;<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>3. 查找表中多余的重复记录（多个字段）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) </span><br><span class="line"><span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq </span><br><span class="line">    <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>4. 删除表中多余的重复记录（多个字段），只留有 rowid 最小的记录</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) </span><br><span class="line"><span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq </span><br><span class="line">    <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> vitae </span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>5. 查找表中多余的重复记录（多个字段），不包含 rowid 最小的记录</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) </span><br><span class="line"><span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq </span><br><span class="line">    <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> vitae </span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq </span><br><span class="line">        <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>以上 SQL 记录重复数据查询和删除方法，希望能够帮助你。</p><p><br>本文地址 <a href="http://94275.cn/2016/11/24/repeat-sql-data/">http://94275.cn/2016/11/24/repeat-sql-data/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> SQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 自定义 widget]]></title>
      <url>http://94275.cn/2016/11/09/hexo-add-widget/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>Hexo 为我们提供了很多常用的 widget，但是，这些 widget 可能不能满足我们的要求，比如我们需要最新评论。为此，特写此文，希望帮助更多人添加自定义的widget。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>Hexo 首页的 widget，说白了其实就是一段网页代码。我们需要做的是，在不破坏原有代码结构，写出易维护，可随时控制显示与否的 widget。</p><p>我用的 jacman 主题，在这个主题下有很多 widget 可用，在主题下的 <code>_config.yml</code> 文件中能够查看所有支持的 widget，并且能够控制显示哪些 widgets。自定义的 widget 需要考虑几个问题？第一，数据源问题(本文暂不做详细介绍)；第二，数据显示的问题；</p><p>关于数据显示问题，我们需要考虑到代码不能太耦合，尽量解耦，而且要尽量少对已有模块尽心修改；具体到实现就是我们的 widget 要独立，不与其他模块混合，我们的 widget 要样式和结构也要分离。</p><p>对 jacman 主题代码阅读和分析得出以下结论:</p><ol><li>widget 控制显示与否开关在主题的 <code>_config.yml</code> 配置文件中；</li><li>通过阅读 <code>_partial/sidebar.ejs</code> ，发现页面上的 widget 是通过遍历主题的 <code>_config.yml</code> 配置文件来控制的。真正的实现是在 <code>_widget</code> 目录下，文件名称是 <code>_config.yml</code> 中配置名称（文件后缀 .ejs）；</li><li>通过阅读 <code>_widget</code> 目录下的 widget，发现本文件夹下只实现页面的布局；</li><li><p>我们 widget 布局的样式文件在主题文件夹下的 <code>source/css/_partial/aside.styl</code> 文件；</p><p>上面是对以后框架实现的分析，下文将用具体的例子来实现。</p></li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们这次实现热门评论 widget，数据源为多说的热门评论。多说评论<a href="http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9" rel="external nofollow noopener noreferrer" target="_blank">传送门</a>。具体实现步骤如下：</p><h3 id="一-创建控制开关"><a href="#一-创建控制开关" class="headerlink" title="一. 创建控制开关"></a>一. 创建控制开关</h3><p>在主题的 <code>_config.yml</code> 配置文件中添加热门评论开关 hot-articles，具体代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### Widgets</span></span><br><span class="line"><span class="attr">widgets:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">github-card</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hot-articles</span> <span class="comment"># 热评文章</span></span><br></pre></td></tr></table></figure><p>上述代码中，widgets 下的 widget 代码顺序即为显示的顺序。</p><h3 id="二-创建热门评论-widget"><a href="#二-创建热门评论-widget" class="headerlink" title="二. 创建热门评论 widget"></a>二. 创建热门评论 widget</h3><p>在 <code>_widget</code> 添加 <code>hot-articles.ejs</code> 文件，实现代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hotarticles"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"asidetitle"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">hot_articles</span>') %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 多说热评文章 start --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-top-threads"</span> <span class="attr">data-range</span>=<span class="string">"monthly"</span> <span class="attr">data-num-items</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 多说热评文章 end --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果未使用多说评论，需要额外添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 多说热评文章 start --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"ds-top-threads"</span> data-range=<span class="string">"monthly"</span> data-num-items=<span class="string">"5"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- 多说热评文章 end --&gt;</span><br><span class="line">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> duoshuoQuery = &#123;<span class="attr">short_name</span>:<span class="string">"ihongqiqu"</span>&#125;;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</span><br><span class="line">    ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</span><br><span class="line">    ds.charset = <span class="string">'UTF-8'</span>;</span><br><span class="line">    (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] </span><br><span class="line">     || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</span><br><span class="line">  &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- 多说公共JS代码 end --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三-添加自定义的样式"><a href="#三-添加自定义的样式" class="headerlink" title="三. 添加自定义的样式"></a>三. 添加自定义的样式</h3><p>热门评论文章是一个列表，我们需要去掉 <code>li</code> 之前的点，我的样式代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//hot-articles</span><br><span class="line"><span class="selector-class">.hotarticles</span></span><br><span class="line">  @<span class="keyword">media</span> mini</span><br><span class="line">    width <span class="number">45%</span></span><br><span class="line">    float left</span><br><span class="line">    margin <span class="number">0</span> <span class="number">5%</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">  @media tablet </span><br><span class="line">    width <span class="number">100%</span></span><br><span class="line">    float none</span><br><span class="line">    margin <span class="number">1em</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">  li </span><br><span class="line">    border-bottom <span class="number">1px</span> solid color-gray</span><br><span class="line">    list-style-type none</span><br><span class="line">    a</span><br><span class="line">      display block</span><br><span class="line">      padding <span class="number">0.5em</span> <span class="number">5%</span></span><br><span class="line">      &amp;:hover</span><br><span class="line">        color color-theme</span><br></pre></td></tr></table></figure><p>大功告成！生成一下，在本地预览发现我们的 widget 出来了。</p><p>到此我们在 hexo 中添加 widget 的功能就实现了，希望能够帮助到你。如有任何问题，欢迎反馈，我的邮箱 <a href="mailto:jingle1267@163.com" rel="external nofollow noopener noreferrer" target="_blank">jingle1267@163.com</a> 。</p><p><br>本文地址 <a href="http://94275.cn/2016/11/09/hexo-add-widget/">http://94275.cn/2016/11/09/hexo-add-widget/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[动态加载的页面数据的抓取]]></title>
      <url>http://94275.cn/2016/11/07/web-crawler-2/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>前些天写了《<a href="http://ihongqiqu.com/2016/10/26/web-crawler/" rel="external nofollow noopener noreferrer" target="_blank">初识网络爬虫</a>》，一般的网络爬虫是通过获取源码，并从源码中获取数据。问题来了，现在 ajax 技术应用也很普遍，针对如此情况，我们一般的爬虫无法获取到需要的数据。本文主要实现抓取动态页面的数据。</p><a id="more"></a><p>动态加载页面数据有两种方法可以选择：</p><ol><li>模拟页面中的请求，直接获取接口返回的数据</li><li>内建浏览器渲染页面，然后获取渲染后的数据</li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在页面中通过拼凑参数等方法来模拟网络请求，最终获取接口数据，这种方法是可以行的通的，问题是比较麻烦。本文主要通过内建浏览器渲染这种简单粗暴的方法来实现数据的抓取。</p><p>问题来了，如何内建浏览器呢？</p><p>熟悉自动化测试同学应该都知道 <a href="http://docs.seleniumhq.org/projects/" rel="external nofollow noopener noreferrer" target="_blank">Selenium</a>，这个模拟浏览器进行自动化测试的工具。Selenium 提供一组 API 可以与真实的浏览器内核交互。Selenium 是跨语言的，有 Java、C#、python 等版本，并且支持多种浏览器，chrome、firefox 以及 IE 都支持。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>我们用 Java 来写 Demo。</p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>添加 Selenium 依赖，以 Maven 为例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-chrome-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="下载-driver"><a href="#下载-driver" class="headerlink" title="下载 driver"></a>下载 driver</h4><p>以 chrome 为例：<a href="https://sites.google.com/a/chromium.org/chromedriver/" rel="external nofollow noopener noreferrer" target="_blank">https://sites.google.com/a/chromium.org/chromedriver/</a></p><p>下载后，最好添加环境变量。当然，也可以在调用前设置环境:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.getProperties().setProperty(<span class="string">"webdriver.chrome.driver"</span>,</span><br><span class="line">    <span class="string">"/Users/zhenguo/Documents/chrome/chromedriver"</span>);</span><br></pre></td></tr></table></figure><p>注意：MAC 环境下需要确认 chromedriver 是可运行的。</p><h4 id="安装-Chrome-浏览器"><a href="#安装-Chrome-浏览器" class="headerlink" title="安装 Chrome 浏览器"></a>安装 Chrome 浏览器</h4><p>这个，没什么好说的。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>测试 selenium ，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Ignore</span>(<span class="string">"need chrome driver"</span>)</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelenium</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.getProperties().setProperty(<span class="string">"webdriver.chrome.driver"</span>,</span><br><span class="line">        <span class="string">"/Users/zhenguo/Documents/chrome/chromedriver"</span>);</span><br><span class="line">    WebDriver webDriver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">    webDriver.get(<span class="string">"http://huaban.com/"</span>);</span><br><span class="line">    WebElement webElement = webDriver.findElement(By.xpath(<span class="string">"/html"</span>));</span><br><span class="line">    System.out.println(webElement.getAttribute(<span class="string">"outerHTML"</span>));</span><br><span class="line">    webDriver.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现类似以下结果，就说明 webdriver 配置好了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Starting ChromeDriver 2.25.426935 (820a95b0b81d33e42712f9198c215f703412e1a1) on port 2052</span><br><span class="line">Only local connections are allowed.</span><br><span class="line">Nov 07, 2016 12:35:11 AM org.openqa.selenium.remote.ProtocolHandshake createSession</span><br><span class="line">INFO: Attempting bi-dialect session, assuming Postel's Law holds true on the remote end</span><br><span class="line">Nov 07, 2016 12:35:13 AM org.openqa.selenium.remote.ProtocolHandshake createSession</span><br><span class="line">INFO: Detected dialect: OSS</span><br></pre></td></tr></table></figure><p>PS：每次<code>new ChromeDriver()</code>，Selenium都会建立一个Chrome进程，并使用一个随机端口在Java中与chrome进程进行通信来交互。我们需要调用 <code>webDriver.close()</code> 关闭进程。如果是网络爬虫抓取数据的话，最好用线程池来处理。</p><h4 id="实现爬虫"><a href="#实现爬虫" class="headerlink" title="实现爬虫"></a>实现爬虫</h4><p>上面步骤都设置好了，基于 webmagic 的爬虫实现就比较简单了，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuabanProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Site site;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">           page.addTargetRequests(</span><br><span class="line">             page.getHtml().links().regex(<span class="string">"http://huaban\\.com/.*"</span>).all());</span><br><span class="line">        <span class="keyword">if</span> (page.getUrl().toString().contains(<span class="string">"pins"</span>)) &#123;</span><br><span class="line">            page.putField(<span class="string">"img"</span>, page.getHtml().</span><br><span class="line">                          xpath(<span class="string">"//div[@id='baidu_image_holder']/img/@src"</span>).toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            page.getResultItems().setSkip(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == site) &#123;</span><br><span class="line">            site = Site.me().setDomain(<span class="string">"huaban.com"</span>).setSleepTime(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Spider.create(<span class="keyword">new</span> HuabanProcessor()).thread(<span class="number">5</span>)</span><br><span class="line">                .addPipeline(<span class="keyword">new</span> FilePipeline(<span class="string">"/Users/zhenguo/Documents/chrome/webmagic/test/"</span>))</span><br><span class="line">                .setDownloader(<span class="keyword">new</span> SeleniumDownloader(<span class="string">"/Users/zhenguo/Documents/chrome/chromedriver"</span>))</span><br><span class="line">                .addUrl(<span class="string">"http://huaban.com/explore/gufenghaibao/"</span>)</span><br><span class="line">                .runAsync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面 <code>HuabanProcessor</code> 使用到 <code>SeleniumDownloader</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">package</span> us.codecraft.webmagic.downloader.selenium;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line">   <span class="keyword">import</span> org.openqa.selenium.By;</span><br><span class="line">   <span class="keyword">import</span> org.openqa.selenium.Cookie;</span><br><span class="line">   <span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line">   <span class="keyword">import</span> org.openqa.selenium.WebElement;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">import</span> us.codecraft.webmagic.Page;</span><br><span class="line">   <span class="keyword">import</span> us.codecraft.webmagic.Request;</span><br><span class="line">   <span class="keyword">import</span> us.codecraft.webmagic.Site;</span><br><span class="line">   <span class="keyword">import</span> us.codecraft.webmagic.Task;</span><br><span class="line">   <span class="keyword">import</span> us.codecraft.webmagic.downloader.Downloader;</span><br><span class="line">   <span class="keyword">import</span> us.codecraft.webmagic.selector.Html;</span><br><span class="line">   <span class="keyword">import</span> us.codecraft.webmagic.selector.PlainText;</span><br><span class="line">   <span class="keyword">import</span> us.codecraft.webmagic.utils.UrlUtils;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">import</span> java.io.Closeable;</span><br><span class="line">   <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">   <span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Selenium调用浏览器进行渲染。目前仅支持chrome。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 需要下载Selenium driver支持。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> code4crafter@gmail.com &lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         Date: 13-7-26 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         Time: 下午1:37 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeleniumDownloader</span> <span class="keyword">implements</span> <span class="title">Downloader</span>, <span class="title">Closeable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">volatile</span> WebDriverPool webDriverPool;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> Logger logger = Logger.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> sleepTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> poolSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER_PHANTOMJS = <span class="string">"phantomjs"</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 新建</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> chromeDriverPath chromeDriverPath</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">SeleniumDownloader</span><span class="params">(String chromeDriverPath)</span> </span>&#123;</span><br><span class="line">         System.getProperties().setProperty(<span class="string">"webdriver.chrome.driver"</span>,</span><br><span class="line">                 chromeDriverPath);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Constructor without any filed. Construct PhantomJS browser</span></span><br><span class="line"><span class="comment">      * </span></span><br><span class="line"><span class="comment">      * <span class="doctag">@author</span> bob.li.0718@gmail.com</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">SeleniumDownloader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// System.setProperty("phantomjs.binary.path",</span></span><br><span class="line">         <span class="comment">// "/Users/Bingo/Downloads/phantomjs-1.9.7-macosx/bin/phantomjs");</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * set sleep time to wait until load success</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> sleepTime sleepTime</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> this</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> SeleniumDownloader <span class="title">setSleepTime</span><span class="params">(<span class="keyword">int</span> sleepTime)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.sleepTime = sleepTime;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Page <span class="title">download</span><span class="params">(Request request, Task task)</span> </span>&#123;</span><br><span class="line">         checkInit();</span><br><span class="line">         WebDriver webDriver;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             webDriver = webDriverPool.get();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             logger.warn(<span class="string">"interrupted"</span>, e);</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         logger.info(<span class="string">"downloading page "</span> + request.getUrl());</span><br><span class="line">         webDriver.get(request.getUrl());</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             Thread.sleep(sleepTime);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">         WebDriver.Options manage = webDriver.manage();</span><br><span class="line">         Site site = task.getSite();</span><br><span class="line">         <span class="keyword">if</span> (site.getCookies() != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; cookieEntry : site.getCookies()</span><br><span class="line">                     .entrySet()) &#123;</span><br><span class="line">                 Cookie cookie = <span class="keyword">new</span> Cookie(cookieEntry.getKey(),</span><br><span class="line">                         cookieEntry.getValue());</span><br><span class="line">                 manage.addCookie(cookie);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * TODO You can add mouse event or other processes</span></span><br><span class="line"><span class="comment">          * </span></span><br><span class="line"><span class="comment">          * @author: bob.li.0718@gmail.com</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line"></span><br><span class="line">         WebElement webElement = webDriver.findElement(By.xpath(<span class="string">"/html"</span>));</span><br><span class="line">         String content = webElement.getAttribute(<span class="string">"outerHTML"</span>);</span><br><span class="line">         Page page = <span class="keyword">new</span> Page();</span><br><span class="line">         page.setRawText(content);</span><br><span class="line">         page.setHtml(<span class="keyword">new</span> Html(UrlUtils.fixAllRelativeHrefs(content,</span><br><span class="line">                 request.getUrl())));</span><br><span class="line">         page.setUrl(<span class="keyword">new</span> PlainText(request.getUrl()));</span><br><span class="line">         page.setRequest(request);</span><br><span class="line">         webDriverPool.returnToPool(webDriver);</span><br><span class="line">         <span class="keyword">return</span> page;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (webDriverPool == <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                 webDriverPool = <span class="keyword">new</span> WebDriverPool(poolSize);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setThread</span><span class="params">(<span class="keyword">int</span> thread)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.poolSize = thread;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">         webDriverPool.closeAll();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>WebDriverPool</code> 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> us.codecraft.webmagic.downloader.selenium;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.firefox.FirefoxDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.phantomjs.PhantomJSDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.phantomjs.PhantomJSDriverService;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.remote.DesiredCapabilities;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.remote.RemoteWebDriver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> code4crafter@gmail.com &lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         Date: 13-7-26 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         Time: 下午1:41 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDriverPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> STAT_RUNNING = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> STAT_CLODED = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger stat = <span class="keyword">new</span> AtomicInteger(STAT_RUNNING);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * new fields for configuring phantomJS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> WebDriver mDriver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mAutoQuitDriver = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIG_FILE = <span class="string">"/Users/zhenguo/Documents/develop/github/webmagic/webmagic-selenium/config.ini"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER_FIREFOX = <span class="string">"firefox"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER_CHROME = <span class="string">"chrome"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER_PHANTOMJS = <span class="string">"phantomjs"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> Properties sConfig;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> DesiredCapabilities sCaps;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Configure the GhostDriver, and initialize a WebDriver instance. This part</span></span><br><span class="line"><span class="comment">     * of code comes from GhostDriver.</span></span><br><span class="line"><span class="comment">     * https://github.com/detro/ghostdriver/tree/master/test/java/src/test/java/ghostdriver</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> bob.li.0718@gmail.com</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// Read config file</span></span><br><span class="line">        sConfig = <span class="keyword">new</span> Properties();</span><br><span class="line">        sConfig.load(<span class="keyword">new</span> FileReader(CONFIG_FILE));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare capabilities</span></span><br><span class="line">        sCaps = <span class="keyword">new</span> DesiredCapabilities();</span><br><span class="line">        sCaps.setJavascriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">        sCaps.setCapability(<span class="string">"takesScreenshot"</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        String driver = sConfig.getProperty(<span class="string">"driver"</span>, DRIVER_PHANTOMJS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fetch PhantomJS-specific configuration parameters</span></span><br><span class="line">        <span class="keyword">if</span> (driver.equals(DRIVER_PHANTOMJS)) &#123;</span><br><span class="line">            <span class="comment">// "phantomjs_exec_path"</span></span><br><span class="line">            <span class="keyword">if</span> (sConfig.getProperty(<span class="string">"phantomjs_exec_path"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sCaps.setCapability(</span><br><span class="line">                        PhantomJSDriverService.PHANTOMJS_EXECUTABLE_PATH_PROPERTY,</span><br><span class="line">                        sConfig.getProperty(<span class="string">"phantomjs_exec_path"</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(</span><br><span class="line">                        String.format(</span><br><span class="line">                                <span class="string">"Property '%s' not set!"</span>,</span><br><span class="line">                                PhantomJSDriverService.PHANTOMJS_EXECUTABLE_PATH_PROPERTY));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// "phantomjs_driver_path"</span></span><br><span class="line">            <span class="keyword">if</span> (sConfig.getProperty(<span class="string">"phantomjs_driver_path"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Test will use an external GhostDriver"</span>);</span><br><span class="line">                sCaps.setCapability(</span><br><span class="line">                        PhantomJSDriverService.PHANTOMJS_GHOSTDRIVER_PATH_PROPERTY,</span><br><span class="line">                        sConfig.getProperty(<span class="string">"phantomjs_driver_path"</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out</span><br><span class="line">                        .println(<span class="string">"Test will use PhantomJS internal GhostDriver"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Disable "web-security", enable all possible "ssl-protocols" and</span></span><br><span class="line">        <span class="comment">// "ignore-ssl-errors" for PhantomJSDriver</span></span><br><span class="line">        <span class="comment">// sCaps.setCapability(PhantomJSDriverService.PHANTOMJS_CLI_ARGS, new</span></span><br><span class="line">        <span class="comment">// String[] &#123;</span></span><br><span class="line">        <span class="comment">// "--web-security=false",</span></span><br><span class="line">        <span class="comment">// "--ssl-protocol=any",</span></span><br><span class="line">        <span class="comment">// "--ignore-ssl-errors=true"</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; cliArgsCap = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        cliArgsCap.add(<span class="string">"--web-security=false"</span>);</span><br><span class="line">        cliArgsCap.add(<span class="string">"--ssl-protocol=any"</span>);</span><br><span class="line">        cliArgsCap.add(<span class="string">"--ignore-ssl-errors=true"</span>);</span><br><span class="line">        sCaps.setCapability(PhantomJSDriverService.PHANTOMJS_CLI_ARGS,</span><br><span class="line">                cliArgsCap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Control LogLevel for GhostDriver, via CLI arguments</span></span><br><span class="line">        sCaps.setCapability(</span><br><span class="line">                PhantomJSDriverService.PHANTOMJS_GHOSTDRIVER_CLI_ARGS,</span><br><span class="line">                <span class="keyword">new</span> String[] &#123; <span class="string">"--logLevel="</span></span><br><span class="line">                        + (sConfig.getProperty(<span class="string">"phantomjs_driver_loglevel"</span>) != <span class="keyword">null</span> ? sConfig</span><br><span class="line">                                .getProperty(<span class="string">"phantomjs_driver_loglevel"</span>)</span><br><span class="line">                                : <span class="string">"INFO"</span>) &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String driver = sConfig.getProperty("driver", DRIVER_PHANTOMJS);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start appropriate Driver</span></span><br><span class="line">        <span class="keyword">if</span> (isUrl(driver)) &#123;</span><br><span class="line">            sCaps.setBrowserName(<span class="string">"phantomjs"</span>);</span><br><span class="line">            mDriver = <span class="keyword">new</span> RemoteWebDriver(<span class="keyword">new</span> URL(driver), sCaps);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (driver.equals(DRIVER_FIREFOX)) &#123;</span><br><span class="line">            mDriver = <span class="keyword">new</span> FirefoxDriver(sCaps);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (driver.equals(DRIVER_CHROME)) &#123;</span><br><span class="line">            mDriver = <span class="keyword">new</span> ChromeDriver(sCaps);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (driver.equals(DRIVER_PHANTOMJS)) &#123;</span><br><span class="line">            mDriver = <span class="keyword">new</span> PhantomJSDriver(sCaps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * check whether input is a valid URL</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> bob.li.0718@gmail.com</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlString urlString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true means yes, otherwise no.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isUrl</span><span class="params">(String urlString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> URL(urlString);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException mue) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * store webDrivers created</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;WebDriver&gt; webDriverList = Collections</span><br><span class="line">            .synchronizedList(<span class="keyword">new</span> ArrayList&lt;WebDriver&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * store webDrivers available</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BlockingDeque&lt;WebDriver&gt; innerQueue = <span class="keyword">new</span> LinkedBlockingDeque&lt;WebDriver&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebDriverPool</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebDriverPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebDriver <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        checkRunning();</span><br><span class="line">        WebDriver poll = innerQueue.poll();</span><br><span class="line">        <span class="keyword">if</span> (poll != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> poll;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (webDriverList.size() &lt; capacity) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (webDriverList) &#123;</span><br><span class="line">                <span class="keyword">if</span> (webDriverList.size() &lt; capacity) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// add new WebDriver instance into pool</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        configure();</span><br><span class="line">                        innerQueue.add(mDriver);</span><br><span class="line">                        webDriverList.add(mDriver);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// ChromeDriver e = new ChromeDriver();</span></span><br><span class="line">                    <span class="comment">// WebDriver e = getWebDriver();</span></span><br><span class="line">                    <span class="comment">// innerQueue.add(e);</span></span><br><span class="line">                    <span class="comment">// webDriverList.add(e);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> innerQueue.take();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnToPool</span><span class="params">(WebDriver webDriver)</span> </span>&#123;</span><br><span class="line">        checkRunning();</span><br><span class="line">        innerQueue.add(webDriver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkRunning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stat.compareAndSet(STAT_RUNNING, STAT_RUNNING)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already closed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = stat.compareAndSet(STAT_RUNNING, STAT_CLODED);</span><br><span class="line">        <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already closed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (WebDriver webDriver : webDriverList) &#123;</span><br><span class="line">            logger.info(<span class="string">"Quit webDriver"</span> + webDriver);</span><br><span class="line">            webDriver.quit();</span><br><span class="line">            webDriver = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码参考自 <a href="https://github.com/code4craft/webmagic" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/code4craft/webmagic</a></p><p>到此，动态加载的页面数据抓取就实现了。本文使用 selenium 作为渲染的方法，还有很多其他的方法，例如 phantomjs 和 htmlunit 等。有空了可以尝试其他的方法，希望本文对你有所帮助。</p><p><br>本文地址 <a href="http://94275.cn/2016/11/07/web-crawler-2/">http://94275.cn/2016/11/07/web-crawler-2/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 网络爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[行为面谈]]></title>
      <url>http://94275.cn/2016/11/01/behavior-interview/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>行为面谈在人才甄别选拔中得到极其广泛的应用，这已是众所周知的事。行为面谈能够让我们捕获更多信息，而且还能获取消息的真实性，面试中只是小的应用，其实生活中很多地方都能够应用的到。</p><p>下面，我列出了一些基本准则，点到为止，很多东西还需要自己慢慢体会。渐渐地，你会感觉到这些准则真的太实用了。</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>行为面谈</strong>（Behavioral Event Interviewing，简称BEI），最早是心理学家用以进行心理测评的一种方法。它通过一系列问题，收集被访者在代表性事件中的具体行为和心理活动的详细信息。</p><h2 id="基本准则"><a href="#基本准则" class="headerlink" title="基本准则"></a>基本准则</h2><h3 id="列出行为清单"><a href="#列出行为清单" class="headerlink" title="列出行为清单"></a>列出行为清单</h3><ol><li>不要追求完美</li><li>关注行为素质</li></ol><h3 id="关注关键事件"><a href="#关注关键事件" class="headerlink" title="关注关键事件"></a>关注关键事件</h3><ol><li>关注应聘者本人：“我”而不是“我们”</li><li>关注以前发生过的情况</li><li>避免理论和假设性的回答</li></ol><h3 id="不要亮出你的底牌"><a href="#不要亮出你的底牌" class="headerlink" title="不要亮出你的底牌"></a>不要亮出你的底牌</h3><ol><li>不要透漏你想要的答案</li><li>必要提出引导性的问题</li><li>不要自问自答或提供选择</li></ol><h3 id="不要着急"><a href="#不要着急" class="headerlink" title="不要着急"></a>不要着急</h3><ol><li>不要同时提出多个问题</li><li>不要打破沉默，要忍耐</li></ol><h2 id="招聘需求"><a href="#招聘需求" class="headerlink" title="招聘需求"></a>招聘需求</h2><ol><li>与他人协商</li><li>灵活的计划</li><li>善于成本控制</li><li>能承担责任</li></ol><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="http://blog.ceconlinebbs.com/BLOG_ARTICLE_49006.HTM" rel="external nofollow noopener noreferrer" target="_blank">http://blog.ceconlinebbs.com/BLOG_ARTICLE_49006.HTM</a></p><p><img src="/imgs/post/lizhi_action.jpg" alt="年轻时候所经历的磨难都是为了以后变得更好的自己"></p><p><br>本文地址 <a href="http://94275.cn/2016/11/01/behavior-interview/">http://94275.cn/2016/11/01/behavior-interview/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> 行为面谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初识网络爬虫]]></title>
      <url>http://94275.cn/2016/10/26/web-crawler/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>前些天，在百度搜索的时候发现一个坑爹的事情。别人未经同意抓取了我的博客文章，更气人的是搜索结果第一条也被他抢去。百度我已无力吐槽，只是这些抓取别人博客的人太可恨。言归正传，我不是来吐槽百度和那些网站的，他们抓取我的文章，肯定是用了网络爬虫。互联网离不开爬虫，爬虫这么重要，我也来学学爬虫，抓一些数据玩一玩。</p><a id="more"></a><h2 id="关于网络爬虫"><a href="#关于网络爬虫" class="headerlink" title="关于网络爬虫"></a>关于网络爬虫</h2><p>之前有做过一些网站 SEO 优化的事情，SEO 优化实质就是为了让网络爬虫更容易抓取到数据，并能够优先抓取我们的网站的数据。网络爬虫，又叫做网页蜘蛛。关于网络爬虫更多信息，可以查看<a href="http://baike.baidu.com/link?url=o3vV96q6NFdC-4RYpQKQ9GCX32q4dOKJ9iSVcrauy3vNtJ-7ESBlfDbFjXfbRKjg1vnveYGSxHK5ZY4P3yvFt-HYY7OwCGlIvNtwzATkkVWPiLEyRsvYKY6MVFIrsCHy#3" rel="external nofollow noopener noreferrer" target="_blank">百科</a>的解释。网络爬虫的架构如下图：</p><p><img src="/imgs/post/WebCrawlerArchitecture.svg" alt="Architecture of a Web crawler"></p><p>网上开源的网络爬虫有很多，经过多方查找和看评价，最终选择尝试一下 <a href="https://github.com/code4craft/webmagic" rel="external nofollow noopener noreferrer" target="_blank">WebMagic</a> 。WebMagic是一个简单灵活的爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。</p><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><h3 id="WebMagic-架构"><a href="#WebMagic-架构" class="headerlink" title="WebMagic 架构"></a>WebMagic 架构</h3><p>WebMagic 的架构如图：</p><p><img src="/imgs/post/TheArchitectureOfWebmagic.png" alt="TheArchitectureOfWebmagic"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>首先要添加依赖，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分析和准备"><a href="#分析和准备" class="headerlink" title="分析和准备"></a>分析和准备</h3><p>我们以抓取博客园搜索结果页的链接地址为例。打开博客园，搜索 Android Monkey ，我们要把搜索结果页中的搜索结果链接抓取出来。</p><p>详细分析和准备步骤是：</p><ol><li>首先准备搜索链接: <a href="http://zzk.cnblogs.com/s/blogpost?Keywords=android+log%E5%B7%A5%E5%85%B7%E7%B1%BB" rel="external nofollow noopener noreferrer" target="_blank">http://zzk.cnblogs.com/s/blogpost?Keywords=android+log%E5%B7%A5%E5%85%B7%E7%B1%BB</a> (搜索 Android Monkey 的第 27 页)</li><li>查看搜索结果页的源码，找到搜索结果链接，如 <a href="http://www.cnblogs.com/jingle1267/p/4068020.html" target="_blank" rel="noopener">http://www.cnblogs.com/jingle1267/p/4068020.html</a> ，查看所有的搜索结果链接，可以发现：博客园的文章链接结构是 <a href="http://www.cnblogs.com/jingle1267/p/4068020.html" target="_blank" rel="noopener">http://www.cnblogs.com/…/数字.html</a> ，即域名为博客园的二级域名，文章页面时一个<em>数字串.html</em> ，中间部分不用太关注。</li><li>根据搜索结果链接的规则，我们可以写正则匹配出所有的链接地址。</li></ol><h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><p>经过上面的分析和准备，接下来我们需要实现 WebMagic 的 PageProcessor ，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ihongqiqu.cnblogs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.*;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.pipeline.CollectorPipeline;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;</span><br><span class="line"><span class="keyword">import</span> us.codecraft.webmagic.processor.PageProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网址抓取器</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 10/14/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CnblogsProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BLOG_URL = <span class="string">"http://zzk.cnblogs.com/s/blogpost?Keywords=%s&amp;pageindex=%d"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// http://www.cnblogs.com/sunjialiang/archive/2011/08/16/2140636.html</span></span><br><span class="line">        List&lt;String&gt; strings = page.getHtml().links().regex(<span class="string">"http://www\\.cnblogs\\.com/.*/?\\d+\\.html"</span>).all();</span><br><span class="line">        page.putField(<span class="string">"url"</span>, strings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Site.me().setDomain(<span class="string">"zzk.cnblogs.com"</span>)</span><br><span class="line">                .setUserAgent(<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.65 Safari/537.31"</span>)</span><br><span class="line">                .setCharset(<span class="string">"GBK"</span>).setSleepTime(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CollectorPipeline&lt;ResultItems&gt; collectorPipeline = <span class="keyword">new</span> ResultItemsCollectorPipeline();</span><br><span class="line"></span><br><span class="line">        Spider.create(<span class="keyword">new</span> CnblogsProcessor())</span><br><span class="line">                .addUrl(</span><br><span class="line">                        <span class="string">"http://zzk.cnblogs.com/s/blogpost?Keywords=android+log%E5%B7%A5%E5%85%B7%E7%B1%BB"</span></span><br><span class="line">                )</span><br><span class="line">                .addPipeline(collectorPipeline)</span><br><span class="line">                .run();</span><br><span class="line">        List&lt;ResultItems&gt; resultItemsList = collectorPipeline.getCollected();</span><br><span class="line">        List&lt;String&gt; urls = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">for</span> (ResultItems items : resultItemsList) &#123;</span><br><span class="line">            List&lt;String&gt; suburls = items.get(<span class="string">"url"</span>);</span><br><span class="line">            urls.addAll(suburls);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            System.out.println(url);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\n共计 "</span> + urls.size() + <span class="string">" 条信息"</span>);</span><br><span class="line">        System.out.println(<span class="string">"\n===================\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>运行 main 方法后，控制台输入的结果如下：</p><p><img src="/imgs/post/WebMagicCnblogsSearchResult.jpg" alt="WebMagic Cnblogs Search Result"></p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>根据上面的分析，我们已经可以抓取到搜索结果页的链接，但是这个只是抓取单个页面的数据。通过对搜索链接的分析，其实搜索链接也是有规律可循的，我们可以设置搜索的关键字和抓取的页码，具体键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据关键字也分页数来抓去所有搜索到的博文链接</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyword   要搜索的关键字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageStart 开始的分页 pageStart &gt;= 1 默认是1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize  要抓取的页数 pageSize &gt;= 1 默认是1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 搜索到的过滤后的博文链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUrls</span><span class="params">(String keyword, <span class="keyword">int</span> pageStart, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    pageStart = pageSize &lt; <span class="number">1</span> ? <span class="number">1</span> : pageStart;</span><br><span class="line">    pageSize = pageSize &lt; <span class="number">1</span> ? <span class="number">1</span> : pageSize;</span><br><span class="line"></span><br><span class="line">    String[] searchUrls = <span class="keyword">new</span> String[pageSize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pageSize; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            searchUrls[i] = String.format(<span class="string">"http://zzk.cnblogs.com/s/blogpost?Keywords=%s&amp;pageindex=%d"</span>,</span><br><span class="line">                    URLEncoder.encode(keyword, <span class="string">"UTF-8"</span>), pageStart + i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CollectorPipeline&lt;ResultItems&gt; collectorPipeline = <span class="keyword">new</span> ResultItemsCollectorPipeline();</span><br><span class="line"></span><br><span class="line">    Spider.create(<span class="keyword">new</span> CnblogsProcessor())</span><br><span class="line">            .addUrl(searchUrls)</span><br><span class="line">            .addPipeline(collectorPipeline)</span><br><span class="line">            .run();</span><br><span class="line"></span><br><span class="line">    List&lt;ResultItems&gt; resultItemsList = collectorPipeline.getCollected();</span><br><span class="line">    List&lt;String&gt; urls = Lists.newArrayList();</span><br><span class="line">    <span class="keyword">for</span> (ResultItems items : resultItemsList) &#123;</span><br><span class="line">        List&lt;String&gt; suburls = items.get(<span class="string">"url"</span>);</span><br><span class="line">        urls.addAll(suburls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"\n共计 "</span> + urls.size() + <span class="string">" 条信息"</span>);</span><br><span class="line">    System.out.println(<span class="string">"\n===================\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> urls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如 WebMagic 作者所言：WebMagic是一个简单灵活的爬虫框架。网络爬虫真实一个好工具！</p><p><br>本文地址 <a href="http://94275.cn/2016/10/26/web-crawler/">http://94275.cn/2016/10/26/web-crawler/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 网络爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客园自定义悬浮容器]]></title>
      <url>http://94275.cn/2016/10/21/DIY-cnblogs-styles/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>前段时间下班后，在研究博客园的评论功能，无意间发现博客园支持自定义博客的样式。自从有自己的博客，博客园就成了我引流的一个工具博客。为了能够较好的引流，在博客园自己博客的页面上有一个显眼的入口是显得非常重要。而在页面底部悬浮一个小窗口就成了一个不错的选择。故研究在博客园自定义悬浮容器。</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>博客园的文章页面有推荐和反对功能，这两个功能能让用户留下评价，故在将推荐也反对两个功能的样式也做了浮动调整，实现后的效果如下图：</p><p><img src="/imgs/post/cnblog_float_continer.gif" alt="cnblog_float_continer"></p><p>线上预览地址: <a href="http://www.cnblogs.com/jingle1267/p/4068020.html" target="_blank" rel="noopener">http://www.cnblogs.com/jingle1267/p/4068020.html</a></p><p>实现上图中的效果，其实只是对 UI 的一些调整，有点 DIV + CSS 的功底就能上手。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现步骤：</p><h4 id="一-进入自定义设置页面"><a href="#一-进入自定义设置页面" class="headerlink" title="一. 进入自定义设置页面"></a>一. 进入自定义设置页面</h4><ol><li>登陆并进入”我的博客”</li><li>选择“管理”，之后点击“设置”</li></ol><h4 id="二-修改样式代码"><a href="#二-修改样式代码" class="headerlink" title="二. 修改样式代码"></a>二. 修改样式代码</h4><h5 id="A-编辑-CSS-代码"><a href="#A-编辑-CSS-代码" class="headerlink" title="A. 编辑 CSS 代码"></a>A. 编辑 CSS 代码</h5><p>在页面中找到“页面定制CSS代码”，并在之后的输入框中输入如下 CSS 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">div#blogTitle a&#123;font-size:42px;color:#e1255a;&#125;</span><br><span class="line">div#blogTitle h2 &#123;margin-left:5em;line-height:2;color:#ac4e69;font-size:14px;&#125;</span><br><span class="line"></span><br><span class="line">div#navigator&#123;height:60px;&#125;</span><br><span class="line">ul#navList&#123;height:60px;&#125;</span><br><span class="line">ul#navList li a&#123;font-size:16px;&#125;</span><br><span class="line">ul#navList li a:hover&#123;color:red;&#125;</span><br><span class="line">div.blogStats &#123;font-size:14px;color:#9c8d50;&#125;</span><br><span class="line"></span><br><span class="line">.cnblogs-markdown code &#123;</span><br><span class="line">    color: #c7254e;</span><br><span class="line">    background-color:#f9f2f4 !important;</span><br><span class="line">    border: none !important;</span><br><span class="line">&#125;</span><br><span class="line">.cnblogs-markdown code.hljs &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color:#333 !important;</span><br><span class="line">    font-size: 14px !important;</span><br><span class="line">&#125;</span><br><span class="line">.cnblogs-markdown code span.hljs-built_in, .cnblogs-markdown code span.hljs-tag, .cnblogs-markdown code span.hljs-name &#123;</span><br><span class="line">    color: #f92672;</span><br><span class="line">&#125;</span><br><span class="line">.my-blog-area &#123;</span><br><span class="line">    width: 500px; </span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    position: relative; </span><br><span class="line">    bottom: -105px;</span><br><span class="line">    right:360px; </span><br><span class="line">    z-index:100;</span><br><span class="line">    font-size:14px;</span><br><span class="line">&#125;</span><br><span class="line">.my-blog-area a &#123;</span><br><span class="line">    color: #f90; </span><br><span class="line">&#125;</span><br><span class="line">#home &#123;</span><br><span class="line">    margin-top: -16px;</span><br><span class="line">&#125;</span><br><span class="line">#cnblogs_post_body a &#123;</span><br><span class="line">    color: #39f;</span><br><span class="line">    text-decoration:none;</span><br><span class="line">&#125;</span><br><span class="line">#cnblogs_post_body a:hover &#123;</span><br><span class="line">    text-decoration:underline;</span><br><span class="line">&#125;</span><br><span class="line">#goTop &#123;</span><br><span class="line">    width: 45px;</span><br><span class="line">    height: 45px;</span><br><span class="line">    display: block;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 130px;</span><br><span class="line">    right: 45px;</span><br><span class="line">    background: url(http://img2.imgtn.bdimg.com/it/u=1709150814,3981140910&amp;fm=21&amp;gp=0.jpg);</span><br><span class="line">    background-size: 100% 100%;</span><br><span class="line">&#125;</span><br><span class="line">#div_digg &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    right: 20px;</span><br><span class="line">    bottom: -10px;</span><br><span class="line">    padding: 25px;</span><br><span class="line">    height: 64px;</span><br><span class="line">    background:#fff4e8;</span><br><span class="line">&#125;</span><br><span class="line">.jarson-blog &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    right: 225px;</span><br><span class="line">    height: 74px;</span><br><span class="line">    bottom: -10px;</span><br><span class="line">    padding: 25px 10px;</span><br><span class="line">    background: #fff4e8;</span><br><span class="line">&#125;</span><br><span class="line">.hljs-keyword &#123;</span><br><span class="line">    color:#ae81ff;</span><br><span class="line">&#125;</span><br><span class="line">.hljs-string &#123;</span><br><span class="line">    color: #e6db74 !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意不要选择”禁用模板默认CSS”，除非你要自定义整个页面</p></blockquote><h5 id="B-编辑-DIV-容器"><a href="#B-编辑-DIV-容器" class="headerlink" title="B. 编辑 DIV 容器"></a>B. 编辑 DIV 容器</h5><p>在页面中找到“页脚Html代码”，并在之后的输入框中输入如下 HTML 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a id=&quot;goTop&quot; href=&quot;#&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;div class=&quot;jarson-blog&quot;&gt;</span><br><span class="line">    &lt;p style=&quot;margin-bottom: 8px&quot;&gt;欢迎访问我的个人博客，效果更佳哟！&lt;/p&gt;</span><br><span class="line">    &lt;a style=&quot;color: #f90; font-size: 20px;&quot; target=&quot;_blank&quot; href=&quot;https://94275.cn/&quot;&gt;https://94275.cn&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>最后点击保存，然后你就能看到右下角的悬浮容器了。其实超级简单。</p><p><br>本文地址 <a href="http://94275.cn/2016/10/21/DIY-cnblogs-styles/">http://94275.cn/2016/10/21/DIY-cnblogs-styles/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> cnblogs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo Seo优化之为你的首页添加关键字]]></title>
      <url>http://94275.cn/2016/10/12/SEO-keywords/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>创建自己的博客一段时间了，断断续续也写了一些文章，但是发现谷歌和百度都搜索不出来。没钱买关键字的我，只好自己摸索，做一些 SEO 优化的事情，让自己的博客能被搜索引擎搜索到，最终提高博客的访问量。</p><a id="more"></a><p>根据网上的 SEO 资料，给自己的博客做了一些优化之后，发现百度和谷歌都能搜索到了，但是我的主页被搜索出来的关键字很少，而且换成拼音就搜索不到了。鉴于这种情况，我开始了对 Hexo 博客的 jacman 主题的优化。</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><ol><li>首页 head 标签中没有 keywords 关键字</li><li>博客文章页面的关键字直有文章相关的关键字，没有网站的关键字</li></ol><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="一-配置关键字"><a href="#一-配置关键字" class="headerlink" title="一. 配置关键字"></a>一. 配置关键字</h4><p>为了引用和修改方便，在博客根目录下 _config.yml 添加 keywords，并添加网站的关键字 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 爱红旗渠</span><br><span class="line">subtitle: Stay hungry, stay foolish.</span><br><span class="line">description: 爱红旗渠，红旗渠的儿女们。脚踏实地的技术博客。</span><br><span class="line">author: Jin</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone:</span><br><span class="line">keywords: 爱红旗渠, ihongqiqu, ihongqiqu.com, 我爱红旗渠, hongqiqu, aihongqiqu, 红旗渠</span><br></pre></td></tr></table></figure><h4 id="二-添加关键字"><a href="#二-添加关键字" class="headerlink" title="二. 添加关键字"></a>二. 添加关键字</h4><p>打开 theme/jacman/layout/_partial 下的 head.ejs 文件，将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (page.keywords)&#123; %&gt;&lt;meta name=&quot;keywords&quot; content=&quot;&lt;%= page.keywords %&gt;&quot;&gt;&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (page.keywords)&#123; %&gt;&lt;meta name=&quot;keywords&quot; content=&quot;&lt;%= page.keywords %&gt;, &lt;%= config.keywords %&gt;&quot;&gt;&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% if (!page.keywords)&#123; %&gt;&lt;meta name=&quot;keywords&quot; content=&quot;&lt;%= config.keywords %&gt;&quot;&gt;&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>第一行代码是在文章页面也添加博客的关键字；第二行是在首页添加关键字。</p><h4 id="三-验证"><a href="#三-验证" class="headerlink" title="三. 验证"></a>三. 验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -s</span><br></pre></td></tr></table></figure><p>之后在首页和文章页查看源码就可以看到我们的 keywords 出现了。</p><p><br>本文地址 <a href="http://94275.cn/2016/10/12/SEO-keywords/">http://94275.cn/2016/10/12/SEO-keywords/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Seo优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Seo优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[乌合之众文摘]]></title>
      <url>http://94275.cn/2016/10/06/psychologie-des-foules/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>之前阴差阳错的前看了《乌合之众》这跟书，这本书对我触动很大。这跟书对群体行为进行了分析和总结，很多观点令人耳目一新。推荐大家阅读。下面是我从《乌合之众》中摘出来我觉得不错的内容。</p><a id="more"></a><h2 id="文摘"><a href="#文摘" class="headerlink" title="文摘"></a>文摘</h2><blockquote><p>群体从来都不会怀有怜悯仁慈之心，但是她们却在骨子里对强权马首是瞻。对于作风温和的主子，她们从来都是不屑一顾；然而当遇到严厉剥削的暴君，他们往往会点头哈腰。</p></blockquote><p><br></p><blockquote><p>并不是一种观念只要经过了彻底的改造之后就能马上被群体所接受。这其中要经历许多漫长的过程，只有当它变成一种感情，也就是进入无意识领域才能被群体接受，才能对社会产生影响。</p></blockquote><p><br></p><blockquote><p>群体没有任何经过推理的批判精神。群体对任何事物的真伪都是无法辨别的，更不可能有正确的判断。</p></blockquote><p><br></p><blockquote><p>拿破仑在国会中说：”终止了旺代战争，就因为我改宗天主教；征服了埃及人，就因为我信了穆斯林；感召了意大利，是因为我信奉了教皇；当然如果我想征服犹太人，我肯定会去重修所罗门的神庙。”</p></blockquote><p><br></p><blockquote><p>影响民众想象力的，并不是事实本身，而是他们发生和引起注意的形式。</p></blockquote><p><br></p><blockquote><p>群体从不推理，他对基本观念只会机械性地简单接受或是拒绝；对于那些影响他的暗示，他会全盘接受或彻底被征服，并立即付诸行动。群体还易受到某种影响力或暗示的操控，只要对群体稍加影响，他就会为了实现这一理想而甘愿冒着牺牲生命的危险。群体的情绪狂躁而极端，丝毫没有同情心，有时甚至将某种盲目的崇拜变成无端的仇恨。</p></blockquote><p><br></p><blockquote><p>一切宗教或政治信条的创立者之所有能够立住脚，皆因为他成功地激起了群众想入非非的感情，他们使群众在崇拜和服从中找到了自己的幸福，随时准备为自己的偶像赴汤蹈火。</p></blockquote><p><br></p><blockquote><p>从历史的角度上来讲，是历史和时代创造了制度和政府，而并非后者决定前者。</p></blockquote><p><br></p><blockquote><p>学习是一个自我求真的过程，而不是靠着某种强加的力或者诱惑而发展、实行的。</p></blockquote><p><br></p><blockquote><p>在群体的灵魂中，当奴才的愿望要远远超过对自由的渴望。他们已经习惯了服从，不管谁是主子，他们都会自觉地卑躬屈膝。</p></blockquote><p><br></p><blockquote><p>让某种观念进入群众头脑最有效的方法之一就是做出简洁有力地断言，不在意任何推理和证据。只有那些坚持不变而且重复的断言才能产生真正的影响。</p></blockquote><p><br></p><blockquote><p>种族精神太过于强大了，群体的性格与之相比只能居于次要地位。</p></blockquote><hr><p>说实话某些观点真的挺震撼的，群体心理真是一种奇妙的东西！</p><p><br>本文地址 <a href="http://94275.cn/2016/10/06/psychologie-des-foules/">http://94275.cn/2016/10/06/psychologie-des-foules/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[影响力概要]]></title>
      <url>http://94275.cn/2016/10/06/read-influence/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>影响力强的人使用上千种策略让人顺从，可绝大部分的策略可分为六个基本类型。《影响力》这个数内容就围绕着这六大原则展开。</p><p>影响力六原则分别是：互惠、承诺和一致、社会认同、喜好、权威、稀缺。💥 每个原则都能使人禅师出不同的自动和无意识的顺从。</p><a id="more"></a><h2 id="互惠"><a href="#互惠" class="headerlink" title="互惠"></a>互惠</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>没一笔债都还得干干净净，就好像上帝他老人家是债主。</p></blockquote><blockquote><p>吃了人家的嘴软，拿了人家的手短。</p></blockquote><p>互惠原理其实就是要是人家给了我们什么好处，我们应当尽量回报。互惠原理可能导致我们贪小便宜吃大亏。</p><h3 id="如何拒绝"><a href="#如何拒绝" class="headerlink" title="如何拒绝"></a>如何拒绝</h3><p>拒绝请求着最初的善意或让步。不贪图小便宜。</p><h2 id="承诺和一致"><a href="#承诺和一致" class="headerlink" title="承诺和一致"></a>承诺和一致</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>承诺和一致就是一种要与我们过去所作所为保持一致的愿望。</p><h3 id="如何拒绝-1"><a href="#如何拒绝-1" class="headerlink" title="如何拒绝"></a>如何拒绝</h3><p>要对抗承诺和一致性原理这个强大的影响力武器，唯一有效的防御措施就是一种思想上的觉悟：尽管保持一致一般而言是好的，甚至十分关键，我们必须避免愚蠢的死脑筋。我们必须警惕不假思索自动保持一致的反应，因为有些耍花招的人正想利用它牟利呢！</p><h2 id="社会认同"><a href="#社会认同" class="headerlink" title="社会认同"></a>社会认同</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>在判断何为正确时，我们会根据别人的意见行事。这一原理尤其适用于我们对正确行为的判断，特定情形下在判断某一行为是否正确时，我们的看法取决于其他人时怎么做的。</p><h3 id="如何拒绝-2"><a href="#如何拒绝-2" class="headerlink" title="如何拒绝"></a>如何拒绝</h3><p>我们觉不应该完全信任社会认同这种“自动导航装置”，哪怕没有坏分子故意往里面添加错误信息，它自己有时候也会发生故障。我们需要不定时地检查这台机器，用该环境下的其它证据来源－客观事实、先前的经验、我们的判断与之比较，确保他没有出乱子。</p><h2 id="喜好"><a href="#喜好" class="headerlink" title="喜好"></a>喜好</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>研究表明，我们会自动给长得好看的人添加一些正面特点，而且我们做出这些判断的时候并没有意识到外表美丽在其中发挥的作用。</p><h3 id="如何拒绝-3"><a href="#如何拒绝-3" class="headerlink" title="如何拒绝"></a>如何拒绝</h3><p>把注意力放在效果而非成因上，多关注结果。</p><h2 id="权威"><a href="#权威" class="headerlink" title="权威"></a>权威</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>我们习惯服于从权威，甚至是代表权威的符号。</p><h3 id="如何拒绝-4"><a href="#如何拒绝-4" class="headerlink" title="如何拒绝"></a>如何拒绝</h3><p>为避免受权威地位的误导，防御策略之一就是做好心理准备，提高对权威力量的警惕性。</p><h2 id="稀缺"><a href="#稀缺" class="headerlink" title="稀缺"></a>稀缺</h2><h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h3><blockquote><p>物以稀为贵</p></blockquote><blockquote><p>不管是什么东西，只要你晓得会失去它，自然就会爱上它了。</p></blockquote><h3 id="如何拒绝-5"><a href="#如何拒绝-5" class="headerlink" title="如何拒绝"></a>如何拒绝</h3><p>不靠对整体形势做深思熟虑的认知分析，而是倾听来自内心的警告信号。一旦在顺从环境下体验到高涨的情绪，我们就应该提醒自己：说不定有人在玩弄稀缺手法，必须谨慎行事。</p><p>以上是我对这本书的概要笔记，这是一本很不错的书，建议阅读。</p><p><br>本文地址 <a href="http://94275.cn/2016/10/06/read-influence/">http://94275.cn/2016/10/06/read-influence/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> 影响力 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[收集需求的方法和工具]]></title>
      <url>http://94275.cn/2016/10/03/collect-requirements/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>项目前期需求收集过程的效果好坏，会对软件产品的最终质量产生直接的影响。从某种程度上来讲，需求收集工作的质量决定了产品的成败，因此我们必须加强对其的重视。</p><a id="more"></a><blockquote><p><strong>需求</strong>是指根据特定协议或其他强制性规范，项目必须满足的条件或能力，或者产品、服务或成果必须具备的条件或能力。需求是成本、进度和质量规划的基础，又是也是采购工作的基础。</p></blockquote><p>需求的重要性不必再多言，那么如何来收集需求呢？下面将介绍几大类需求收集方法。</p><h3 id="访谈"><a href="#访谈" class="headerlink" title="访谈"></a>访谈</h3><p>访谈经常是一个访谈者和一个被访者之间的”一对一”谈话，但也可以包括多个访谈者或多个被访者。这个我们经常看到，比如 CCTV 的《焦点访谈》。</p><h3 id="焦点小组"><a href="#焦点小组" class="headerlink" title="焦点小组"></a>焦点小组</h3><p>焦点小组是召集预定的干系人和主题专家，了解他们对所讨论的产品、服务或成果的期望和态度。由一位受过训练的主持人引导大家进行交互式讨论。这个方法大家肯定也见到过，对，就是婚恋节目《非常勿扰》。</p><h3 id="引导式研讨会"><a href="#引导式研讨会" class="headerlink" title="引导式研讨会"></a>引导式研讨会</h3><p>引导式研讨会把主要干系人召集在一起，通过集中讨论来定义产品需求，通过有效引导来达成一致意见，更快解决问题。例子，软件行业的”联合应用设计/开发(JAD)”和制造行业的”质量功能展开(QFD)”。</p><h3 id="群体创新技术"><a href="#群体创新技术" class="headerlink" title="群体创新技术"></a>群体创新技术</h3><p>通过组织群体活动来识别项目和产品需求。常见的方法有如下：</p><ol><li>头脑风暴法</li><li>名义小组技术</li><li>概念/思维导图</li><li>亲和图</li><li>多标准决策分析</li></ol><h3 id="群体决策技术"><a href="#群体决策技术" class="headerlink" title="群体决策技术"></a>群体决策技术</h3><p>群体决策技术就是为达成某种期望结果，而对多个未来行动方案进行评估的过程。达成群体决策的方法有如下：</p><ol><li>一致同意</li><li>大多数原则</li><li>相对多数原则</li><li>独裁</li></ol><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><p>问卷调查是指设计一系列书面问题，向众多受访者快速收集信息。这个我们在大街上经常碰到让帮忙参加问卷调查的活动。</p><h3 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h3><p>观察是指直接察看个人在各自的环境中如何执行工作和实施流程。</p><h3 id="原型法"><a href="#原型法" class="headerlink" title="原型法"></a>原型法</h3><p>原型法是指在实际制造预期产品之前，先造出该产品的实用模型，并据此征求对需求的早起反馈。我们常用的一种原型方法是故事板。在软件开发中常指 DEMO 。</p><h3 id="标杆对照"><a href="#标杆对照" class="headerlink" title="标杆对照"></a>标杆对照</h3><p>标杆对照将实际或计划的做法与其它可比组织的做法进行比较，一边识别最佳实践，形成改进意见，并为绩效考核提供依据。我们工作中做的竞品分析就是一种应用。这个方法腾讯公司应用的最多。</p><h3 id="系统交互图"><a href="#系统交互图" class="headerlink" title="系统交互图"></a>系统交互图</h3><p>系统交互图主要是通过对人与系统之间交互，通过输入输出将业务流程梳理出来。</p><h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><p>文件分析就是分析现有的文档，识别与需求相关的信息，来挖掘需求。</p><p><img src="/imgs/post/why_read_book.jpg" alt="why read book"></p><p><br>本文地址 <a href="http://94275.cn/2016/10/03/collect-requirements/">http://94275.cn/2016/10/03/collect-requirements/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 需求 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 收集需求 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何敏捷]]></title>
      <url>http://94275.cn/2016/10/01/about-agility/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>最近部门的项目进度老是延期，且 Bug 率总是很高，还有长时间的加班让作为开发的我们也很沮丧。</p><p>之前，我们总喊着敏捷的口号，可是实际上我们做的结果看上去不像是敏捷。故写此文来学习真正的敏捷。</p><a id="more"></a><h3 id="什么是敏捷"><a href="#什么是敏捷" class="headerlink" title="什么是敏捷"></a>什么是敏捷</h3><p>在认识敏捷之前不妨先来认识一下敏捷性：</p><blockquote><p>敏捷性(Agility)是指以微小增量的方式构建软件</p></blockquote><p>敏捷性着重体现的是<em>微小增量</em>。敏捷性是一个方法，作为敏捷方法中最著名的一个，我们很有必要在认识一下极限编程.</p><blockquote><p>极限编程(eXtreme Programming, 简称 XP)，它由一系列简单却互相依赖的实践组成，这些实践结合在一起形成了一个胜于部分结合的整体。</p></blockquote><h3 id="我们的问题"><a href="#我们的问题" class="headerlink" title="我们的问题"></a>我们的问题</h3><p>导致项目延期和 Bug 率高很大一方面原因是因为我们软件设计的<em>臭味</em>。针对如何判断我们的代码是否腐化，可判断是否符合一下情况的一条或几条：</p><ol><li>僵化性：很难对系统进行改进，因为每个改动都会迫使许多对系统其他的部分的其他改动</li><li>脆弱性：对系统的改动会导致系统中和改动的地方在概念上无关的许多地方出现问题</li><li>牢固性：很难解开系统的纠结，使之成为一些可在其他系统中重用的组件</li><li>粘滞性：做正确的事情比做错误的事情要困难</li><li>不必要的复杂性：设计中包含有不具任何直接好处的基础结构</li><li>不必要的重复：设计中包含有重复的结构，而该重复的结构本可以使用单一的抽象进行统一</li><li>晦涩性：很难阅读、理解。没有很好地表现出意图</li></ol><h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><p>遇到上述的问题，我们该如何去做呢？</p><ol><li>遵循敏捷实践去发现问题</li><li>应用设计原则去诊断问题</li><li><p>应用适当的设计模式去解决问题</p><p>上述三个步骤，说起来很容易，但是具体该如何做呢？当然是学习敏捷实践、设计原则和设计模式了。</p></li></ol><h4 id="敏捷实践"><a href="#敏捷实践" class="headerlink" title="敏捷实践"></a>敏捷实践</h4><p>敏捷宣言：(&gt; 是胜过的意思)</p><ol><li>个体和交互 &gt; 过程和工具</li><li>可以工作的软件 &gt; 面面具到的文档</li><li>客户合作 &gt; 合同谈判</li><li>相应变化 &gt; 遵循计划</li></ol><blockquote><p>直接迫切的需要并且意义重大时，才来编织文档。</p></blockquote><blockquote><p>Jack Reeves：实际上满足工程设计标准的唯一软件文档，就是源代码清单。</p></blockquote><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><p>软件设计五大原则有助于开发人员消除设计中的臭味，并为当前的特性集构建出最好的设计。这些原则如下：</p><h5 id="一-单一职责原则-SRP"><a href="#一-单一职责原则-SRP" class="headerlink" title="一. 单一职责原则(SRP)"></a>一. 单一职责原则(SRP)</h5><p>就一个类而言，应该仅有一个引起它变化的原因</p><h5 id="二-放开－封闭原则-OCP"><a href="#二-放开－封闭原则-OCP" class="headerlink" title="二. 放开－封闭原则(OCP)"></a>二. 放开－封闭原则(OCP)</h5><p>软件实体(类、模块、函数等等)应该是可以扩展的，但是不可修改的</p><h5 id="三-里氏替换原则-LSP"><a href="#三-里氏替换原则-LSP" class="headerlink" title="三. 里氏替换原则(LSP)"></a>三. 里氏替换原则(LSP)</h5><p>子类型必须能够替换掉它们的基类型</p><h5 id="四-依赖倒置原则-DIP"><a href="#四-依赖倒置原则-DIP" class="headerlink" title="四. 依赖倒置原则(DIP)"></a>四. 依赖倒置原则(DIP)</h5><ul><li>高层模块不应该依赖于低层模块。二者都应该依赖于抽象。</li><li>抽象不应该依赖于细节。细节应该依赖于抽象。</li></ul><h5 id="五-接口隔离原则-ISP"><a href="#五-接口隔离原则-ISP" class="headerlink" title="五. 接口隔离原则(ISP)"></a>五. 接口隔离原则(ISP)</h5><p>不应该强迫客户依赖于它们不用的方法。</p><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><p>关于设计模式，我之前有写过，传送门如下：</p><table><thead><tr><th style="text-align:center">创建型</th><th style="text-align:center">结构型</th><th style="text-align:center">行为型</th></tr></thead><tbody><tr><td style="text-align:center"><a href="/2014/11/21/factorymethodpattern/">工厂方法</a><br><a href="/2014/11/22/simplefactorypattern/">简单工厂</a><br><a href="/2014/11/24/abstractfactorypattern/">抽象工厂</a><br><a href="/2014/11/30/builderpattern/">建造者模式</a><br><a href="/2014/12/08/singletonpattern/">单例模式</a><br><a href="/2014/11/27/prototypepattern/">原型模式</a><br></td><td style="text-align:center"><a href="/2014/12/04/compositepattern/">组合模式</a><br><a href="/2014/11/29/facadepattern/">外观模式</a><br><a href="/2014/12/09/bridgepattern/">桥接模式</a><br><a href="/2014/11/25/proxypattern/">代理模式</a><br><a href="/2016/09/19/Flyweight-Pattern/">享元模式</a><br><a href="/2014/12/02/adapterpattern/">适配器模式</a><br><a href="/2014/11/20/design-pattern-decorator/">装饰模式</a><br></td><td style="text-align:center"><a href="/2014/11/23/strategypattern/">策略模式</a><br><a href="/2014/11/28/templatemethodpattern/">模板方法</a><br><a href="/2014/11/26/statepattern/">状态模式</a><br><a href="/2014/12/01/observerpattern/">观察者模式</a><br><a href="/2014/12/03/mementopattern/">备忘录模式</a><br><a href="/2014/12/05/iteratorpattern/">迭代器模式</a><br><a href="/2016/09/13/Command-Design-Pattern/">命令模式</a><br><a href="/2016/09/13/Chain-of-Responsibility/">职责链模式</a><br><a href="/2016/09/14/Interpreter-Pattern/">解释器模式</a><br><a href="/2016/09/20/Visitor-Pattern/">访问者模式</a><br><a href="/2016/09/18/Mediator-Pattern/">中介者模式</a><br></td></tr></tbody></table><p><br>本文地址 <a href="http://94275.cn/2016/10/01/about-agility/">http://94275.cn/2016/10/01/about-agility/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> 敏捷 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何开会]]></title>
      <url>http://94275.cn/2016/09/30/meeting/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>工作当中，我们经常要开会。会议时间太长和会议难以到达与会目的是我们常常遇到的问题。没有有效的开会技巧，我们很难控制会议进程，更难于达到与会目的。为此，经过各种找资料学习，整理出以下内容，愿能帮助更多开不好会的人，提高开会效率和工作效率。</p><a id="more"></a><h3 id="做好准备工作"><a href="#做好准备工作" class="headerlink" title="做好准备工作"></a>做好准备工作</h3><ol><li>调查情况</li><li>专业的表达你的提案</li><li>准备好应付反对意见</li></ol><h3 id="发言要言简意骇"><a href="#发言要言简意骇" class="headerlink" title="发言要言简意骇"></a>发言要言简意骇</h3><ol><li>要切中要害</li><li>不要偏离议程</li><li>无话可说，闭上嘴</li></ol><h3 id="保持冷静，彬彬有礼"><a href="#保持冷静，彬彬有礼" class="headerlink" title="保持冷静，彬彬有礼"></a>保持冷静，彬彬有礼</h3><ol><li>提出问题，而不是对质</li><li>表明你在倾听，尊重他人意见</li><li>承认自己的弱项，认可他人的强项</li></ol><h3 id="团结与会人员，控制争斗"><a href="#团结与会人员，控制争斗" class="headerlink" title="团结与会人员，控制争斗"></a>团结与会人员，控制争斗</h3><ol><li>让有关人员发泄情绪，保持中立</li><li>让其他成员一同参加讨论，用事实说话</li></ol><h3 id="集中与会人员的注意力"><a href="#集中与会人员的注意力" class="headerlink" title="集中与会人员的注意力"></a>集中与会人员的注意力</h3><ol><li>时刻保持警惕，警惕无关话题的出现</li><li>控制会议的方向，报注意力拉回来</li><li>检验理解的程度，确认理解状况</li><li>解释并核实，确保每个人都理解</li></ol><h3 id="鼓励与会人员"><a href="#鼓励与会人员" class="headerlink" title="鼓励与会人员"></a>鼓励与会人员</h3><ol><li>保护弱者，并让强者属于控制之下</li><li>征询每个与会人员的意见</li><li>把建议记录下来</li><li>构建决议</li></ol><h3 id="与会人员协调策略"><a href="#与会人员协调策略" class="headerlink" title="与会人员协调策略"></a>与会人员协调策略</h3><h4 id="对付唠叨型"><a href="#对付唠叨型" class="headerlink" title="对付唠叨型"></a>对付唠叨型</h4><ol><li>予以认可</li><li>掌握主动</li><li>不要粗鲁的打断</li></ol><h4 id="对付好战性"><a href="#对付好战性" class="headerlink" title="对付好战性"></a>对付好战性</h4><ol><li>尊重她们的权限</li><li>让她们回答问题</li></ol><h4 id="对付扼杀型"><a href="#对付扼杀型" class="headerlink" title="对付扼杀型"></a>对付扼杀型</h4><ol><li>让他们提出自己的想法</li><li>向它们施加压力</li><li>不断施压</li></ol><h4 id="对付强势型"><a href="#对付强势型" class="headerlink" title="对付强势型"></a>对付强势型</h4><ol><li>保持冷静并坚持自己的观点</li><li>针对论点进行回应</li><li>向会议主持人表明自己的观点</li><li>反复强调自己的观点，是对方进退维谷</li></ol><h4 id="对付干扰型"><a href="#对付干扰型" class="headerlink" title="对付干扰型"></a>对付干扰型</h4><ol><li>不予理睬</li><li>诉诸会议主持人</li><li>使用“三点”技巧（自己保持冷静；忽视干扰；向主持人申述）</li></ol><p><br>本文地址 <a href="http://94275.cn/2016/09/30/meeting/">http://94275.cn/2016/09/30/meeting/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> 开会 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[访问者模式]]></title>
      <url>http://94275.cn/2016/09/20/Visitor-Pattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>访问者模式(Visitor)，表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作“污染”这些对象的类，也不希望在增加新操作时修改这些类</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>使得新增新的访问操作变得更加简单</li><li>能够使得用户在不修改现有类的层次结构下，定义该类层次结构的操作</li><li>将有关元素对象的访问行为集中到一个访问者对象中，而不是分散搞一个个的元素类中</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>增加新的元素类很困难。在访问者模式中，每增加一个新的元素类都意味着要在抽象访问者角色中增加一个新的抽象操作，并在每一个具体访问者类中增加相应的具体操作，违背了“开闭原则”的要求</li><li>破坏封装。当采用访问者模式的时候，就会打破组合类的封装</li><li>比较难理解。貌似是最难的设计模式了</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/VisitorPattern.png" alt="Visitor Pattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitElementA</span><span class="params">(Element element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitElementB</span><span class="params">(Element element)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visitElementA(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitElementA</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        System.out.println(element.getClass().getSimpleName() + <span class="string">" 被 "</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" 访问"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitElementB</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        System.out.println(element.getClass().getSimpleName() + <span class="string">" 被 "</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" 访问"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Element&gt; elements = <span class="keyword">new</span> ArrayList&lt;Element&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        elements.add(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        elements.remove(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            element.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用<br>访问者模式(Visitor)，表示一个作用于某对象结构中的各元素的操作。<br>它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectStructure structure = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line">        structure.attach(<span class="keyword">new</span> ConcreteElementA());</span><br><span class="line">        structure.attach(<span class="keyword">new</span> ConcreteElementB());</span><br><span class="line"></span><br><span class="line">        Visitor visitor1 = <span class="keyword">new</span> ConcreteVisitor1();</span><br><span class="line">        Visitor visitor2 = <span class="keyword">new</span> ConcreteVisitor2();</span><br><span class="line"></span><br><span class="line">        structure.accept(visitor1);</span><br><span class="line">        structure.accept(visitor2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>本文地址 <a href="http://94275.cn/2016/09/20/Visitor-Pattern/">http://94275.cn/2016/09/20/Visitor-Pattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[享元模式]]></title>
      <url>http://94275.cn/2016/09/19/Flyweight-Pattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>享元模式(Flyweight)，运用共享技术有效地支持大量细粒度的对象。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>如果一个系统中存在大量的相同或者相似的对象，由于这类对象的大量使用，会造成系统内存的耗费，可以使用享元模式来减少系统中对象的数量。</li><li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>享元模式的优点在于它能够极大的减少系统中对象的个数</li><li>享元模式由于使用了外部状态，外部状态相对独立，不会影响到内部状态，所以享元模式使得享元对象能够在不同的环境被共享</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>由于享元模式需要区分外部状态和内部状态，使得应用程序在某种程度上来说更加复杂化了</li><li>为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/FlyweightPattern.png" alt="Flyweight Pattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>享元类的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体共享类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"具体Flyweight : "</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要共享的享元具体实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不共享的具体Flyweight : "</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>享元工厂，用来创建并管理Flyweight对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Flyweight&gt; flyweights = <span class="keyword">new</span> HashMap&lt;String, Flyweight&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlyweightFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyweights.put(<span class="string">"X"</span>, <span class="keyword">new</span> ConcreteFlyweight());</span><br><span class="line">        flyweights.put(<span class="string">"Y"</span>, <span class="keyword">new</span> ConcreteFlyweight());</span><br><span class="line">        flyweights.put(<span class="string">"Z"</span>, <span class="keyword">new</span> ConcreteFlyweight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flyweights.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        FlyweightFactory flyweightFactory = <span class="keyword">new</span> FlyweightFactory();</span><br><span class="line"></span><br><span class="line">        Flyweight fx = flyweightFactory.getFlyweight(<span class="string">"X"</span>);</span><br><span class="line">        fx.operation(--id);</span><br><span class="line"></span><br><span class="line">        Flyweight fy = flyweightFactory.getFlyweight(<span class="string">"Y"</span>);</span><br><span class="line">        fy.operation(--id);</span><br><span class="line"></span><br><span class="line">        Flyweight fz = flyweightFactory.getFlyweight(<span class="string">"Z"</span>);</span><br><span class="line">        fz.operation(--id);</span><br><span class="line"></span><br><span class="line">        UnsharedConcreteFlyweight unsharedConcreteFlyweight = <span class="keyword">new</span> UnsharedConcreteFlyweight();</span><br><span class="line">        unsharedConcreteFlyweight.operation(--id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>本文地址 <a href="http://94275.cn/2016/09/19/Flyweight-Pattern/">http://94275.cn/2016/09/19/Flyweight-Pattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中介者模式]]></title>
      <url>http://94275.cn/2016/09/18/Mediator-Pattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>中介者模式(Mediator), 用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>一组定义良好的对象，现在要进行复杂的通信。</li><li>定制一个分布在多个类中的行为，而又不想生成太多的子类。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>降低了系统对象之间的耦合性，使得对象易于独立的被复用。</li><li>提高系统的灵活性，使得系统易于扩展和维护。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>中介者模式的缺点是显而易见的，因为这个“中介“承担了较多的责任，所以一旦这个中介对象出现了问题，那么整个系统就会受到重大的影响。</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/MediatorPattern.png" alt="Mediator Pattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>抽象中介者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Colleague colleague, String message)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体中介者类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">implements</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConcreteColleague1 colleague1;</span><br><span class="line">    <span class="keyword">private</span> ConcreteColleague2 colleague2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleague1</span><span class="params">(ConcreteColleague1 colleague1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.colleague1 = colleague1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleague2</span><span class="params">(ConcreteColleague2 colleague2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.colleague2 = colleague2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Colleague colleague, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (colleague == colleague1) &#123;</span><br><span class="line">            colleague2.notify(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            colleague1.notify(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象同事类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体同事对象1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague1</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        mediator.send(<span class="keyword">this</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(getClass().getSimpleName() + <span class="string">" get message : "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体同事对象2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague2</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        mediator.send(<span class="keyword">this</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(getClass().getSimpleName() + <span class="string">" get message : "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用<br>中介者模式(Mediator)，用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地<br>相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConcreteMediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line"></span><br><span class="line">        ConcreteColleague1 colleague1 = <span class="keyword">new</span> ConcreteColleague1(mediator);</span><br><span class="line">        ConcreteColleague2 colleague2 = <span class="keyword">new</span> ConcreteColleague2(mediator);</span><br><span class="line"></span><br><span class="line">        mediator.setColleague1(colleague1);</span><br><span class="line">        mediator.setColleague2(colleague2);</span><br><span class="line"></span><br><span class="line">        colleague1.send(<span class="string">"吃饭了吗？"</span>);</span><br><span class="line">        colleague2.send(<span class="string">"没有呢，你要请客？"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>本文地址 <a href="http://94275.cn/2016/09/18/Mediator-Pattern/">http://94275.cn/2016/09/18/Mediator-Pattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代码洁癖]]></title>
      <url>http://94275.cn/2016/09/14/Code-Spec/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>在编程这一行干活，免不了被糟糕的代码绊倒。因为糟糕的代码，导致项目延期和进度缓慢。<strong><em> 架构和设计模式等致力于从“战略”的角度减少糟糕代码，代码规范则侧重于从“战术”的角度减少坏代码</em></strong></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>糟糕的代码随着时间的推移对成产力的影响：</p><p><img src="/imgs/post/BadCodeEffect.png" alt="糟糕的代码的影响"></p><p>之前有写过<a href="http://ihongqiqu.com/2016/01/14/android-project-style/" rel="external nofollow noopener noreferrer" target="_blank">Android 项目规范</a>，这次主要写一下编码的规范。以下内容从编码的角度列举了一些注意点。</p><h3 id="有意义的命名"><a href="#有意义的命名" class="headerlink" title="有意义的命名"></a>有意义的命名</h3><ol><li>名副其实</li><li>避免误导</li><li>做有意义的区分</li><li>使用读的出来的名称</li><li>避免使用编码</li><li>避免思维映射</li><li>每个概念对应一词</li><li>别用双关</li><li>使用可搜索的名称</li><li>类名应用名词</li><li>方法名应为动词或动词短语</li><li>别扮可爱</li><li>使用解决方案领域名称</li><li>使用源自所涉问题领域的名称</li><li>添加有意义的语境</li><li>不要添加没用的语境</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li>短小</li><li>只做一件事</li><li>switch 语句</li><li>使用描述性的名称</li><li>函数参数</li><li>无副作用</li><li>分隔指令与询问</li><li>使用异常替代返回错误</li><li>别重复自己</li><li>结构化编程</li><li>重构函数</li></ol><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ol><li>横向格式</li><li>像报纸学习</li><li>概念间垂直方向上的区隔</li><li>垂直方向上的靠近</li><li>垂直距离</li><li>垂直顺序</li><li>水平对齐</li><li>水平方向上的区隔与靠近</li><li>水平对齐</li><li>缩进</li><li>空范围</li><li>团队规则</li><li>Bob 大叔的格式规则</li></ol><h3 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a>对象和数据结构</h3><ol><li>数据、对象的反对对称性</li><li>数据传送对象</li><li>数据抽象</li><li>迪米特法则<ol><li>火车失事</li><li>混杂</li><li>隐藏结构</li></ol></li></ol><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><ol><li>使用异常而非返回码</li><li>先写 try-catch-finally 语句</li><li>使用不可控异常</li><li>给出异常发生的环境说明</li><li>依调用者需要定义异常类</li><li>定义常规流程</li><li>别返回 null 值</li><li>别传递 null 值</li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li>注释不能美化糟糕的代码</li><li>用代码来阐述</li><li>好注释<ol><li>法律信息</li><li>提供信息的注释</li><li>对意图的解释</li><li>阐释</li><li>警示</li><li>TODO 注释</li><li>放大</li><li>公共 API 中的 Javadoc</li></ol></li><li>坏注释<ol><li>喃喃自语</li><li>多余的注释</li><li>误导性的注释</li><li>循规式注释</li><li>日志式注释</li><li>废话注释</li><li>可怕的废话</li><li>能用函数或变量时就别用注释</li><li>位置标记</li><li>括号后面的注释</li><li>归属与署名</li><li>注释掉的代码</li><li>HTML 注释</li><li>非本地信息</li><li>信息过多</li><li>不明显的联系</li><li>函数头注释</li><li>非公共代码中的 Javadoc</li><li>范例</li></ol></li></ol><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="/imgs/post/CodeSpec.png" alt="代码规范思维导图"></p><p><br>本文地址 <a href="http://94275.cn/2016/09/14/Code-Spec/">http://94275.cn/2016/09/14/Code-Spec/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[解释器模式]]></title>
      <url>http://94275.cn/2016/09/14/Interpreter-Pattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>解释器模式(Interpreter), 给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>重复发生的问题可以使用解释器模式</li><li>一个简单语法需要解释的场景</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>可扩展性比较好，灵活</li><li>增加了新的解释表达式的方式</li><li>易于实现文法</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>执行效率比较低，可利用场景比较少</li><li>对于复杂的文法比较难维护</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/InterpreterPattern.png" alt="Interpreter Pattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>抽象表达式，声明一个抽象的解释操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interpret</span><span class="params">(Context context)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终结符表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">implements</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"终端解释器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非终结符表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonterminalExpression</span> <span class="keyword">implements</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"非终端解释器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含解释器之外的一些全局信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String input;</span><br><span class="line">    <span class="keyword">private</span> String output;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInput</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.input = input;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOutput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOutput</span><span class="params">(String output)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.output = output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用<br>解释器模式(Interpreter)，给定一个语言，定义它的文法的一种表示，并定义一个解释器，<br>这个解释器使用该表示来解释语言中的句子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;AbstractExpression&gt; list = <span class="keyword">new</span> ArrayList&lt;AbstractExpression&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> TerminalExpression());</span><br><span class="line">        list.add(<span class="keyword">new</span> NonterminalExpression());</span><br><span class="line">        list.add(<span class="keyword">new</span> TerminalExpression());</span><br><span class="line">        list.add(<span class="keyword">new</span> NonterminalExpression());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (AbstractExpression expression : list) &#123;</span><br><span class="line">            expression.interpret(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>本文地址 <a href="http://94275.cn/2016/09/14/Interpreter-Pattern/">http://94275.cn/2016/09/14/Interpreter-Pattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[职责链模式]]></title>
      <url>http://94275.cn/2016/09/13/Chain-of-Responsibility/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>职责链模式(Chain of Responsibility)：使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到又一个对象处理它为止。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定</li><li>在不明确指定接收者的情况下，向多个对象中的一个提交一个请求</li><li>可动态指定一组对象处理请求</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>降低耦合度</li><li>可简化对象的相互连接</li><li>增强给对象指派职责的灵活性</li><li>增加新的请求处理类很方便</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>不能保证请求一定被接收</li><li>系统性能将受到一定影响，而且在进行代码调试时不太方便；可能会造成循环调用</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/ChainOfResponsibilityPattern.png" alt="Chain Of Responsibility Pattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>定义一个处理请求的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Handler successor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(<span class="keyword">int</span> request)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体处理者类1<br>当请求数在0到10之间则有权处理，否则转到下一位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request &gt;= <span class="number">0</span> &amp;&amp; request &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(getClass().getSimpleName() + <span class="string">" 处理请求 "</span> + request);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            successor.handlerRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体处理者者2<br>当请求数在10到20之间则有权处理，否则转到下一位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request &gt;= <span class="number">10</span> &amp;&amp; request &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            System.out.println(getClass().getSimpleName() + <span class="string">" 处理请求 "</span> + request);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            successor.handlerRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体处理者者3<br>当请求数在20到30之间则有权处理，否则转到下一位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler3</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request &gt;= <span class="number">20</span> &amp;&amp; request &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(getClass().getSimpleName() + <span class="string">" 处理请求 "</span> + request);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            successor.handlerRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用<br>职责链模式(Chain of Responsibility)，使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Handler handler1 = <span class="keyword">new</span> ConcreteHandler1();</span><br><span class="line">        Handler handler2 = <span class="keyword">new</span> ConcreteHandler2();</span><br><span class="line">        Handler handler3 = <span class="keyword">new</span> ConcreteHandler3();</span><br><span class="line">        handler1.setSuccessor(handler2);</span><br><span class="line">        handler2.setSuccessor(handler3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] requests = &#123;<span class="number">2</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">10</span>, <span class="number">20</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> request : requests) &#123;</span><br><span class="line">            handler1.handlerRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>本文地址 <a href="http://94275.cn/2016/09/13/Chain-of-Responsibility/">http://94275.cn/2016/09/13/Chain-of-Responsibility/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[命令模式]]></title>
      <url>http://94275.cn/2016/09/13/Command-Design-Pattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>命令模式(Command)，将一个请求封装成一个对象，从而使你可用不同的请求对客户进行参数化；对请求队列或记录请求日志，以及支持可撤销的操作。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>对于大多数请求响应模式的功能，比较适合使用命令模式，命令模式对实现记录日志、撤销操作等功能比较方便。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>它能容易地设计一个命令队列；</li><li>在需要的情况下，可以较容易地将命令记入日志；</li><li>允许接受请求的一方决定是否要否决请求；</li><li>可以容易地实现对请求的撤销和重做；</li><li>由于加进新的具体命令类不影响其他的类，因此增加新的具体命令类很容易。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>增加系统的复杂性，这里的复杂性应该主要指的是类的数量</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/CommandPatternUML.png" alt="DecoratorPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>接受者，知道如何实施与执行一个与请求相关的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令抽象类，用来声明执行操作的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Command</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令实现类，将一个抽象者对象绑定于一个动作，调用接受者响应的操作，以实现Execute</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(receiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求命令执行这个请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用</p><p>命令模式(Command)，将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求队列或记录请求日志，以及支持可撤销的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        Command command = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        invoker.setCommand(command);</span><br><span class="line">        invoker.executeCommand();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>本文地址 <a href="http://94275.cn/2016/09/13/Command-Design-Pattern/">http://94275.cn/2016/09/13/Command-Design-Pattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[科学上网之 Host 篇]]></title>
      <url>http://94275.cn/2016/05/06/Fxck-GFW/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>身为 <em>挨踢</em> 从业人员，职业和科学所需，<em>局域网</em> 内资源无法满足需求，特书此文，望他人少走弯路。本问所采用的方法最大的优点是 <strong>免费科学上网</strong>！</p><a id="more"></a><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文讲解通过利用工具自动修改 Hosts 来实现科学上网。适用于 Windows 和 Mac 系统。本文讲解采用 Mac 环境。</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="安装-SwitchHosts"><a href="#安装-SwitchHosts" class="headerlink" title="安装 SwitchHosts"></a>安装 SwitchHosts</h3><p>下载 SwitchHosts 并安装，安装步骤省略。</p><p><strong>下载地址：</strong></p><ul><li>Windows 下载地址 <a href="http://pan.baidu.com/s/1kVJCeP5" rel="external nofollow noopener noreferrer" target="_blank">http://pan.baidu.com/s/1kVJCeP5</a></li><li>Mac 下载地址 <a href="http://pan.baidu.com/s/1mh628is" rel="external nofollow noopener noreferrer" target="_blank">http://pan.baidu.com/s/1mh628is</a></li></ul><p><strong>相关地址：</strong></p><ul><li>SwitchHost官网 <a href="https://oldj.github.io/SwitchHosts/" rel="external nofollow noopener noreferrer" target="_blank">https://oldj.github.io/SwitchHosts/</a></li><li>SwitchHost源码 <a href="https://github.com/oldj/SwitchHosts" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/oldj/SwitchHosts</a></li></ul><h3 id="寻找在线-Hosts"><a href="#寻找在线-Hosts" class="headerlink" title="寻找在线 Hosts"></a>寻找在线 Hosts</h3><p>搜索在线 Hosts ，在无法使用 <a href="http://www.google.com" rel="external nofollow noopener noreferrer" target="_blank">Google</a> 搜索之前，推荐使用 <a href="http://www.bing.com" rel="external nofollow noopener noreferrer" target="_blank">Bing</a> 搜索。</p><p>这里给大家推荐几个 <a href="http://github.com" rel="external nofollow noopener noreferrer" target="_blank">Github</a> 上在线 Hosts 地址：</p><ul><li><a href="https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts" rel="external nofollow noopener noreferrer" target="_blank">https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts</a></li><li><a href="https://raw.githubusercontent.com/racaljk/hosts/master/hosts" rel="external nofollow noopener noreferrer" target="_blank">https://raw.githubusercontent.com/racaljk/hosts/master/hosts</a></li><li><a href="https://raw.githubusercontent.com/txthinking/google-hosts/master/hosts" rel="external nofollow noopener noreferrer" target="_blank">https://raw.githubusercontent.com/txthinking/google-hosts/master/hosts</a></li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>设置方法主要有以下几个步骤:</strong></p><ol><li>打开 SwitchHosts</li><li>点击左下角 ＋ 号按钮</li><li>在弹出的窗口中选择 remote</li><li>在 Host title 中填写一个 title</li><li>在 URL 中填写在线的 Hosts 地址</li><li>在 Auto refresh 中推荐选择 1 day</li><li>点击 OK</li><li>在 SwitchHosts 面板左侧选中之前设置的 Host title</li><li>点击 Host title 右侧的开关</li><li>在授权弹窗的输入框中填写电脑的 root 权限的秘密(更改 Hosts 是需要系统权限的)</li><li>当看到刚才的开关变为绿色，恭喜你！大功告成了！</li></ol><p><br></p><p><em>最后附上一张讽刺漫画：</em></p><p><img src="/imgs/post/zxszylcd.jpg" alt="真相是这样炼成的"></p><p><br>本文地址 <a href="http://94275.cn/2016/05/06/Fxck-GFW/">http://94275.cn/2016/05/06/Fxck-GFW/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[说服他人的技巧]]></title>
      <url>http://94275.cn/2016/04/12/Persuade/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>通过学习说服他人的技巧，你将能够：</p><ul><li>学会倾听的艺术；</li><li>认识到尊重对方的重要性；</li><li>树立就事论事的观点；</li><li>学会如何以平和的心态沟通。</li></ul><a id="more"></a><h2 id="一-从对方感兴趣的话题谈起"><a href="#一-从对方感兴趣的话题谈起" class="headerlink" title="一.从对方感兴趣的话题谈起"></a>一.从对方感兴趣的话题谈起</h2><p>沟通时最忌讳谈话内容总是围绕自己，让对方没有参与感，沟通就无法彻底展开。如果从对方感兴趣的话题入手，找到共同语言，才能更好地说服对方。</p><h2 id="二-倾听时表示赞同"><a href="#二-倾听时表示赞同" class="headerlink" title="二.倾听时表示赞同"></a>二.倾听时表示赞同</h2><p>在对方讲话时，最好的回应是欣赏和赞同，这就需要倾听者保持微笑，不时点头，有经常性的目光接触。</p><h2 id="三-不要打断对方"><a href="#三-不要打断对方" class="headerlink" title="三.不要打断对方"></a>三.不要打断对方</h2><p>无论对方的见解多么荒谬，我们也不要立刻反驳，而是要耐心地听对方把话讲完。</p><h2 id="四-承认对方牢骚的价值"><a href="#四-承认对方牢骚的价值" class="headerlink" title="四.承认对方牢骚的价值"></a>四.承认对方牢骚的价值</h2><p>在某种意义上，对方的反对意见、不满和牢骚能给自己提供正面的经验和教训，因此承认对方的牢骚有一定的价值，能够使自己有所提高。</p><h2 id="五-用疑问或讨论的口气反馈"><a href="#五-用疑问或讨论的口气反馈" class="headerlink" title="五.用疑问或讨论的口气反馈"></a>五.用疑问或讨论的口气反馈</h2><p>如果不能接受对方的观点，也不要简单否定、直接指责，更不要讽刺挖苦，而是应该采用疑问或讨论的口气，要心平气和地进行讨论。</p><h2 id="六-批评要就事论事"><a href="#六-批评要就事论事" class="headerlink" title="六.批评要就事论事"></a>六.批评要就事论事</h2><p>在对方出现错误时，一定要就事论事，指出对方错在哪里，不要将错误上升到对人的否定评价，否则于解决问题毫无益处。</p><h2 id="七-强调对方的提案"><a href="#七-强调对方的提案" class="headerlink" title="七.强调对方的提案"></a>七.强调对方的提案</h2><p>不赞成对方的提案时，不能简单地否定了之，最好的办法是指出这个提案的好处所在，先肯定对方，然后再提出更适合的提案。</p><p><br></p><p><em>最后附上本人拍摄的一张照片：</em></p><p><img src="/imgs/art/my_green_one.jpg" alt="一丝绿意"></p><p><br>本文地址 <a href="http://94275.cn/2016/04/12/Persuade/">http://94275.cn/2016/04/12/Persuade/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> 说服他人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android N 支持多窗口的5个建议 [译]]]></title>
      <url>http://94275.cn/2016/04/06/Android-N-Multi-Window/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>如果你关注 Android N 的新特性，你可能已经发现 Android N 的新特性多窗口支持。</p><a id="more"></a><p><img src="/imgs/post/Andoid_N_Multi-window.png" alt="Android N Multi-window"></p><p>通过多窗口的支持，两个不同应用可以并列显示在屏幕上。很兴奋的直接查看文档，通过查看新的API来看看它事如何工作的。</p><p>查文档发现，添加了很多新的 API。主要事一些 XML 和 Activity 的一些方法。XML 设置是否支持多窗口。Activity 中的新的方法检测当前是否在多窗口模式下。所以魔性的地方在哪里呢？<strong>其实魔性一直都在 (The magic has been there all along.)</strong></p><p>多窗口功能最魔性的地方是<a href="http://developer.android.com/guide/topics/resources/overview.html?utm_campaign=adp_series_prepareformultiwindow_032316&amp;utm_source=medium&amp;utm_medium=blog" rel="external nofollow noopener noreferrer" target="_blank">资源系统</a>。资源系统最给力的功能是可以动态<a href="http://developer.android.com/guide/topics/resources/providing-resources.html?utm_campaign=adp_series_prepareformultiwindow_032316&amp;utm_source=medium&amp;utm_medium=blog#AlternativeResources" rel="external nofollow noopener noreferrer" target="_blank">调整资源</a>，比如 dimensions、layout、drawable、menu 以及其他基于不同屏幕的属性。</p><p><strong>多窗口利用资源系统根据屏幕大小调整配置的特性</strong>。屏幕尺寸是最明显的一个。其次还有屏幕大小改变时更新屏幕最小宽高和屏幕方向(Orientation)。</p><p>以下是兼容多窗口的五点建议：</p><h2 id="建议一：使用正确的Context"><a href="#建议一：使用正确的Context" class="headerlink" title="建议一：使用正确的Context"></a>建议一：使用正确的Context</h2><p>我们需要使用正确的 <a href="https://possiblemobile.com/2013/06/context/?utm_campaign=adp_series_prepareformultiwindow_032316&amp;utm_source=medium&amp;utm_medium=blog" rel="external nofollow noopener noreferrer" target="_blank">Context</a> 来加载资源。如果你使用Activity的context来infalt你的layout和检索资源等等，恭喜你，这个你做的很好。</p><p>但是，如果你使用 Application 的 context 处理任何 UI 的事情，你会发现针对多窗口它们都失效了。更严重的是，如果你不使用 Activity 的主题，你会发现家在完全错误的资源！最好办法是保证你的 UI 相关操作使用 Activity 的 context。</p><h2 id="建议二：正确处理状态改变"><a href="#建议二：正确处理状态改变" class="headerlink" title="建议二：正确处理状态改变"></a>建议二：正确处理状态改变</h2><p>通过使用正确的 context，你可以获取到针对不同屏幕尺寸的争取的资源。对资源的重新加载基于对<a href="http://developer.android.com/guide/topics/resources/runtime-changes.html?utm_campaign=adp_series_prepareformultiwindow_032316&amp;utm_source=medium&amp;utm_medium=blog" rel="external nofollow noopener noreferrer" target="_blank">运行时屏幕状态改变的处理</a>。</p><p>最基本的处理是 activity 的销毁和重建，恢复你保存在 onSaveInstanceState() 中的状态，重新加载资源和布局。This has the nice property that you know everything is consistent with the new configuration and that every type of configuration is handled.</p><p><strong>任何配置的改变应该是快速和无缝的</strong>。需要保证没有在 onResume() 中处理耗时操作。考虑使用 <a href="https://medium.com/google-developers/making-loading-data-on-android-lifecycle-aware-897e12760832#.q3l5puxt3" rel="external nofollow noopener noreferrer" target="_blank">loaders</a> 来保证数据支持配置的改变。</p><p>在 Activity (Fragment) 中不要直接销毁和重建， 你应该在配置改变回调 onConfigurationChanged() 中手动更新 view 和加载资源等等。</p><p>想要获取多窗口配置改变，你需要在 Manifest 中添加 <code>android:configChanges</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">  android:name=&quot;.MyActivity&quot;</span><br><span class="line">  android:configChanges=&quot;screenSize|smallestScreenSize</span><br><span class="line">      |screenLayout|orientation&quot; </span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>确保你处理了可能个需要改变的任何的资源。</p><p>重新加载资源可能包括之前加载的一些常量。尤其要考虑 values 和 values-sw600dp 这两种下面的 dimiension 。在不支持多窗口的时候，你从来不需要在运行时切换这两种 values，因为最小宽高是不会改变的。但是，在支持多窗口的环境下，当你的 app 的窗口尺寸发生改变，你必须要切换加载不同的资源文件。</p><h2 id="建议三：处理多方向"><a href="#建议三：处理多方向" class="headerlink" title="建议三：处理多方向"></a>建议三：处理多方向</h2><p>是否还记得我们在屏幕大小发生改变的时候关于 Orientation 的介绍？<strong>即使设备在横屏状态，你的应用也需要处理竖屏的情况。</strong></p><p>事实证明： protrait 状态只是高比宽大，landscape 状态是宽比高大。通过这两个定义，可以推测出当应用窗口尺寸发生该案时，你的应用可能从一种状态切换到另外一种状态。</p><p>这同样意味着，在 orientation 各状态之间转换需要尽量平滑。下面直接应用<a href="https://www.google.com/design/spec/layout/split-screen.html?utm_campaign=adp_series_prepareformultiwindow_032316&amp;utm_source=medium&amp;utm_medium=blog#split-screen-layout" rel="external nofollow noopener noreferrer" target="_blank">材料设置对分屏的描述</a>：</p><p>Changing a device’s orientation should not cause the UI to change unexpectedly. For example, an app displaying a video in one of the split screens (in portrait mode) should not begin playback in full-screen if the device rotates to landscape mode.</p><blockquote><p>⚠️注意:如果你仍然想要使用全屏的一些特性，你需要调用 inMultiWindowMode() 方法来检查当前在那种状态。</p></blockquote><p>使用 <code>android:screenOrientation</code> 锁定屏幕方向仍然会影响多窗口。<strong>如果你应用中设置目标版本不是 Android N ，这时设置 <code>android:screenOrientation</code> 意味着你的应用不支持多窗口。这也意味着强制用户使用非多窗口模式。</strong>相反，如果你设置目标版本支持 Android N ，那么在多窗口模式下，你设置的 <code>android:screenOrientation</code> 是不起作用的。</p><p>在 Android N 的机器上，不管你是否设置目标版本为 N ，通过使用 <code>setRequestedOrientation()</code> 在运行时锁定 Orientation 是没有效果的。</p><blockquote><p><strong>通过在 Manifest 中设置 Activity 的 <code>android:immersive</code> 属性来禁用多窗口，规则和上面 <code>android:screenOrientation</code> 一样。</strong></p></blockquote><h2 id="建议四：建立基于支持各种屏幕尺寸的响应式UI"><a href="#建议四：建立基于支持各种屏幕尺寸的响应式UI" class="headerlink" title="建议四：建立基于支持各种屏幕尺寸的响应式UI"></a>建议四：建立基于支持各种屏幕尺寸的响应式UI</h2><p><a href="https://www.google.com/design/spec/layout/split-screen.html?utm_campaign=adp_series_prepareformultiwindow_032316&amp;utm_source=medium&amp;utm_medium=blog#split-screen-layout" rel="external nofollow noopener noreferrer" target="_blank">支持多窗口的设计</a>不只有 Orientation 。多窗口肯定最新被应用在平板上。</p><p>如果你的应用是基于响应式 UI ，且在平板和手机上显示效果相似，那么你会发现你已经准备好了对多窗口特性的支持。<strong>建议你现在能做的是支持从 220dp 到屏幕全尺寸。</strong> 附原文: <strong>As suggested, scaling the UI down to 220dp wide/tall and building up from that size to the fullscreen size is a something you can do now.</strong></p><p><img src="/imgs/post/different_screen_size.png" alt="Building a single responsive layout makes for smooth transitions as your app resizes"></p><p>但是，如果你的手机版本和平板版本的 UI 差距很大，不要强制用户选择其一。最好支持平板 UI 的缩放。为了确保屏幕尺寸改变的用户体验平滑和流畅，你可以考虑是用<a href="https://www.google.com/design/spec/layout/responsive-ui.html?utm_campaign=adp_series_prepareformultiwindow_032316&amp;utm_source=medium&amp;utm_medium=blog#responsive-ui-patterns" rel="external nofollow noopener noreferrer" target="_blank">响应式 UI 模式</a>。</p><h2 id="建议五：被其他应用打开的-Activity-必须支持多窗口"><a href="#建议五：被其他应用打开的-Activity-必须支持多窗口" class="headerlink" title="建议五：被其他应用打开的 Activity 必须支持多窗口"></a>建议五：被其他应用打开的 Activity 必须支持多窗口</h2><p>在多窗口多的环境下，你的整个 task 被一个窗口代替。这也是为什么当你想要启动一个相邻的 Activity 的时候，你需要开启新的 task 和新的窗口。</p><p>反过来，如果你在一个 task 栈中启动一个 activity ，这个这个 activity 继承打开它的 activity 的所有的窗口的属性。应用原文如下：</p><p>If you launch an activity within a task stack, the activity replaces the activity on the screen, inheriting all of its multi-window properties.<br>​<br><strong>这就意味着，如果你有一个 activity 允许其他应用打开， 那么你的 activity 就会继承打开他的 activity 的所有多窗口的属性。</strong>包括最小的尺寸这个属性。当处理 startActivityForResult()，即使使用的隐式的 intent ，你不能保证你的 intent 包含 FLAG_ACTIVITY_NEW_TASK 属性，你的 activity 必须要在相同的 task 栈。</p><p>因此，你的所有的 activity 需要<strong>都支持</strong>多窗口，需要都支持各种尺寸。而且还都需要测试！</p><h2 id="终极建议：多测试"><a href="#终极建议：多测试" class="headerlink" title="终极建议：多测试"></a>终极建议：多测试</h2><p>支持多窗口最好的准备是<strong>测试你的应用</strong>。一种简单的办法是不改变你现有的代码，直接安装你现在的应用到 Android N 的设备或模拟器上，即可简单方便的获取应用现存的问题。</p><p>原文地址：<a href="https://medium.com/google-developers/5-tips-for-preparing-for-multi-window-in-android-n-7bed803dda64#.xxos0lhpn" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/google-developers/5-tips-for-preparing-for-multi-window-in-android-n-7bed803dda64#.xxos0lhpn</a></p><p><br>本文地址 <a href="http://94275.cn/2016/04/06/Android-N-Multi-Window/">http://94275.cn/2016/04/06/Android-N-Multi-Window/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Live template]]></title>
      <url>http://94275.cn/2016/03/24/Android-Studio-Live-Template/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><blockquote><p>工欲善其事 必先利其器</p></blockquote><blockquote><p>Writing More Code by Writing Less Code with Android Studio Live Templates.</p></blockquote><a id="more"></a><p>对于 Android 开发中常用的小的代码块，每次都写一遍既浪费时间而且多了容易出错。不用着急，这些问题老前辈们肯定也早已经遇到，IDE 给我提供 Live template 来提高我们的开发效率。</p><p>实现效果如图:<br><img src="/imgs/post/live_template.gif" alt="Live Template"></p><p>Android Studio 为我们提供了5类 Live template，分别是：</p><ol><li>Android 开发</li><li>Android 注释</li><li>Android Log</li><li>Android Parcelable</li><li>Android XML</li></ol><p>Live template 的位置：<code>File &gt; Settings &gt; Editor &gt; Live Templates</code></p><h2 id="Android-开发"><a href="#Android-开发" class="headerlink" title="Android 开发"></a>Android 开发</h2><table><thead><tr><th>前缀</th><th>含义</th></tr></thead><tbody><tr><td>const</td><td>Define android style int constant</td></tr><tr><td>fbc</td><td>findViewById with cast</td></tr><tr><td>foreach</td><td>Create a for each loop</td></tr><tr><td>gone</td><td>Set view visibility to GONE</td></tr><tr><td>IntentView</td><td>Creates an Intent with ACTION_VIEW</td></tr><tr><td>key</td><td>Key for a bundle</td></tr><tr><td>newInstance</td><td>create a new Fragment instance with arguments</td></tr><tr><td>noInstance</td><td>private empty constructor to prohibit instance creation</td></tr><tr><td>rgS</td><td>get a String from resources</td></tr><tr><td>rouiT</td><td>runOnUIThread</td></tr><tr><td>sbc</td><td>block comment for structuring code</td></tr><tr><td>Sfmt</td><td>String format</td></tr><tr><td>starter</td><td>Creates a static start(…) helper method to start an Activity</td></tr><tr><td>Toast</td><td>Create a new Toast</td></tr><tr><td>ViewConstructors</td><td>Adds generic view constructors</td></tr><tr><td>visible</td><td>Set view visibility to VISIBLE</td></tr><tr><td>wrapIt</td><td>adds a gradle wrapper task</td></tr></tbody></table><h2 id="Android-注释"><a href="#Android-注释" class="headerlink" title="Android 注释"></a>Android 注释</h2><table><thead><tr><th>前缀</th><th>含义</th></tr></thead><tbody><tr><td>ccode</td><td>code tag for javadoc</td></tr><tr><td>cfalse</td><td>puts false in a comment section</td></tr><tr><td>clink</td><td>link from within javadoc</td></tr><tr><td>ctrue</td><td>puts true in a comment section</td></tr><tr><td>fixme</td><td>adds // FIXME</td></tr><tr><td>noop</td><td>indicate that a method does not have any operations</td></tr><tr><td>stopship</td><td>adds // STOPSHIP</td></tr><tr><td>todo</td><td>adds // TODO</td></tr></tbody></table><h2 id="Android-Log"><a href="#Android-Log" class="headerlink" title="Android Log"></a>Android Log</h2><table><thead><tr><th>前缀</th><th>含义</th></tr></thead><tbody><tr><td>logd</td><td>Log.d(TAG, String)</td></tr><tr><td>loge</td><td>Log.e(TAG, String, Exception)</td></tr><tr><td>logi</td><td>Log.i(TAG, String)</td></tr><tr><td>logm</td><td>Log method name and its arguments</td></tr><tr><td>logr</td><td>Log result of this method</td></tr><tr><td>logt</td><td>A static logtag with your current classname</td></tr><tr><td>logw</td><td>Log.w(TAG, String, Exception)</td></tr><tr><td>wtf</td><td>Log.wtf(TAG, String, Exception)</td></tr></tbody></table><h2 id="Android-Parcelable"><a href="#Android-Parcelable" class="headerlink" title="Android Parcelable"></a>Android Parcelable</h2><table><thead><tr><th>前缀</th><th>含义</th></tr></thead><tbody><tr><td>Parcelable</td><td>Create a parcelable block for your current class</td></tr><tr><td>ParcelableEnum</td><td>Create a parcelable block for your current enum</td></tr><tr><td>ParcelableEnumTest</td><td>Creates basic parcelable enum test methods</td></tr><tr><td>ParcelBoolean</td><td>writes a single boolean value to a parcel</td></tr><tr><td>UnparcelBoolean</td><td>reads a single boolean value from a parcel</td></tr><tr><td>UnparcelIntArray</td><td>Unparcels an int array</td></tr><tr><td>UnparcelStringArray</td><td>Unparcels a String array</td></tr></tbody></table><h2 id="Android-XML"><a href="#Android-XML" class="headerlink" title="Android XML"></a>Android XML</h2><table><thead><tr><th>前缀</th><th>含义</th></tr></thead><tbody><tr><td>appNs</td><td>adds application namespace</td></tr><tr><td>lh</td><td>android:layout_height=&quot;&quot;</td></tr><tr><td>lhm</td><td>android:layout_height=&quot;match_parent&quot;</td></tr><tr><td>lhw</td><td>android:layout_height=&quot;wrap_content&quot;</td></tr><tr><td>lw</td><td>android:layout_width=&quot;&quot;</td></tr><tr><td>lwm</td><td>android:layout_width=&quot;match_parent&quot;</td></tr><tr><td>lww</td><td>android:layout_width=&quot;wrap_content&quot;</td></tr><tr><td>toolsNs</td><td>adds tools namespace to Android xml file</td></tr></tbody></table><p><br>本文地址 <a href="http://94275.cn/2016/03/24/Android-Studio-Live-Template/">http://94275.cn/2016/03/24/Android-Studio-Live-Template/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[DataBinding(下) - 表达式，IMPORT和INCLUDE]]></title>
      <url>http://94275.cn/2016/03/18/Android-DataBinding-Part-Three/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p><a href="http://ihongqiqu.com/2016/03/14/Android-DataBinding-Part-Two/" rel="external nofollow noopener noreferrer" target="_blank">前面</a>两篇文章介绍了 Android 官方 DataBinding 的使用，我们已经可以实现数据的和控件的绑定以及数据的实时更新和事件处理。本文将介绍 DataBinding 的一些其他的特性。</p><a id="more"></a><h2 id="IMPORT"><a href="#IMPORT" class="headerlink" title="IMPORT"></a>IMPORT</h2><h3 id="支持-import-功能，且支持别名"><a href="#支持-import-功能，且支持别名" class="headerlink" title="支持 import 功能，且支持别名"></a>支持 import 功能，且支持别名</h3><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.real.estate.View"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">alias</span>=<span class="string">"Vista"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="导入的类型还可以在表达式中使用-static-属性和方法"><a href="#导入的类型还可以在表达式中使用-static-属性和方法" class="headerlink" title="导入的类型还可以在表达式中使用 static 属性和方法"></a>导入的类型还可以在表达式中使用 static 属性和方法</h3><p>代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"com.example.MyStringUtils"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.example.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:text</span>=<span class="string">"@&#123;MyStringUtils.capitalize(user.lastName)&#125;"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>跟 Java 中一样，<code>java.lang.*</code>是自动导入的</p><h2 id="自定义-Binding-类名称"><a href="#自定义-Binding-类名称" class="headerlink" title="自定义 Binding 类名称"></a>自定义 Binding 类名称</h2><p>默认情况下，Binding 类的命名是基于所述 layout 文件的名称，用大写开头，除去下划线（）以及（）后的第一个字母大写，然后添加“Binding”后缀。这个类将被放置在一个模块封装包里的databinding封装包下。例如，所述 layout 文件 contact_item.xml 将生成 ContactItemBinding 。如果模块包是 com.example.my.app ，那么它将被放置在 com.example.my.app.databinding 。<br>Binding 类可通过调整 data 元素中的 class 属性来重命名或放置在不同的包中。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">"ContactItem"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在模块封装包的 databinding 包中会生成名为 ContactItem 的 Binding 类。如果要想让该类生成在不同的包种，你需要添加前缀.，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">".ContactItem"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个情况下，ContactItem 类直接在模块包种生成。或者你可以提供整个包名：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">"com.example.ContactItem"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Includes"><a href="#Includes" class="headerlink" title="Includes"></a>Includes</h2><p>通过使用 application namespace 以及在属性中的 Variable 名字从容器 layout 中传递 Variables 到一个被包含的 layout ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:bind</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.example.User"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/name"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">bind:user</span>=<span class="string">"@&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/contact"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">bind:user</span>=<span class="string">"@&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：在 name.xml 以及 contact.xml 两个 layout 文件中必需要有 user variable</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>表达式非常好用，能够很大程度上简化你的代码:</p><ul><li>数学 + - / * %</li><li>字符串连接 +</li><li>逻辑 &amp;&amp; ||</li><li>二进制 &amp; | ^</li><li>一元运算 + - ! ~</li><li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li><li>比较 == &gt; &lt; &gt;= &lt;=</li><li>instanceof</li><li>分组 ()</li><li>null</li><li>Cast</li><li>方法调用</li><li>数据访问 []</li><li>三元运算 ?:</li><li><p>?? 左边的对象如果它不是 null ，选择左边的对象；或者如果它是 null ，选择右边的对象</p><p>举个🌰:</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;String.valueOf(index + 1)&#125;"</span><br><span class="line">android:visibility="@&#123;age <span class="tag">&lt; <span class="attr">13</span> ? <span class="attr">View.GONE</span> <span class="attr">:</span> <span class="attr">View.VISIBLE</span>&#125;"</span></span><br><span class="line"><span class="tag"><span class="attr">android:transitionName</span>=<span class="string">'@&#123;"image_" + id&#125;'</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"@&#123;user.displayName ?? user.lastName&#125;"</span></span></span><br></pre></td></tr></table></figure><p>缺少的操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this super new 显式泛型调用</span><br></pre></td></tr></table></figure><p><strong>源码地址</strong>：<a href="https://github.com/jingle1267/DataDindingSample" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/DataDindingSample</a></p><p><strong>参考网址</strong>: 官方介绍<a href="http://developer.android.com/intl/zh-cn/tools/data-binding/guide.html" rel="external nofollow noopener noreferrer" target="_blank">Data Binding Guide</a></p><p><br>本文地址 <a href="http://94275.cn/2016/03/18/Android-DataBinding-Part-Three/">http://94275.cn/2016/03/18/Android-DataBinding-Part-Three/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android DataBinding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android DataBinding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DataBinding(中) - 事件绑定和数据更新]]></title>
      <url>http://94275.cn/2016/03/14/Android-DataBinding-Part-Two/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p><a href="http://ihongqiqu.com/2016/03/13/Android-DataBinding-Part-One/" rel="external nofollow noopener noreferrer" target="_blank">上文</a>实现控件和数据源的绑定，达到UI和业务逻辑分离，大大简化了代码，而且实现和解耦。本文讲主要讲解DataBinding事件的绑定和数据的实时更新。</p><a id="more"></a><h2 id="Android实现事件DataBinding步骤"><a href="#Android实现事件DataBinding步骤" class="headerlink" title="Android实现事件DataBinding步骤"></a>Android实现事件DataBinding步骤</h2><p><strong>下面内容需要参考之前文章(<a href="http://ihongqiqu.com/2016/03/13/Android-DataBinding-Part-One/" rel="external nofollow noopener noreferrer" target="_blank">传送门</a>)。需要了解环境配置，绑定步骤等方面。</strong></p><h3 id="一-实现事件处理类"><a href="#一-实现事件处理类" class="headerlink" title="一. 实现事件处理类"></a>一. 实现事件处理类</h3><p>编写事件处理类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlers</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onClickName</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(view.getContext(), <span class="string">"onClickName()"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onClickAge</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(view.getContext(), <span class="string">"onClickAge()"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-控件选择处理方法"><a href="#二-控件选择处理方法" class="headerlink" title="二. 控件选择处理方法"></a>二. 控件选择处理方法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"myHandlers"</span> <span class="attr">type</span>=<span class="string">"com.ihongqiqu.databinding.event.MyHandlers"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.ihongqiqu.databinding.data.User"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@&#123;user.name&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">"@&#123;myHandlers.onClickName&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:clickable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textAppearance</span>=<span class="string">"?android:attr/textAppearanceMedium"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"27dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@&#123;user.age&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">"@&#123;myHandlers.onClickAge&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:clickable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textAppearance</span>=<span class="string">"?android:attr/textAppearanceMedium"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三-实现控件和事件的绑定"><a href="#三-实现控件和事件的绑定" class="headerlink" title="三. 实现控件和事件的绑定"></a>三. 实现控件和事件的绑定</h3><p>Activityd的onCreate()方法添加绑定代码：</p><p><strong>这一步很重要，不实现这一步会导致事件无法出发。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setTitle(<span class="string">"事件绑定"</span>);</span><br><span class="line">    </span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"jingle1267"</span>, <span class="string">"20"</span>);</span><br><span class="line">    MyHandlers myHandlers = <span class="keyword">new</span> MyHandlers();</span><br><span class="line"></span><br><span class="line">    ActivityDataBindingSample2Binding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>,</span><br><span class="line">        R.layout.activity_data_binding_sample2);</span><br><span class="line">    binding.setUser(user);</span><br><span class="line">    binding.setMyHandlers(myHandlers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>👌OK，通过上述三个步骤就实现了事件的绑定！</p><h2 id="Android使用DataBinding更新数据"><a href="#Android使用DataBinding更新数据" class="headerlink" title="Android使用DataBinding更新数据"></a>Android使用DataBinding更新数据</h2><p>实现数据实时更新，需要在在之前的基础上，额外实现一部分操作。</p><p>POJO需要做一下修改，修改后如下，重点是<code>@Bindable</code>和<code>notifyPropertyChanged(BR.XXX);</code>，其中<code>BR.XXX</code>为对应需要更新的ID。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 猪，有标签和重量两个属性</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 3/13/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pig</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line">    <span class="keyword">private</span> String weight;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bindable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLabel</span><span class="params">(String label)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">        notifyPropertyChanged(BR.label);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bindable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(String weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">        notifyPropertyChanged(BR.weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件处理类需要调整如下(仅供参考)，代码中直接修改了实体的属性就实现了对UI的更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件处理</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 3/13/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    DataBindingSampleActivity3 sampleActivity3;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PigHandler</span><span class="params">(DataBindingSampleActivity3 sampleActivity3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sampleActivity3 = sampleActivity3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sampleActivity3 != <span class="keyword">null</span> &amp;&amp; sampleActivity3.pig != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sampleActivity3.pig.setLabel(<span class="string">"长白山"</span>);</span><br><span class="line">            sampleActivity3.pig.setWeight(<span class="string">"280Kg"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现上述几个步骤，我们已经能够处理事件和实现数据更新。</p><p><strong>源码地址</strong>：<a href="https://github.com/jingle1267/DataDindingSample" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/DataDindingSample</a></p><p><strong>参考网址</strong>: 官方介绍<a href="http://developer.android.com/intl/zh-cn/tools/data-binding/guide.html" rel="external nofollow noopener noreferrer" target="_blank">Data Binding Guide</a></p><p><br>本文地址 <a href="http://94275.cn/2016/03/14/Android-DataBinding-Part-Two/">http://94275.cn/2016/03/14/Android-DataBinding-Part-Two/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android DataBinding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android DataBinding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DataBinding(上) - 数据和控件绑定]]></title>
      <url>http://94275.cn/2016/03/13/Android-DataBinding-Part-One/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>Data Binding 解决了 Android UI 编程中的一个痛点，官方原生支持 MVVM 模型可以让我们在不改变既有代码框架的前提下，非常容易地使用这些新特性。Google 2015 IO大会中对于Android开发曾了Data Binding。</p><a id="more"></a><h2 id="Android实现数据DataBinding步骤"><a href="#Android实现数据DataBinding步骤" class="headerlink" title="Android实现数据DataBinding步骤"></a>Android实现数据DataBinding步骤</h2><h3 id="一-配置全局"><a href="#一-配置全局" class="headerlink" title="一. 配置全局"></a>一. 配置全局</h3><p>创建一个空的Project，并修改Project的build.gradle，为build script添加一条依赖，Gradle版本最低为1.5.0。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath 'com.android.tools.build:gradle:1.5.0'</span><br></pre></td></tr></table></figure><p>为用到Data Binding的模块添加插件，修改对应的build.gradle。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataBinding &#123;</span><br><span class="line">    enabled = true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-创建需要Binding的实体"><a href="#二-创建需要Binding的实体" class="headerlink" title="二. 创建需要Binding的实体"></a>二. 创建需要Binding的实体</h3><p>创建用户的实体<code>User</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-创建布局文件"><a href="#三-创建布局文件" class="headerlink" title="三. 创建布局文件"></a>三. 创建布局文件</h3><p>Activity的布局文件如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"user"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"com.ihongqiqu.databinding.data.User"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">"com.ihongqiqu.databinding.DataBindingSampleActivity1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@&#123;user.name&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textAppearance</span>=<span class="string">"?android:attr/textAppearanceMedium"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"27dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@&#123;user.age&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textAppearance</span>=<span class="string">"?android:attr/textAppearanceMedium"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四-实现数据绑定"><a href="#四-实现数据绑定" class="headerlink" title="四. 实现数据绑定"></a>四. 实现数据绑定</h3><p>Actvity的onCreate()方法实现数据绑定。</p><p>第一种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"jingle1267"</span>, <span class="string">"20"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种初始化方式</span></span><br><span class="line">ActivityDataBindingSample1Binding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>,</span><br><span class="line">    R.layout.activity_data_binding_sample1);</span><br><span class="line">binding.setUser(user);</span><br></pre></td></tr></table></figure><p>⚠️ 注意: 上面代码是<code>ActivityDataBindingSample1Binding</code>, 而不是我们的Activity： <code>DataBindingSample1BindingActivity</code></p><p>第二种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"jingle1267"</span>, <span class="string">"20"</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 第二种初始化方式</span></span><br><span class="line">ViewDataBinding binding1 = DataBindingUtil.setContentView(<span class="keyword">this</span>,</span><br><span class="line">    R.layout.activity_data_binding_sample1);</span><br><span class="line">binding1.setVariable(BR.user, user);</span><br></pre></td></tr></table></figure><p>实现上述步骤之后，编译运行，就可以看到用户名和年龄显示到对应的控件。</p><p><strong>源码地址</strong>：<a href="https://github.com/jingle1267/DataDindingSample" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/DataDindingSample</a></p><p><strong>参考网址</strong>: 官方介绍<a href="http://developer.android.com/intl/zh-cn/tools/data-binding/guide.html" rel="external nofollow noopener noreferrer" target="_blank">Data Binding Guide</a></p><p><br>本文地址 <a href="http://94275.cn/2016/03/13/Android-DataBinding-Part-One/">http://94275.cn/2016/03/13/Android-DataBinding-Part-One/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android DataBinding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android DataBinding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android项目规范]]></title>
      <url>http://94275.cn/2016/01/14/android-project-style/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>此文记录Android项目开发的一些基本规范。磨刀不误砍柴工。</p><a id="more"></a><h2 id="开发介绍"><a href="#开发介绍" class="headerlink" title="开发介绍"></a>开发介绍</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>项目结构如下：</p><ul><li>app Application Activity Fragment Presenter等的顶级父类</li><li>config API,常量表等</li><li>entities 数据模型</li><li>module 将界面层以功能模块分配包</li><li>utils 工具类集合</li><li>widget 各个可复用View集合</li></ul><h3 id="依赖库与SDK"><a href="#依赖库与SDK" class="headerlink" title="依赖库与SDK"></a>依赖库与SDK</h3><p>计划和正在引入的库包括：</p><ul><li>fresco——Android最屌图片加载库</li><li>okhttp 网络请求库</li><li>butterknife——View注解库和配套插件android-butterknife-zelezny</li><li>ormlite 数据库ORM工具</li><li>eventbus 事件处理库</li><li>pulltorefresh 上下拉刷新库</li><li>gson Json解析库</li></ul><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><p>为了避免合作开发写的代码风格迥异，特做以下规范：</p><p>activity和fragment命名，例</p><ul><li>所有Activity继承BaseActivity</li><li>所有Fragment继承BaseFragment</li></ul><p>layout命名，例</p><ul><li>activity_collection</li><li>fragment_account</li><li>item_person</li><li>include_toolbar</li><li>view_progress</li></ul><p>id命名，例</p><ul><li>btn_send</li><li>tv_name</li><li>list_persons</li><li><p>et_password</p><p>PS：然后用butterknife的插件生成变量会自动将下划线变成驼峰命名</p><p>上面主要介绍了一些项目规范，还有很重要的一点-编码风格，强烈建议采用<a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html" rel="external nofollow noopener noreferrer" target="_blank">Google Java Style</a>(<a href="http://www.cnblogs.com/rollenholt/p/3690432.html" target="_blank" rel="noopener">译文</a>)编码风格。</p></li></ul><p><br>本文地址 <a href="http://94275.cn/2016/01/14/android-project-style/">http://94275.cn/2016/01/14/android-project-style/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[5个最佳的Android测试框架[转]]]></title>
      <url>http://94275.cn/2016/01/08/Android-Test-Framework-comparison/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>谷歌的Android生态系统正在不断地迅速扩张。有证据表明，新的移动OEM正在攻陷世界的每一个角落，不同的屏幕尺寸、ROM /固件、芯片组以及等等等等，层出不穷。于是乎，对于Android开发人员而言，处理存储碎片变得越来越困窘。</p><a id="more"></a><p>不过幸运的是，Android（还有iOS）开发人员可以无限制地访问一些先进的基于云的解决方案，如Testdroid Cloud，就可以在大规模的真实设备上执行自动化测试以确保质量，赞吧。此外，不同的Android测试框架的出现也大大减轻了Android开发人员 的负担。</p><p>今天，我们就要说说5款最常用的Android测试框架，并且每个框架都给出了基本的代码示例。</p><h2 id="Robotium"><a href="#Robotium" class="headerlink" title="Robotium"></a>Robotium</h2><p>不可否认，Robotium曾是Android世界之初使用最广泛的Android测试框架，风靡一时。由于它与Android有着相似的Selenium，所以它能够使得API的测试变得简单起来。</p><p>Robotium是一个扩展于JUnit的开源库，运用多种有用的方法来支持Android UI测试。它提供的强大的自动化黑箱测试范例，可用于Android应用（原生的和混合的）和web测试。只要源代码允许，你就可以通过Robotium 写功能、系统和验收测试方案，以及测试应用。</p><p>Robotium的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Public void for the operation</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRecorded</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Wait for the text 'Hello!' to be shown for newbie</span></span><br><span class="line">    <span class="keyword">if</span> (solo.waitForText(<span class="string">"Hello!"</span>)) &#123;</span><br><span class="line">        <span class="comment">// R class ID identifier for 'Sign in' - and click it</span></span><br><span class="line">        solo.clickOnView(solo.findViewById(<span class="string">"com.twitter.android.R.id.sign_in"</span>));</span><br><span class="line">        <span class="comment">// R class ID identifier for entering username</span></span><br><span class="line">        solo.enterText((EditText) solo.findViewById(<span class="string">"com.twitter.android.R.id.login_username"</span>),<span class="string">"username"</span>);</span><br><span class="line">        <span class="comment">// R class ID identifier for entering password</span></span><br><span class="line">        solo.enterText((EditText) solo.findViewById(<span class="string">"com.twitter.android.R.id.login_password"</span>),<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">// R class ID identifier for clicking log in</span></span><br><span class="line">        solo.clickOnView(solo.findViewById(<span class="string">"com.twitter.android.R.id.login_login"</span>));</span><br><span class="line">        <span class="comment">// Wait until log in is done</span></span><br><span class="line">        solo.waitForActivity(<span class="string">"HomeTabActivity"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Activate the text field to compose a tweet</span></span><br><span class="line">    solo.clickOnView(solo.findViewById(<span class="string">"com.twitter.android.R.id.menu_compose_tweet"</span>));</span><br><span class="line">    <span class="comment">// Type the tweet</span></span><br><span class="line">    solo.enterText((EditText) solo.findViewById(<span class="string">"com.twitter.android.R.id.edit"</span>), <span class="string">"Testdroid"</span>);</span><br><span class="line">    <span class="comment">// Tweeting!</span></span><br><span class="line">    solo.clickOnView(solo.findViewById(<span class="string">"com.twitter.android.R.id.composer_post"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了给大家提供便捷，还有一个用Robotium构建的用于测试脚本创建的一个非常棒的记录工具——Testdroid Recorder。当你在真实设备上执行实际行动时，它可以记录你的每一个步骤和每一个行为，并转换成JavaScript，以便于你进一步的修改。</p><p>并且，你还可以全权下载和使用它的扩展库——ExtSolo，它里面包含了多种还没有被纳入到Robotium中的实用方法，例如：</p><ul><li>支持任意分辨率的x、Y点击自动缩放</li><li>多路径拖动</li><li>测试故障时自动截图</li><li>模拟地点</li><li>更改设备语言</li><li>控制WiFi连接</li></ul><p>官方网站：<a href="https://code.google.com/p/robotium/" rel="external nofollow noopener noreferrer" target="_blank">https://code.google.com/p/robotium/</a></p><h2 id="uiautomator"><a href="#uiautomator" class="headerlink" title="uiautomator"></a>uiautomator</h2><p>虽然Robotium是一个很好的测试框架，但是uiautomator能让你在测试Android应用和Android游戏时做得更多。谷歌的测 试框架允许你在一个或多个设备上测试原生Android应用的用户界面（UI）。Uiautomator的另一个优点是，它运行的JUnit测试用例是有 特殊权限的，这意味着测试用例可以跨越不同的进程。它还提供了五种不同的类给开发人员使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.android.uiautomator.core.UiCollection;</span><br><span class="line">com.android.uiautomator.core.UiDevice;</span><br><span class="line">com.android.uiautomator.core.UiObject;</span><br><span class="line">com.android.uiautomator.core.UiScrollable;</span><br><span class="line">com.android.uiautomator.core.UiSelector</span><br></pre></td></tr></table></figure><p>遗憾的是，uiautomator只能工作于API16或更高级别的Android设备上。它的另一个缺点是不支持web视图，也没有办法直接访问Android对象。</p><p>uiautomator的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Public void for the operation</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSignInAndTweet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Starting application:</span></span><br><span class="line">    getUiDevice().wakeUp(); </span><br><span class="line">    <span class="comment">// Press Home button to ensure we're on homescreen</span></span><br><span class="line">    getUiDevice().pressHome(); </span><br><span class="line">    <span class="comment">// Select 'Apps' and click button</span></span><br><span class="line">    <span class="keyword">new</span> UiObject(<span class="keyword">new</span> UiSelector().description(<span class="string">"Apps"</span>)).click(); </span><br><span class="line">    <span class="comment">// Select 'Twitter' and click</span></span><br><span class="line">    <span class="keyword">new</span> UiObject(<span class="keyword">new</span> UiSelector().text(<span class="string">"Twitter"</span>)).click(); </span><br><span class="line">    <span class="comment">// Locate and select 'Sign in'</span></span><br><span class="line">    UiSelector signIn = <span class="keyword">new</span> UiSelector().text(<span class="string">"Sign In"</span>); </span><br><span class="line">    <span class="comment">// If button is available, click</span></span><br><span class="line">    UiObject signInButton = <span class="keyword">new</span> UiObject(signIn);</span><br><span class="line">    <span class="keyword">if</span> (signInButton.exists()) &#123;</span><br><span class="line">        signInButton.click(); </span><br><span class="line">        <span class="comment">// Set the username</span></span><br><span class="line">        <span class="keyword">new</span> UiObject(<span class="keyword">new</span> UiSelector().className(<span class="string">"android.widget.EditText"</span>).instance(<span class="number">0</span>)).setText(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">new</span> UiObject(<span class="keyword">new</span> UiSelector().className(<span class="string">"android.widget.EditText"</span>).instance(<span class="number">1</span>)).setText(<span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">new</span> UiObject(<span class="keyword">new</span> UiSelector().className(<span class="string">"android.widget.Button"</span>).text(<span class="string">"Sign In"</span>).instance(<span class="number">0</span>)).click(); </span><br><span class="line">        <span class="comment">// Wait Sign in progress window</span></span><br><span class="line">        getUiDevice().waitForWindowUpdate(<span class="keyword">null</span>, <span class="number">2000</span>); </span><br><span class="line">        <span class="comment">// Wait for main window</span></span><br><span class="line">        getUiDevice().waitForWindowUpdate(<span class="keyword">null</span>, <span class="number">30000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> UiObject(<span class="keyword">new</span> UiSelector().description(<span class="string">"New tweet"</span>)).click(); </span><br><span class="line">    <span class="comment">// Typing text for a tweet</span></span><br><span class="line">    <span class="keyword">new</span> UiObject(<span class="keyword">new</span> UiSelector().className(<span class="string">"android.widget.LinearLayout"</span>).instance(<span class="number">8</span>)).</span><br><span class="line">    setText(<span class="string">"Awesome #Testdroid!"</span>); </span><br><span class="line">    <span class="comment">// Tweeting!</span></span><br><span class="line">    <span class="keyword">new</span> UiObject(<span class="keyword">new</span> UiSelector().text(<span class="string">"Tweet"</span>)).click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方网站：<a href="http://developer.android.com/tools/help/uiautomator/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://developer.android.com/tools/help/uiautomator/index.html</a></p><h2 id="Espresso"><a href="#Espresso" class="headerlink" title="Espresso"></a>Espresso</h2><p>Espresso是由Google开源的一款最新的Android自动化测试框架，有助于于开发人员和测试人员锤炼出中意的用户界面。 Espresso的API体积小、可预见、简单易学，构建在Android仪表框架的基础上。使用它，能让你快速编写出简洁可靠的Android UI测试。它支持API level 8级（Froyo）、10（Gingerbread），和15（Ice Cream Sandwich）及后续。</p><p>一方面它相当可靠，因为和UI线程是同步的，另一方面又非常之快，因为没有任何睡眠的必要（当某个毫秒，应用程序空转时，运行测试）。不过它同样不支持web视图。</p><p>Espresso的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEspresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Check if view with the text 'Hello.' is shown</span></span><br><span class="line">    onView(withText(<span class="string">"Hello."</span>)).check(matches(isDisplayed()));</span><br><span class="line">    <span class="comment">// R class ID identifier for 'Sign in' - and click it</span></span><br><span class="line">    onView(withId(getInstrumentation().getTargetContext().getResources()</span><br><span class="line">        .getIdentifier(<span class="string">"com.twitter.android:id/sign_in"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>))).perform(click());</span><br><span class="line">    <span class="comment">// R class ID identifier for entering username</span></span><br><span class="line">    onView(withId(getInstrumentation().getTargetContext().getResources()</span><br><span class="line">        .getIdentifier(<span class="string">"com.twitter.android:id/login_username"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>))).perform((typeText(<span class="string">"username"</span>)));</span><br><span class="line">    <span class="comment">// R class ID identifier for entering password</span></span><br><span class="line">    onView(withId(getInstrumentation().getTargetContext().getResources()</span><br><span class="line">        .getIdentifier(<span class="string">"com.twitter.android:id/login_password"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>))).perform((typeText(<span class="string">"password"</span>)));</span><br><span class="line">    <span class="comment">// R class ID identifier for clicking log in</span></span><br><span class="line">    onView(withId(getInstrumentation().getTargetContext().getResources()</span><br><span class="line">        .getIdentifier(<span class="string">"com.twitter.android:id/login_login"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>))).perform(click());</span><br><span class="line">    <span class="comment">// Activate the text field to compose a tweet</span></span><br><span class="line">    onView(withId(getInstrumentation().getTargetContext().getResources()</span><br><span class="line">        .getIdentifier(<span class="string">"com.twitter.android:id/menu_compose_tweet"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>))).perform(click());</span><br><span class="line">    <span class="comment">// Type the tweet</span></span><br><span class="line">    onView(withId(getInstrumentation().getTargetContext().getResources()</span><br><span class="line">        .getIdentifier("com.twitter.android:id/edit", null, null))).perform((typeText(”#Testdroid")));</span><br><span class="line">    <span class="comment">// Tweeting!</span></span><br><span class="line">    onView(withId(getInstrumentation().getTargetContext().getResources()</span><br><span class="line">        .getIdentifier(<span class="string">"com.twitter.android:id/composer_post"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>))).perform(click());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方网站：<a href="https://code.google.com/p/android-test-kit/wiki/Espresso" rel="external nofollow noopener noreferrer" target="_blank">https://code.google.com/p/android-test-kit/wiki/Espresso</a></p><h2 id="Calabash"><a href="#Calabash" class="headerlink" title="Calabash"></a>Calabash</h2><p>Calabash是一款跨平台的自动化测试框架，支持Android和iOS原生和混合的应用程序。Calabash易于理解的语法，使得即使是非 技术人员也可以在这两个移动平台上为app创建和执行自动化验收测试。Calabash的测试描述于Cucumber，然后在运行时转化为 Robotium或Frank。它支持约80种不同的自然语言指令（控制器），并且可以使用Ruby和Java实现新的控制器。</p><p>Calabash的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Feature: Login feature</span><br><span class="line">Scenario: As a valid user I can log into my app</span><br><span class="line">I wait <span class="keyword">for</span> text <span class="string">"Hello"</span></span><br><span class="line">Then I press view with id <span class="string">"Sign in"</span></span><br><span class="line">Then I enter text <span class="string">"username"</span> into <span class="string">"login_username"</span></span><br><span class="line">Then I enter text <span class="string">"password"</span> into <span class="string">"login_password"</span></span><br><span class="line">Then I wait <span class="keyword">for</span> activity <span class="string">"HomeTabActivity"</span></span><br><span class="line">Then I press view with id <span class="string">"menu_compose_tweet"</span></span><br><span class="line">Then I enter text <span class="string">"Testdroid"</span> into field with id <span class="string">"edit"</span></span><br><span class="line">Then I press view with id <span class="string">"composer_post"</span></span><br></pre></td></tr></table></figure><p>官方网站：<a href="http://calaba.sh/" rel="external nofollow noopener noreferrer" target="_blank">http://calaba.sh/</a></p><h2 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h2><p>Appium是一款移动的自动化测试框架（和工具），支持iOS和Android原生和混合的移动Web应用程序。它内部使用的 JSONWireProtocol通过Selenium的WebDriver，来与iOS和Android应用进行交互。它通过 uiautomator（API level 16或更高）和Seledroid（API level 低于16）支持Android，通过UI Automation支持iOS，还有Android和iOS都支持的移动web如Selenium driver。</p><p>Appium的最大优点在于你几乎可以用任意一种编程语言（例如，Java、Objective-C、JavaScript、PHP、Ruby、 Python和C＃等）来编写Appium脚本而不必选择工具，兼容最重要的平台（Android和iOS）而不必安装和配置设备适应测试等等。并且，如 果你熟悉Selenium的话，那么使用Appium用于移动app测试对你而言将是轻而易举的一件事。因为它们使用相同的WebDriver，并且以同 样的方式使用DesiredCapabilities。所以Appium与Selenium在配置应用程序运行时有诸多相似之处。</p><p>Appium的代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># wait for hello</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">textFields = driver.find_elements_by_tag_name(<span class="string">'textField'</span>)</span><br><span class="line">assertEqual(textFields[<span class="number">0</span>].get_attribute(<span class="string">"value"</span>), <span class="string">"Hello"</span>)</span><br><span class="line"># click sign-in button</span><br><span class="line">driver.find_elements_by_name(<span class="string">'Sign in'</span>)[<span class="number">0</span>].click()</span><br><span class="line"># find the text fields again, and enter username and password</span><br><span class="line">textFields = driver.find_elements_by_tag_name(<span class="string">'textField'</span>)</span><br><span class="line">textFields[<span class="number">0</span>].send_keys(<span class="string">"twitter_username"</span>)</span><br><span class="line">textFields[<span class="number">1</span>].send_keys(<span class="string">"passw0rd"</span>)</span><br><span class="line"># click the Login button (the first button in the view)</span><br><span class="line">driver.find_elements_by_tag_name(<span class="string">'button'</span>)[<span class="number">0</span>].click()</span><br><span class="line"># sleep</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"># click the first button with name "Compose"</span><br><span class="line">driver.find_elements_by_name(<span class="string">'Compose'</span>)[<span class="number">0</span>].click()</span><br><span class="line"># type in the tweet message</span><br><span class="line">driver.find_elements_by_tag_name('textField')[0].send_keys(”#Testdroid is awesome!")</span><br><span class="line"># press the Send button</span><br><span class="line">driver.find_elements_by_name(<span class="string">'Send'</span>)[<span class="number">0</span>].click()</span><br><span class="line"># exit</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>官方网站：<a href="http://appium.io/" rel="external nofollow noopener noreferrer" target="_blank">http://appium.io/</a></p><p><img src="/imgs/post/android_test_compare_table.png" alt="android_test_compare_table"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是我们列出的5款最棒的测试框架，可用于日常的Android构建，创立和修改。当然，每一种框架都有其优势和缺陷。Appium可以同时测 试你的Android和iOS版本。但如果你是一个忠实的Android开发人员只开发安卓版本的app，那么，使用Robotium就很不错的。 Testdroid Recorder还可为我们在生成测试脚本节省大量的时间和金钱（这是免费的哦！）。因此，好好思考下你的测试需求——功能测试、兼容性测试、UI测试等 等——然后为自己选取最适合和最佳的Android测试框架。</p><p>译文链接： <a href="http://www.codeceo.com/article/5-android-test-framework.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.codeceo.com/article/5-android-test-framework.html</a><br>英文原文： <a href="http://testdroid.com/tech/top-5-android-testing-frameworks-with-examples" rel="external nofollow noopener noreferrer" target="_blank">Top 5 Android Testing Frameworks (with Examples)</a><br>翻译作者： 码农网 – 小峰</p><p><br>本文地址 <a href="http://94275.cn/2016/01/08/Android-Test-Framework-comparison/">http://94275.cn/2016/01/08/Android-Test-Framework-comparison/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android测试 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Android instrumentation]]></title>
      <url>http://94275.cn/2016/01/07/android-instrumentation/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>之前学习过了monkey和monkeyrunner，这次来学习instrumentation。</p><a id="more"></a><h2 id="什么是Instrumentation"><a href="#什么是Instrumentation" class="headerlink" title="什么是Instrumentation"></a>什么是Instrumentation</h2><p>Android测试环境的核心是一个Instrumentation框架，在这个框架下，你的测试应用程序可以精确控制应用程序。使用Instrumentation，你可以在主程序启动之前，创建模拟的系统对象，如Context；控制应用程序的多个生命周期；发送UI事件给应用程序；在执行期间检查程序状态。Instrumentation框架通过将主程序和测试程序运行在同一个进程来实现这些功能。</p><p>android instrumentation是android系统中一系列的控制方法或者钩子（hooks）。这些hooks可以脱离组件的正常生命周期控制一个android组件。它同样可以控制android如何加载应用程序。</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>Instrumentation和Activity有点类似，只不过Activity是需要一个界面的，而Instrumentation并不是这样的，我们可以将它理解为一种没有图形界面的，具有启动能力的，用于监控其他类(用Target Package声明)的工具类。</p><h3 id="配置Manifest"><a href="#配置Manifest" class="headerlink" title="配置Manifest"></a>配置Manifest</h3><p>在manifest中添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">instrumentation</span> <span class="attr">android:targetPackage</span>=<span class="string">"com.package.name"</span> <span class="attr">android:name</span>=<span class="string">"android.test.InstrumentationTestRunner"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写被测试的类"><a href="#编写被测试的类" class="headerlink" title="编写被测试的类"></a>编写被测试的类</h3><p>编写一个Activity，页面包含一个TextView，一个Button和一个Edittext。另外添加add()方法和isTrue()方法。</p><p>布局文件如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.ihongqiqu.instrumentationdemo.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Hello World!"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_test"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"47dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"test"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_test"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">"@+id/tv_test"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"onClick"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"30dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/et_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentEnd</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"Input your name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Activity代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tvTest;</span><br><span class="line">    <span class="keyword">private</span> Button btnTest;</span><br><span class="line">    <span class="keyword">private</span> EditText etName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.etName = (EditText) findViewById(R.id.et_name);</span><br><span class="line">        <span class="keyword">this</span>.btnTest = (Button) findViewById(R.id.btn_test);</span><br><span class="line">        <span class="keyword">this</span>.tvTest = (TextView) findViewById(R.id.tv_test);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) Log.d(<span class="string">"MainActivity"</span>, <span class="string">"Test button clicked"</span>);</span><br><span class="line">        tvTest.setText(<span class="string">"TEST"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTrue</span><span class="params">(Boolean bool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE == bool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><p>测试类实现对按钮点击，文本输入和对add()方法和isTrue()方法的测试，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MainActivity测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 1/6/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityTest</span> <span class="keyword">extends</span> <span class="title">InstrumentationTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MainActivity mainActivity;</span><br><span class="line">    <span class="keyword">private</span> Button btnTest;</span><br><span class="line">    <span class="keyword">private</span> TextView tvTest;</span><br><span class="line">    <span class="keyword">private</span> EditText etName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setUp();</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setClassName(MainActivity.class.getPackage().getName(), MainActivity.class.getName());</span><br><span class="line">        <span class="comment">// 必须添加FLAG_ACTIVITY_NEW_TASK这个flag</span></span><br><span class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        mainActivity = (MainActivity) getInstrumentation().startActivitySync(intent);</span><br><span class="line">        tvTest = (TextView) mainActivity.findViewById(R.id.tv_test);</span><br><span class="line">        btnTest = (Button) mainActivity.findViewById(R.id.btn_test);</span><br><span class="line">        etName = (EditText) mainActivity.findViewById(R.id.et_name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mainActivity.finish();</span><br><span class="line">        <span class="keyword">super</span>.tearDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"MainActivityTest"</span>, <span class="string">"testActivity()"</span>);</span><br><span class="line">        getInstrumentation().runOnMainSync(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                btnTest.performClick();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        SystemClock.sleep(<span class="number">3000</span>);</span><br><span class="line">        assertEquals(<span class="string">"TEST"</span>, tvTest.getText().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"MainActivityTest"</span>, <span class="string">"testAdd()"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = mainActivity.add(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        assertEquals(<span class="number">8</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIsTure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"MainActivityTest"</span>, <span class="string">"testIsTure()"</span>);</span><br><span class="line">        assertTrue(mainActivity.isTrue(Boolean.TRUE));</span><br><span class="line">        assertFalse(mainActivity.isTrue(Boolean.FALSE));</span><br><span class="line">        assertFalse(mainActivity.isTrue(<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEditText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"MainActivityTest"</span>, <span class="string">"testEditText()"</span>);</span><br><span class="line">        mainActivity.runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                etName.requestFocus();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        SystemClock.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">// this.sendKeys("jingle1267");</span></span><br><span class="line">        getInstrumentation().sendStringSync(<span class="string">"jingle1267"</span>);</span><br><span class="line">        SystemClock.sleep(<span class="number">2000</span>);</span><br><span class="line">        assertEquals(<span class="string">"jingle1267"</span>, etName.getText().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行测试代码"><a href="#运行测试代码" class="headerlink" title="运行测试代码"></a>运行测试代码</h3><p>有两种方法运行测试，分别是：</p><ul><li>IDE中右击 <code>XXXTest.java</code> 选择 <code>Run ‘XXXTest’</code></li><li>手机中选择 <code>Dev Tools</code> ，然后选择Instrumentation选项，然后选择 <code>Test for you.package.name</code></li></ul><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>源码地址 <a href="https://github.com/jingle1267/AndroidTestDemo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/AndroidTestDemo</a></p><p>如有任何问题，欢迎留言。</p><p><br>本文地址 <a href="http://94275.cn/2016/01/07/android-instrumentation/">http://94275.cn/2016/01/07/android-instrumentation/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> instrumentation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android monkeyrunner]]></title>
      <url>http://94275.cn/2015/12/25/Android-monkeyrunner/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>上文学习了Android的monkey测试，这次我学习一下monkeyrunner。大家别看这俩兄弟名字相像，但其实是完完全全不同的两个工具，应用在不同的测试领域。</p><a id="more"></a><p>monkeyrunner工具提供了一个API，使用此API写出的程序可以在Android代码之外控制Android设备和模拟器。通过monkeyrunner，您可以写出一个Python程序去安装一个Android应用程序或测试包，运行它，向它发送模拟击键，截取它的用户界面图片，并将截图存储于工作站上。monkeyrunner工具的主要设计目的是用于测试功能/框架水平上的应用程序和设备，或用于运行单元测试套件，但您当然也可以将其用于其它目的。</p><h2 id="monkeyrunner和monkey的差别"><a href="#monkeyrunner和monkey的差别" class="headerlink" title="monkeyrunner和monkey的差别"></a>monkeyrunner和monkey的差别</h2><p>总的来说，monkey主要应用在压力和可靠性测试上，运行该命令可以随机地向目标程序发送各种模拟键盘事件流，并且可以自己定义发送的次数，以此观察被测应用程序的稳定性和可靠性，应用起来也比较简单，记住那几个命令就行了。而monkeyrunner呢，相比之下会强大一些，它主要可应用于功能测试，回归测试，并且可以自定义测试扩展，灵活性较强，并且测试人员可以完全控制。</p><h2 id="测试类型"><a href="#测试类型" class="headerlink" title="测试类型"></a>测试类型</h2><p>monkeyrunner的测试类型主要有：</p><ol><li>多设备控制：monkeyrunner API可以跨多个设备或模拟器实施测试套件。您可以在同一时间接上所有的设备或一次启动全部模拟器（或统统一起），依据程序依次连接到每一个，然后运行一个或多个测试。您也可以用程序启动一个配置好的模拟器，运行一个或多个测试，然后关闭模拟器。</li><li>功能测试： monkeyrunner可以为一个应用自动贯彻一次功能测试。您提供按键或触摸事件的输入数值，然后观察输出结果的截屏。</li><li>回归测试：monkeyrunner可以运行某个应用，并将其结果截屏与既定已知正确的结果截屏相比较，以此测试应用的稳定性。</li><li><p>可扩展的自动化：由于monkeyrunner是一个API工具包，您可以基于Python模块和程序开发一整套系统，以此来控制Android设备。除了使用monkeyrunner API之外，您还可以使用标准的Python os和subprocess模块来调用Android Debug Bridge这样的Android工具。</p><p>monkeyrunner工具使用Jython（使用Java编程语言的一种Python实现）。Jython允许monkeyrunnerAPI与Android框架轻松的进行交互。使用Jython，您可以使用Python语法来获取API中的常量、类以及方法。</p><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><p>以下为一个简单的monkeyrunner程序，它将会连接到一个设备，创建一个monkeyDevice对象。使用device打开浏览器，并向其发送按键事件。程序接下来会将结果截图，创建一个monkeyImage对象，并使用这个对象截图将保存至.png文件。monkeyrunner01.py代码如下：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文件保存为utf8编码 且需要添加下一行代码</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#导入我们需要用到的包和类并且起别名</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> com.android.monkeyrunner <span class="keyword">import</span> monkeyRunner <span class="keyword">as</span> mr</span><br><span class="line"><span class="keyword">from</span> com.android.monkeyrunner <span class="keyword">import</span> monkeyDevice <span class="keyword">as</span> md</span><br><span class="line"><span class="keyword">from</span> com.android.monkeyrunner <span class="keyword">import</span> monkeyImage <span class="keyword">as</span> mi</span><br><span class="line"> </span><br><span class="line"><span class="comment">#connect device 连接设备</span></span><br><span class="line"><span class="comment">#第一个参数为等待连接设备时间</span></span><br><span class="line"><span class="comment">#第二个参数为具体连接的设备</span></span><br><span class="line"><span class="comment">#device = mr.waitForConnection(1.0,'216e9294')</span></span><br><span class="line">device = mr.waitForConnection();</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> device:</span><br><span class="line">    <span class="keyword">print</span> &gt;&gt; sys.stderr,<span class="string">"fail"</span></span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#在emulator上会弹出消息提示</span></span><br><span class="line"><span class="comment">#mr.alert("hello")</span></span><br><span class="line"><span class="comment">#定义要启动的Activity</span></span><br><span class="line">componentName=<span class="string">'com.android.browser/.BrowserActivity'</span></span><br><span class="line"><span class="comment">#componentName='com.ihongqiqu.Identify/.activity.MainActivity'</span></span><br><span class="line"><span class="comment">#启动特定的Activity</span></span><br><span class="line">device.startActivity(component=componentName)</span><br><span class="line">mr.sleep(<span class="number">1.0</span>)</span><br><span class="line"><span class="comment">#do someting 进行我们的操作</span></span><br><span class="line"><span class="comment">#输入 helloworld</span></span><br><span class="line">device.type(<span class="string">'10086'</span>)</span><br><span class="line"><span class="comment">#输入回车</span></span><br><span class="line">device.press(<span class="string">'KEYCODE_ENTER'</span>)</span><br><span class="line">device.press(<span class="string">'KEYCODE_MENU'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#return keyboard</span></span><br><span class="line"><span class="comment">#device.press('KEYCODE_BACK')</span></span><br><span class="line"><span class="comment">#takeSnapshot截图</span></span><br><span class="line">mr.sleep(<span class="number">1.0</span>)</span><br><span class="line">result = device.takeSnapshot()</span><br><span class="line"> </span><br><span class="line"><span class="comment">#save to file 保存到文件</span></span><br><span class="line">result.writeToFile(<span class="string">'./shot1.png'</span>,<span class="string">'png'</span>);</span><br></pre></td></tr></table></figure><p>运行上面代码的命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">monkeyrunner monkeyrunner01.py</span><br></pre></td></tr></table></figure><h2 id="monkeyrunner-API"><a href="#monkeyrunner-API" class="headerlink" title="monkeyrunner API"></a>monkeyrunner API</h2><ul><li><p><a href="http://developer.android.com/guide/developing/tools/monkeyRunner.html" rel="external nofollow noopener noreferrer" target="_blank">monkeyRunner</a> ：一个为monkeyrunner程序提供工具方法的类。这个类提供了用于连接monkeyrunner至设备或模拟器的方法。它还提供了用于创建一个monkeyrunner程序的用户界面以及显示内置帮助的方法。</p></li><li><p><a href="http://developer.android.com/guide/developing/tools/monkeyDevice.html" rel="external nofollow noopener noreferrer" target="_blank">monkeyDevice</a> ：表示一个设备或模拟器。这个类提供了安装和卸载程序包、启动一个活动以及发送键盘或触摸事件到应用程序的方法。您也可以用这个类来运行测试包。</p></li><li><p><a href="http://developer.android.com/guide/developing/tools/monkeyImage.html" rel="external nofollow noopener noreferrer" target="_blank">monkeyImage</a> ：表示一个截图对象。这个类提供了截图、将位图转换成各种格式、比较两个monkeyImage对象以及写图像到文件的方法。</p><p>在python程序中，您将以Python模块的形式使用这些类。monkeyrunner工具不会自动导入这些模块。您必须使用类似如下的from语句：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> com.android.monkeyrunner <span class="keyword">import</span> XXX</span><br></pre></td></tr></table></figure><p>其中，XXX为您想要导入的类名。您可以在一个from语句中导入超过一个模块，其间以逗号分隔。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li>官方介绍：<a href="http://developer.android.com/guide/developing/tools/monkeyrunner_concepts.html" rel="external nofollow noopener noreferrer" target="_blank">http://developer.android.com/guide/developing/tools/monkeyrunner_concepts.html</a></li><li>国内地址：<a href="http://www.android-doc.com/tools/help/monkeyrunner_concepts.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.android-doc.com/tools/help/monkeyrunner_concepts.html</a></li><li>翻译地址：<a href="http://article.yeeyan.org/view/37503/164523" rel="external nofollow noopener noreferrer" target="_blank">http://article.yeeyan.org/view/37503/164523</a></li></ul><p><br>本文地址 <a href="http://94275.cn/2015/12/25/Android-monkeyrunner/">http://94275.cn/2015/12/25/Android-monkeyrunner/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> monkeyrunner </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Monkey Test]]></title>
      <url>http://94275.cn/2015/12/24/Android-Monkey-Test/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>作为一个Android开发者，熟悉的自动化测试是十分必要的。此文主要介绍Android平台下的Monkey测试。</p><a id="more"></a><h2 id="Monkey测试介绍"><a href="#Monkey测试介绍" class="headerlink" title="Monkey测试介绍"></a>Monkey测试介绍</h2><p>Monkey测试是Android平台自动化测试的一种手段，通过Monkey程序模拟用户触摸屏幕、滑动Trackball、按键等操作来对设备上的程序进行压力测试，检测程序多久的时间会发生异常。</p><h2 id="Monkey测试特点"><a href="#Monkey测试特点" class="headerlink" title="Monkey测试特点"></a>Monkey测试特点</h2><p>Monkey测试的特点主要有以下几点：</p><ul><li>可对MonkeyTest的对象，事件数量，类型，频率等进行设置。</li><li>Monky测试使用的事件流数据流是随机的，不能进行自定义。</li><li>测试的对象仅为应用程序包，有一定的局限性。</li></ul><h2 id="Monkey命令"><a href="#Monkey命令" class="headerlink" title="Monkey命令"></a>Monkey命令</h2><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><p><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-help</span><br></pre></td></tr></table></figure><p>作用：列出简单的用法<br>例：<code>adb shell monkey -help</code><br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v</span><br></pre></td></tr></table></figure><p>作用：命令行上的每一个-v都将增加反馈信息的详细级别。<br>Level0（默认），除了启动、测试完成和最终结果外只提供较少的信息。<br>Level1，提供了较为详细的测试信息，如逐个发送到Activity的事件信息。<br>Level2，提供了更多的设置信息，如测试中选中或未选中的Activity信息。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -v 10</span><br><span class="line">adb shell monkey -v -v 10</span><br><span class="line">adb shell monkey -v -v -v 10</span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-s &lt;seed&gt;</span><br></pre></td></tr></table></figure><p>作用：伪随机数生成器的seed值。如果用相同的seed值再次运行monkey，将生成相同的事件序列。<br>例：<code>adb shell monkey -s 12345 -v 10</code><br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--throttle &lt;milliseconds&gt;</span><br></pre></td></tr></table></figure><p>作用：在事件之间插入固定的时间（毫秒）延迟，你可以使用这个设置来减缓Monkey的运行速度，如果你不指定这个参数，则事件之间将没有延迟，事件将以最快的速度生成。<br>例：<code>adb shell monkey –throttle 300 -v 10</code></p><p>注：常用参数，一般设置为300毫秒，原因是实际用户操作的最快300毫秒左右一个动作事件，所以此处一般设置为300毫秒。<br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--pct-touch &lt;percent&gt;</span><br></pre></td></tr></table></figure><p>作用：调整触摸事件的百分比。（触摸事件是指在屏幕中的一个down-up事件，即在屏幕某处按下并抬起的操作）<br>例：<code>adb shell monkey –pct-touch 100 -v 10</code></p><p>注：常用参数，此参数设置要适应当前被测应用程序的操作，比如一个应用80%的操作都是触摸，那就可以将此参数的百分比设置成相应较高的百分比。<br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--pct-motion &lt;percent&gt;</span><br></pre></td></tr></table></figure><p>作用：调整motion事件百分比。（motion事件是由屏幕上某处一个down事件、一系列伪随机的移动事件和一个up事件组成）<br>例：<code>adb shell monkey –pct-motion 100 -v 10</code></p><p>注：常用参数，需注意的是移动事件是直线滑动，下面的trackball移动包含曲线移动。<br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--pct-trackball &lt;percent&gt;</span><br></pre></td></tr></table></figure><p>作用：调整滚动球事件百分比。（滚动球事件由一个或多个随机的移动事件组成，有时会伴随着点击事件）<br>例：<code>adb shell monkey –pct-trackball 100 -v 10</code></p><p>注：不常使用参数，现在手机几乎没有滚动球，但滚动球事件中包含曲线滑动事件，在被测程序需要曲线滑动时可以选用此参数。<br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--pct-nav &lt;percent&gt;</span><br></pre></td></tr></table></figure><p>作用：调整基本的导航事件百分比。（导航事件由方向输入设备的上下左右按键所触发的事件组成）<br>例：<code>adb shell monkey –pct-nav 100 -v 10</code><br>注：不常用操作。<br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--pct-majornav &lt;percent&gt;</span><br></pre></td></tr></table></figure><p>作用：调整主要导航事件的百分比。（这些导航事件通常会导致UI界面中的动作事件，如5-way键盘的中间键，回退按键、菜单按键）<br>例：<code>adb shell monkey –pct-majornav 100 -v 10</code><br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--pct-syskeys &lt;percent&gt;</span><br></pre></td></tr></table></figure><p>作用：调整系统事件百分比。（这些按键通常由系统保留使用，如Home、Back、Start Call、End Call、音量调节）<br>例：<code>adb shell monkey –pct-syskeys 100 -v 10</code><br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--pct-appswitch &lt;percent&gt;</span><br></pre></td></tr></table></figure><p>作用：调整Activity启动的百分比。（在随机的时间间隔中，Monkey将执行一个startActivity()调用，作为最大程度覆盖被测包中全部Activity的一种方法）<br>例：<code>adb shell monkey –pct-appswitch 100 -v 5</code><br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--pct-anyevent</span><br></pre></td></tr></table></figure><p>作用：调整其他事件的百分比。（这包含所有其他事件，如按键、其他在设备上不常用的按钮等）<br>例：<code>adb shell monkey –pct-anyevent 100 -v 5</code></p><h3 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h3><p><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-p &lt;allowed-package-name&gt;</span><br></pre></td></tr></table></figure><p>作用：如果你指定一个或多个包，Monkey将只允许访问这些包中的Activity。如果你的应用程序需要访问这些包(如选择联系人)以外的Activity，你需要指定这些包。如果你不指定任何包，Monkey将允许系统启动所有包的Activity。指定多个包，使用多个-p，一个-p后面接一个包名。<br>例：<code>adb shell monkey -p com.android.browser -v 10</code><br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c &lt;main-category&gt;</span><br></pre></td></tr></table></figure><p>作用：如果你指定一个或多个类别，Monkey将只允许系统启动这些指定类别中列出的Activity。如果你不指定任何类别，Monkey将选择谢列类别中列出的Activity，Intent.CATEGORY_LAUNCHER和Intent.CATEGORY_MONKEY。指定多个类别使用多个-c，每个-c指定一个类别。<br>例：<code>adb shell monkey -p com.paipai.ershou -v 10 -c</code><br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--dbg-no-events</span><br></pre></td></tr></table></figure><p>作用：设置此选项，Monkey将执行初始启动，进入一个测试Activity，并不会在进一步生成事件。为了得到最佳结果，结合参数-v，一个或多个包的约束，以及一个保持Monkey运行30秒或更长时间的非零值，从而提供了一个可以监视应用程序所调用的包之间转换的环境。<br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--hprof</span><br></pre></td></tr></table></figure><p>作用：设置此选项，将在Monkey生成事件序列前后生成profilling报告。在data/misc路径下生成大文件（~5Mb），所以要小心使用。<br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--ignore-crashes</span><br></pre></td></tr></table></figure><p>作用：通常，应用发生崩溃或异常时Monkey会停止运行。如果设置此项，Monkey将继续发送事件给系统，直到事件计数完成。<br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--ignore-security-exception</span><br></pre></td></tr></table></figure><p>作用：通常，当程序发生许可错误（例如启动一些需要许可的Activity）导致的异常时，Monkey将停止运行。设置此项，Monkey将继续发送事件给系统，直到事件计数完成。<br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--kill-process-after-error</span><br></pre></td></tr></table></figure><p>作用：通常，当Monkey由于一个错误而停止时，出错的应用程序将继续处于运行状态。设置此项，将会通知系统停止发生错误的进程。注意，正常（成功）的结束，并没有停止启动的进程，设备只是在结束事件之后简单的保持在最后的状态。<br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--monitor-native-crashes</span><br></pre></td></tr></table></figure><p>作用：监视并报告Andorid系统中本地代码的崩溃事件。如果设置–kill-process-after-error，系统将停止运行。<br><br></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--wait-dbg</span><br></pre></td></tr></table></figure><p>作用：停止执行中的Monkey，直到有调试器和它相连接。</p><h3 id="记录测试日志"><a href="#记录测试日志" class="headerlink" title="记录测试日志"></a>记录测试日志</h3><p>保存测试日志其实很简单，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p com.ihongqiqu -v -v -v 500 &gt; monkeytest.txt</span><br></pre></td></tr></table></figure><p><br>本文地址 <a href="http://94275.cn/2015/12/24/Android-Monkey-Test/">http://94275.cn/2015/12/24/Android-Monkey-Test/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Monkey </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 6 permission]]></title>
      <url>http://94275.cn/2015/12/23/Android-6-permission/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>Android的权限系统(6.0之前版本)一直是首要的安全概念，因为这些权限只在安装的时候被询问一次。一旦安装了，APP可以在用户毫不知晓的情况下访问权限内的所有东西。7年了！权限系统终于被重新设计了。在Android6.0棉花糖，APP将不仅需要在安装的时候授予权限取，而且一些隐私敏感权限不得不在运行时一个一个询问用户授予权限。</p><a id="more"></a><h2 id="运行时权限介绍"><a href="#运行时权限介绍" class="headerlink" title="运行时权限介绍"></a>运行时权限介绍</h2><p>Android 6.0在我们原有的AndroidManifest.xml声明权限的基础上，<br>又新增了运行时权限动态检测，以下9个权限组都需要在运行时判断：</p><p><img src="/imgs/post/android6.0_permission_table.png" alt="android6.0 permission dialog"></p><h2 id="运行时权限处理"><a href="#运行时权限处理" class="headerlink" title="运行时权限处理"></a>运行时权限处理</h2><p>这个新的运行时权限仅当我们设置targetSdkVersion to 23（这意味着你已经在23上测试通过了）才起作用，当然还要是M系统的手机。app在6.0之前的设备依然使用旧的权限系统。但这也只是一个临时的救急策略，用户还是可以在设置中取消授予的权限。如果用户取消了授权，愿调用函数只返回null或者0.<br>同一权限组组的任何一个权限被授权了，其他权限也自动被授权。例如，一旦WRITE_CONTACTS被授权了，APP也有READ_CONTACTS和GET_ACCOUNTS了。</p><h3 id="配置支持运行时权限"><a href="#配置支持运行时权限" class="headerlink" title="配置支持运行时权限"></a>配置支持运行时权限</h3><p>声明目标SDK版本，我们需要在build.gradle中声明targetSdkVersion为23。</p><h3 id="检查并申请权限"><a href="#检查并申请权限" class="headerlink" title="检查并申请权限"></a>检查并申请权限</h3><p>我们需要在用到权限的地方，每次都检查是否APP已经拥有权限。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">int</span> REQUEST_CODE_ASK_PERMISSIONS = <span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertDummyContactWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);</span><br><span class="line">    <span class="keyword">if</span> (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        requestPermissions(<span class="keyword">new</span> String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</span><br><span class="line">                REQUEST_CODE_ASK_PERMISSIONS);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    insertDummyContact();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果已有权限，insertDummyContact()会执行。否则，requestPermissions被执行来弹出请求授权对话框，如下：</p><p><img src="/imgs/post/android6.0_permission_dialog.png" alt="android6.0 permission dialog"></p><p>不论用户同意还是拒绝，activity的onRequestPermissionsResult会被回调来通知结果（通过第三个参数），grantResults,如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> REQUEST_CODE_ASK_PERMISSIONS:</span><br><span class="line">            <span class="keyword">if</span> (grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                <span class="comment">// Permission Granted</span></span><br><span class="line">                insertDummyContact();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Permission Denied</span></span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"WRITE_CONTACTS Denied"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                        .show();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h2><p>Android6.0之前版本的兼容，谷歌已经替我们想到了这个问题，可以采用v4包中的相应方法处理。主要有以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ContextCompat.checkSelfPermission();</span><br><span class="line">ActivityCompat.requestPermissions();</span><br><span class="line">ActivityCompat.OnRequestPermissionsResultCallback();</span><br><span class="line">ActivityCompat.shouldShowRequestPermissionRationale();</span><br><span class="line">FragmentCompat.requestPermissions();</span><br><span class="line">FragmentCompat.shouldShowRequestPermissionRationale();</span><br></pre></td></tr></table></figure><p>PS: 在Fragment中申请权限，使用ActivityCompat.requestPermissions, 会回调到Activity的onRequestPermissionsResult</p><h2 id="相关开源项目"><a href="#相关开源项目" class="headerlink" title="相关开源项目"></a>相关开源项目</h2><p>通过上面的权限实现，我们发现权限处理逻辑比较复杂。为此，很多第三方库诞生了。</p><ul><li><strong><a href="https://github.com/hotchemi/PermissionsDispatcher" rel="external nofollow noopener noreferrer" target="_blank">PermissionsDispatcher</a></strong> 使用标注的方式，动态生成类处理运行时权限，目前还不支持嵌套Fragment。</li><li><strong><a href="https://github.com/tbruyelle/RxPermissions" rel="external nofollow noopener noreferrer" target="_blank">RxPermissions</a></strong> 基于RxJava的运行时权限检测框架</li><li><strong><a href="https://github.com/anthonycr/Grant" rel="external nofollow noopener noreferrer" target="_blank">Grant</a></strong> 简化运行时权限的处理，比较灵活</li><li><strong><a href="https://github.com/googlesamples/android-RuntimePermissions" rel="external nofollow noopener noreferrer" target="_blank">android-RuntimePermissions</a></strong> Google官方的例子</li></ul><h2 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h2><p>参考地址：<br><a href="https://developer.android.com/reference/android/Manifest.permission_group.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/reference/android/Manifest.permission_group.html</a><br><a href="https://developer.android.com/guide/topics/security/permissions.html#normal-dangerous" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/topics/security/permissions.html#normal-dangerous</a><br><a href="https://developer.android.com/training/permissions/best-practices.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/training/permissions/best-practices.html</a></p><p><br>本文地址 <a href="http://94275.cn/2015/12/23/Android-6-permission/">http://94275.cn/2015/12/23/Android-6-permission/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> 权限 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android App Links]]></title>
      <url>http://94275.cn/2015/12/18/App-Links/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>谷歌在2015年的I/O大会上宣布Android M支持App链接（App Links）。这个举动将改变H5和原生应用的交互体验。</p><p>在Android M之前，点击一个链接会产生一个弹出框，询问用户打开哪个应用－包括浏览器应用。但是谷歌在Android M 实现了一个自动认证（auto-verify）机制，让开发者可以避开这个弹出框，使用户不必去选择一个列表，直接跳转到他们的app。</p><a id="more"></a><h2 id="App-Links介绍"><a href="#App-Links介绍" class="headerlink" title="App Links介绍"></a>App Links介绍</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>谷歌的App Link让用户在点击一个普通web链接的时候可以打开指定app的指定页面，前提是这个app已经安装并且经过了验证，否则会显示一个打开选项的弹出框。自此，在安卓中打开一个链接的用户体验大大提高，用户可以在链接与app之间快速切换。 <strong>也就是我们的唤起</strong></p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>App Links有如下缺点：</p><ul><li>App Links只能工作在谷歌的Android M上</li><li>要使用App Links开发者必须维护一个与app相关联的网站</li></ul><h2 id="App-Links实现"><a href="#App-Links实现" class="headerlink" title="App Links实现"></a>App Links实现</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>想要实现App Links需要如下条件：</p><ul><li>拥有一个域名</li><li>域名SSL通道</li><li>有上传文件到到域名指向服务器的权限</li></ul><h3 id="App-Links实现原理"><a href="#App-Links实现原理" class="headerlink" title="App Links实现原理"></a>App Links实现原理</h3><p>App链接认证涉及到安卓系统的两个组建：Package Manager和Intent Filter Verifier。</p><p><strong>PackageManager</strong> 是一个无处不在的标准组建–它负责验证所安装的apk是否有效，授予app权限，另外还可以通过它知道系统上安装了些什么app。</p><p><strong>Intent Filter Verifier</strong> 则是Android M上才有的新玩意儿。这个组建负责获取链接指向的JSON认证，解析它，验证它，然后将报告返回给PackageManger。</p><p>想要查看Intent Filter Verifier，可以通过这条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys package ifv</span><br></pre></td></tr></table></figure><p>App链接认证在安装的时候就一次性完成。这就是为什么刚刚我们说不必在每次点击链接的时候都阻塞网络。如果认证失败，app链接将无法指向你的app – 你的app会像往常一样出现在“打开方式”对话框中（除非另一个app通过了同一域名的验证）。</p><p><img src="/imgs/post/app_links_verifier.png" alt="App Links Verifier"></p><p>当一个package安装的时候，或者现有的package升级的时候：</p><ol><li>PackageManager对即将安装的apk做常规的验证。</li><li>如果成功，这个package将被安装，同时发出一个带有android.intent.action.INTENT_FILTER_NEEDS_VERIFICATION的广播intent，intent中还携带有该package的信息。</li><li>Intent Filter Verifier的广播接收器将获取这个广播。</li><li>从package的<intent-filter>标签中编译出一个特有主机名的列表。</intent-filter></li><li>verifier尝试从每个特有的主机名中获取statements.json。</li><li>每一个被获取的JSON文件都会检查它的application ID和安装包的证书。</li><li>只有当所有文件同时满足时，才会发送成功信息到PackageManager，否则失败。</li><li>PackageManager存储结果。</li></ol><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><h4 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h4><p>客户端需要设置Activity的Intent Filter，来设置页面接收唤起。具体实现代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:name</span>=<span class="string">"com.your.app.activity.HandlerActivity"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:alwaysRetainTaskState</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:noHistory</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.Translucent.NoTitleBar"</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:autoVerify</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> <span class="attr">android:host</span>=<span class="string">"yourdomain.com"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"https"</span> <span class="attr">android:host</span>=<span class="string">"yourdomain.com"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取唤起参数等信息代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">  Intent intent = getIntent();</span><br><span class="line">  Uri deeplink = intent.getData();</span><br><span class="line">  <span class="keyword">if</span> (deeplink != <span class="keyword">null</span>) &#123;</span><br><span class="line">    parseDeepLink(deeplink);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDeepLink</span><span class="params">(Uri deeplink)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// The path of the deep link, e.g. '/products/detail?key=google'</span></span><br><span class="line">  String path = deeplink.getPath();</span><br><span class="line">  String latPathSegment = deeplink.getLastPathSegment();</span><br><span class="line">  String value1 = deeplink.getQueryParameter(<span class="string">"key"</span>);</span><br><span class="line"></span><br><span class="line">  Toast.makeText(<span class="keyword">this</span>,</span><br><span class="line">      <span class="string">"path : "</span> + path</span><br><span class="line">      + <span class="string">"\n lastPathSegment : "</span> + latPathSegment</span><br><span class="line">      + <span class="string">"\n value1 : "</span> + value1,</span><br><span class="line">      Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务器端实现"><a href="#服务器端实现" class="headerlink" title="服务器端实现"></a>服务器端实现</h4><p>服务器端需要上传<code>statements.json</code>文件到根目录下的<code>.well-known/</code>文件夹下，完整路径是<a href="http://ihongqiqu.com/.well-known/statements.json" rel="external nofollow noopener noreferrer" target="_blank">http://ihongqiqu.com/.well-known/statements.json</a> 。<code>statements.json</code>文件格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  &quot;relation&quot;: [&quot;delegate_permission/common.handle_all_urls&quot;],</span><br><span class="line">  &quot;target&quot;: &#123;</span><br><span class="line">    &quot;namespace&quot;: &quot;android_app&quot;,</span><br><span class="line">    &quot;package_name&quot;: &quot;com.mycompany.myapp&quot;,</span><br><span class="line">    &quot;sha256_cert_fingerprints&quot;: [&quot;AB:E3:C6:08:34:AF....EA:2C:1B&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>其中SHA256指纹证书可以有多个，获取命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore /path/to/app/release-key.keystore</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo | keytool - list - v - keystore app . keystore 2 &gt; / dev / null | grep SHA256 :</span><br></pre></td></tr></table></figure><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><p>一种简单测试App是否设置正确的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start</span><br><span class="line">        -W -a android.intent.action.VIEW</span><br><span class="line">        -d &quot;https://yourdomain.com/products/123?coupon=save90&quot; com.example.android</span><br></pre></td></tr></table></figure><p><br>本文地址 <a href="http://94275.cn/2015/12/18/App-Links/">http://94275.cn/2015/12/18/App-Links/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> H5唤起原生应用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> App Links </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用HEXO发布文章]]></title>
      <url>http://94275.cn/2015/12/04/hexo-post-article/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>Welcome to <a href="http://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p><p><br>本文地址 <a href="http://94275.cn/2015/12/04/hexo-post-article/">http://94275.cn/2015/12/04/hexo-post-article/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[H5唤起原生应用]]></title>
      <url>http://94275.cn/2015/12/03/html-call-native-app/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>解决问题：当用户在手机浏览器中点击一个按钮时，如果手机上已经安装该应用，则直接打开，如果没有安装，则转向应用下载页面。</p><a id="more"></a><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="H5实现"><a href="#H5实现" class="headerlink" title="H5实现"></a>H5实现</h3><h4 id="链接格式如下"><a href="#链接格式如下" class="headerlink" title="链接格式如下"></a>链接格式如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;[scheme]://[host]/[path]?[query]&quot;&gt; 唤起应用 &lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="各个项目含义如下所示："><a href="#各个项目含义如下所示：" class="headerlink" title="各个项目含义如下所示："></a>各个项目含义如下所示：</h4><ul><li>scheme：唤起协议 ※详细后述</li><li>host： 唤起指定host<ul><li>path： 协议路径※没有也可以</li><li>query： 一些参数※没有也可以</li></ul></li></ul><h4 id="终端未安装APP"><a href="#终端未安装APP" class="headerlink" title="终端未安装APP"></a>终端未安装APP</h4><p>终端如果已经安装我们的应用，这个时候可以直接唤起原生应用；终端如果没有安装我们的应用，这时我们需要引导用户去安装。</p><h4 id="JavaScript实现源码"><a href="#JavaScript实现源码" class="headerlink" title="JavaScript实现源码"></a>JavaScript实现源码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;a id=<span class="string">"call-app"</span> href=<span class="string">"javascript:;"</span> &gt; Start or Download &lt;<span class="regexp">/a&gt;&lt;br/</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;input id=<span class="string">"download-app"</span> type=<span class="string">"hidden"</span> name=<span class="string">"storeurl"</span> value=<span class="string">"http://jd.com/8JZ5OO"</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line">        <span class="keyword">var</span> t;</span><br><span class="line">        <span class="keyword">var</span> config = &#123;</span><br><span class="line">            <span class="comment">/*scheme:必须*/</span></span><br><span class="line">            scheme_IOS: <span class="string">'schemedemo://'</span>,</span><br><span class="line">            scheme_Adr: <span class="string">'schemedemo://ihongqiqu.com/test/scheme?name=google&amp;page=1'</span>,</span><br><span class="line">            download_url: <span class="built_in">document</span>.getElementById(<span class="string">'download-app'</span>).value,</span><br><span class="line">            timeout: <span class="number">600</span></span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">openclient</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"></span><br><span class="line">            ifr.src = ua.indexOf(<span class="string">'os'</span>) &gt; <span class="number">0</span> ? config.scheme_IOS : config.scheme_Adr;</span><br><span class="line">            ifr.style.display = <span class="string">'none'</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(ifr);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">var</span> t = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> endTime = <span class="built_in">Date</span>.now();</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (!startTime || endTime - startTime &lt; config.timeout + <span class="number">200</span>) &#123; </span><br><span class="line">                    <span class="built_in">window</span>.location = config.download_url;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                             </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, config.timeout);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">window</span>.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                clearTimeout(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"call-app"</span>).addEventListener(<span class="string">'click'</span>, </span><br><span class="line">                openclient, <span class="literal">false</span>);</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;)()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="APP实现"><a href="#APP实现" class="headerlink" title="APP实现"></a>APP实现</h3><h4 id="AndroidManifest中添加配置"><a href="#AndroidManifest中添加配置" class="headerlink" title="AndroidManifest中添加配置"></a>AndroidManifest中添加配置</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=<span class="string">".SchemeActivity"</span>&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span><br><span class="line">        &lt;category android:name=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span><br><span class="line">        &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span><br><span class="line">        &lt;data android:scheme=<span class="string">"schemedemo"</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure><h4 id="DATA标签中匹配原则如下："><a href="#DATA标签中匹配原则如下：" class="headerlink" title="DATA标签中匹配原则如下："></a>DATA标签中匹配原则如下：</h4><ul><li><code>android:scheme</code> : 唤起协议</li><li><code>android:host</code> : 唤起host，只有置顶的host才可被唤起</li><li><code>android:pathPrefix</code> : 唤起的路径，对路径进一步的过滤</li></ul><h4 id="Activity中接受唤起协议的数据："><a href="#Activity中接受唤起协议的数据：" class="headerlink" title="Activity中接受唤起协议的数据："></a>Activity中接受唤起协议的数据：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Uri uri = getIntent().getData();</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">// 唤起链接</span></span><br><span class="line">sb.append(<span class="string">"string : "</span>).append(getIntent().getDataString()).append(<span class="string">"\n"</span>);</span><br><span class="line">sb.append(<span class="string">"scheme : "</span>).append(uri.getScheme()).append(<span class="string">"\n"</span>);</span><br><span class="line">sb.append(<span class="string">"host : "</span>).append(uri.getHost()).append(<span class="string">"\n"</span>);</span><br><span class="line">sb.append(<span class="string">"port : "</span>).append(uri.getPort()).append(<span class="string">"\n"</span>);</span><br><span class="line">sb.append(<span class="string">"path : "</span>).append(uri.getPath()).append(<span class="string">"\n"</span>);</span><br><span class="line"><span class="comment">// 接收唤起的参数</span></span><br><span class="line">sb.append(<span class="string">"name : "</span>).append(uri.getQueryParameter(<span class="string">"name"</span>)).append(<span class="string">"\n"</span>);</span><br><span class="line">sb.append(<span class="string">"page : "</span>).append(uri.getQueryParameter(<span class="string">"page"</span>));</span><br><span class="line"></span><br><span class="line">tv_data.setText(sb.toString());</span><br></pre></td></tr></table></figure><h3 id="测试资源"><a href="#测试资源" class="headerlink" title="测试资源"></a>测试资源</h3><p><a href="https://raw.githubusercontent.com/jingle1267/AndroidSchemeDemo/master/html/callback.html" rel="external nofollow noopener noreferrer" target="_blank">唤起源码</a><br><a href="https://rawgit.com/jingle1267/AndroidSchemeDemo/master/html/callback.html" rel="external nofollow noopener noreferrer" target="_blank">测试地址</a><br><a href="https://cdn.rawgit.com/jingle1267/AndroidSchemeDemo/master/html/callback.html" rel="external nofollow noopener noreferrer" target="_blank">正式地址</a></p><h3 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h3><p><a href="https://github.com/jingle1267/AndroidSchemeDemo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/AndroidSchemeDemo</a><br><br></p><p><br>本文地址 <a href="http://94275.cn/2015/12/03/html-call-native-app/">http://94275.cn/2015/12/03/html-call-native-app/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> H5唤起原生应用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 唤起 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android批量打包极速版]]></title>
      <url>http://94275.cn/2015/07/16/android-mutiple-channel-build/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>本文章介绍利用在META-INF目录内添加空文件的方式，实现批量快速打包Android应用。</p><a id="more"></a><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>Android应用安装包apk文件其实是一个压缩文件，可以将后缀修改为zip直接解压。解压安装文件后会发现在根目录有一个META-INF目录。如果在META-INF目录内添加空文件，可以不用重新签名应用。因此，通过为不同渠道的应用添加不同的空文件，可以唯一标识一个渠道。</p><p>“采用这种方式，每打一个渠道包只需复制一个apk，在META－INF中添加一个使用渠道号命名的空文件即可。这种打包方式速度非常快，900多个渠道不到一分钟就能打完。”</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 应用中添加获取应用渠道号逻辑</span><br><span class="line">2. IDE打包第一个应用</span><br><span class="line">3. 整理渠道号</span><br><span class="line">4. 配置打包脚本</span><br><span class="line">5. 运行脚本打包</span><br></pre></td></tr></table></figure><h3 id="1-应用中添加获取应用渠道号逻辑"><a href="#1-应用中添加获取应用渠道号逻辑" class="headerlink" title="1) 应用中添加获取应用渠道号逻辑"></a>1) 应用中添加获取应用渠道号逻辑</h3><p>获取应用号采用<code>ChannelUtil.java</code>工具类代替就好了，实现逻辑代码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.czt.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences.Editor;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.ApplicationInfo;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager.NameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> android.preference.PreferenceManager;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelUtil</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHANNEL_KEY = <span class="string">"cztchannel"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHANNEL_VERSION_KEY = <span class="string">"cztchannel_version"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String mChannel;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回市场。  如果获取失败返回""</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChannel</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getChannel(context, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回市场。  如果获取失败返回defaultChannel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultChannel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChannel</span><span class="params">(Context context, String defaultChannel)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//内存中获取</span></span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(mChannel))&#123;</span><br><span class="line">            <span class="keyword">return</span> mChannel;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//sp中获取</span></span><br><span class="line">        mChannel = getChannelBySharedPreferences(context);</span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(mChannel))&#123;</span><br><span class="line">            <span class="keyword">return</span> mChannel;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从apk中获取</span></span><br><span class="line">        mChannel = getChannelFromApk(context, CHANNEL_KEY);</span><br><span class="line">        <span class="keyword">if</span>(!TextUtils.isEmpty(mChannel))&#123;</span><br><span class="line">            <span class="comment">//保存sp中备用</span></span><br><span class="line">            saveChannelBySharedPreferences(context, mChannel);</span><br><span class="line">            <span class="keyword">return</span> mChannel;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全部获取失败</span></span><br><span class="line">        <span class="keyword">return</span> defaultChannel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从apk中获取版本信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channelKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getChannelFromApk</span><span class="params">(Context context, String channelKey)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从apk包中获取</span></span><br><span class="line">        ApplicationInfo appinfo = context.getApplicationInfo();</span><br><span class="line">        String sourceDir = appinfo.sourceDir;</span><br><span class="line">        <span class="comment">//默认放在meta-inf/里， 所以需要再拼接一下</span></span><br><span class="line">        String key = <span class="string">"META-INF/"</span> + channelKey;</span><br><span class="line">        String ret = <span class="string">""</span>;</span><br><span class="line">        ZipFile zipfile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zipfile = <span class="keyword">new</span> ZipFile(sourceDir);</span><br><span class="line">            Enumeration&lt;?&gt; entries = zipfile.entries();</span><br><span class="line">            <span class="keyword">while</span> (entries.hasMoreElements()) &#123;</span><br><span class="line">                ZipEntry entry = ((ZipEntry) entries.nextElement());</span><br><span class="line">                String entryName = entry.getName();</span><br><span class="line">                <span class="keyword">if</span> (entryName.startsWith(key)) &#123;</span><br><span class="line">                    ret = entryName;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (zipfile != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zipfile.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] split = ret.split(<span class="string">"_"</span>);</span><br><span class="line">        String channel = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (split != <span class="keyword">null</span> &amp;&amp; split.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            channel = ret.substring(split[<span class="number">0</span>].length() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地保存channel &amp; 对应版本号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveChannelBySharedPreferences</span><span class="params">(Context context, String channel)</span></span>&#123;</span><br><span class="line">        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(context);</span><br><span class="line">        Editor editor = sp.edit();</span><br><span class="line">        editor.putString(CHANNEL_KEY, channel);</span><br><span class="line">        editor.putInt(CHANNEL_VERSION_KEY, getVersionCode(context));</span><br><span class="line">        editor.commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从sp中获取channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 为空表示获取异常、sp中的值已经失效、sp中没有此值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getChannelBySharedPreferences</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(context);</span><br><span class="line">        <span class="keyword">int</span> currentVersionCode = getVersionCode(context);</span><br><span class="line">        <span class="keyword">if</span>(currentVersionCode == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//获取错误</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> versionCodeSaved = sp.getInt(CHANNEL_VERSION_KEY, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(versionCodeSaved == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//本地没有存储的channel对应的版本号</span></span><br><span class="line">            <span class="comment">//第一次使用  或者 原先存储版本号异常</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(currentVersionCode != versionCodeSaved)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sp.getString(CHANNEL_KEY, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从包信息中获取版本号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getVersionCode</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> context.getPackageManager().getPackageInfo(context.getPackageName(), <span class="number">0</span>).versionCode;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NameNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-IDE打包第一个应用"><a href="#2-IDE打包第一个应用" class="headerlink" title="2) IDE打包第一个应用"></a>2) IDE打包第一个应用</h3><p>这个没有什么好说的，按照之前打包方式，打包一个签名的应用包。</p><h3 id="3-整理渠道号"><a href="#3-整理渠道号" class="headerlink" title="3) 整理渠道号"></a>3) 整理渠道号</h3><p>编辑一个文本文件，添加渠道号，多个渠道之间用换行隔开。</p><h3 id="4-配置打包脚本"><a href="#4-配置打包脚本" class="headerlink" title="4) 配置打包脚本"></a>4) 配置打包脚本</h3><p>Python脚本<code>MultiChannelBuildTool.py</code>实现批量打包代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"># 空文件 便于写入此空文件到apk包中作为channel文件</span><br><span class="line">src_empty_file = <span class="string">'info/empty.txt'</span></span><br><span class="line"># 创建一个空文件（不存在则创建）</span><br><span class="line">f = open(src_empty_file, <span class="string">'w'</span>) </span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"># 获取当前目录中所有的apk源包</span><br><span class="line">src_apks = []</span><br><span class="line"># python3 : os.listdir()即可，这里使用兼容Python2的os.listdir('.')</span><br><span class="line"><span class="keyword">for</span> file in os.listdir(<span class="string">'.'</span>):</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        extension = os.path.splitext(file)[<span class="number">1</span>][<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> extension in <span class="string">'apk'</span>:</span><br><span class="line">            src_apks.append(file)</span><br><span class="line"></span><br><span class="line"># 获取渠道列表</span><br><span class="line">channel_file = <span class="string">'info/channel.txt'</span></span><br><span class="line">f = open(channel_file)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> src_apk in src_apks:</span><br><span class="line">    # file name (with extension)</span><br><span class="line">    src_apk_file_name = os.path.basename(src_apk)</span><br><span class="line">    # 分割文件名与后缀</span><br><span class="line">    temp_list = os.path.splitext(src_apk_file_name)</span><br><span class="line">    # name without extension</span><br><span class="line">    src_apk_name = temp_list[<span class="number">0</span>]</span><br><span class="line">    # 后缀名，包含.   例如: ".apk "</span><br><span class="line">    src_apk_extension = temp_list[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    # 创建生成目录,与文件名相关</span><br><span class="line">    output_dir = <span class="string">'output_'</span> + src_apk_name + <span class="string">'/'</span></span><br><span class="line">    # 目录不存在则创建</span><br><span class="line">    <span class="keyword">if</span> not os.path.exists(output_dir):</span><br><span class="line">        os.mkdir(output_dir)</span><br><span class="line">        </span><br><span class="line">    # 遍历渠道号并创建对应渠道号的apk文件</span><br><span class="line">    <span class="keyword">for</span> line in lines:</span><br><span class="line">        # 获取当前渠道号，因为从渠道文件中获得带有\n,所有strip一下</span><br><span class="line">        target_channel = line.strip()</span><br><span class="line">        # 拼接对应渠道号的apk</span><br><span class="line">        target_apk = output_dir + src_apk_name + <span class="string">"_"</span> + target_channel + src_apk_extension  </span><br><span class="line">        # 拷贝建立新apk</span><br><span class="line">        shutil.copy(src_apk,  target_apk)</span><br><span class="line">        # zip获取新建立的apk文件</span><br><span class="line">        zipped = zipfile.ZipFile(target_apk, <span class="string">'a'</span>, zipfile.ZIP_DEFLATED)</span><br><span class="line">        # 初始化渠道信息</span><br><span class="line">        empty_channel_file = <span class="string">"META-INF/paipai_channel*&#123;channel&#125;"</span>.format(channel = target_channel)</span><br><span class="line">        # 写入渠道信息</span><br><span class="line">        zipped.write(src_empty_file, empty_channel_file)</span><br><span class="line">        # 关闭zip流</span><br><span class="line">        zipped.close()</span><br></pre></td></tr></table></figure><p>将上述脚本文件中渠道文件修改为第三部中整理的渠道文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取渠道列表</span></span><br><span class="line">channel_file = <span class="string">'info/channel.txt'</span></span><br></pre></td></tr></table></figure><p>拷贝第二步中打包好的应用到当前脚本所在目录</p><h3 id="5-运行脚本打包"><a href="#5-运行脚本打包" class="headerlink" title="5) 运行脚本打包"></a>5) 运行脚本打包</h3><p>命令行模式进入当前目录输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python MultiChannelBuildTool.py</span><br></pre></td></tr></table></figure><p>大功告成，在当前目录下新生成了一个文件夹，改文件夹下就是我们各个渠道包了。</p><p>PS: apk用的是java那一套签名，放在META-INF文件夹里的文件原则上是不参与签名的。如果Google修改了apk的签名规则，这一套可能就不适用了。</p><p>源码地址：<a href="https://github.com/jingle1267/AndroidMultiChannelBuildTool" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jingle1267/AndroidMultiChannelBuildTool</a></p><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p>Android快速打包[手动]：<a href="http://ihongqiqu.com/2014/09/23/quick-build-apk/" rel="external nofollow noopener noreferrer" target="_blank">http://ihongqiqu.com/2014/09/23/quick-build-apk/</a><br>Ant批量打包：<a href="http://ihongqiqu.com/blog/2015/05/18/make-packages/" rel="external nofollow noopener noreferrer" target="_blank">http://ihongqiqu.com/2015/05/18/make-packages/</a></p><p>美团Android自动化之旅：<a href="http://tech.meituan.com/mt-apk-packaging.html" rel="external nofollow noopener noreferrer" target="_blank">http://tech.meituan.com/mt-apk-packaging.html</a><br>Android批量打包提速：<a href="http://www.cnblogs.com/ct2011/p/4152323.html" target="_blank" rel="noopener">http://www.cnblogs.com/ct2011/p/4152323.html</a></p><p><br>本文地址 <a href="http://94275.cn/2015/07/16/android-mutiple-channel-build/">http://94275.cn/2015/07/16/android-mutiple-channel-build/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android打多渠道包 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 打包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ant批量打包APK]]></title>
      <url>http://94275.cn/2015/05/18/make-packages/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>本文章介绍在Mac环境下利用Ant实现批量打包Android应用程序安装文件。</p><a id="more"></a><p>以下步骤均在MAC系统下完成，Demo链接见文章末尾。</p><h2 id="批量打包步骤"><a href="#批量打包步骤" class="headerlink" title="批量打包步骤"></a>批量打包步骤</h2><h3 id="1-安装Ant等发开工具"><a href="#1-安装Ant等发开工具" class="headerlink" title="1. 安装Ant等发开工具"></a>1. 安装Ant等发开工具</h3><h3 id="2-复制-AndroidManifest-xml-并命名为-AndroidManifest-xml-temp"><a href="#2-复制-AndroidManifest-xml-并命名为-AndroidManifest-xml-temp" class="headerlink" title="2. 复制 AndroidManifest.xml 并命名为 AndroidManifest.xml.temp"></a>2. 复制 AndroidManifest.xml 并命名为 AndroidManifest.xml.temp</h3><h3 id="3-修改-AndroidManifest-xml-temp-中渠道好为-AndroidManifest-xml-tem"><a href="#3-修改-AndroidManifest-xml-temp-中渠道好为-AndroidManifest-xml-tem" class="headerlink" title="3. 修改 AndroidManifest.xml.temp 中渠道好为 AndroidManifest.xml.tem"></a>3. 修改 AndroidManifest.xml.temp 中渠道好为 AndroidManifest.xml.tem</h3><h3 id="4-添加签名信息"><a href="#4-添加签名信息" class="headerlink" title="4. 添加签名信息"></a>4. 添加签名信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sdk.dir=/Users/zhenguo/Documents/develop/adt-bundle-mac-x86_64-20140702/sdk</span><br><span class="line"></span><br><span class="line">key.store=/Users/zhenguo/Documents/develop/key/package.keystore</span><br><span class="line">key.alias=aname</span><br><span class="line">key.store.password=123456</span><br><span class="line">key.alias.password=123456</span><br></pre></td></tr></table></figure><h3 id="5-修改打包程序配置"><a href="#5-修改打包程序配置" class="headerlink" title="5. 修改打包程序配置"></a>5. 修改打包程序配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 要打包的项目根目录</span><br><span class="line"> */</span><br><span class="line"> private final static String projectBasePath = &quot;/Users/zhenguo/Documents/develop/github/AndroidAntMakePackage/MakePackageDemo&quot;;</span><br><span class="line">/**</span><br><span class="line"> * 保存打包之后的apk的根目录</span><br><span class="line"> */</span><br><span class="line">private final static String copyApkPath = &quot;/Users/zhenguo/Documents/develop/apks&quot;;</span><br><span class="line">/**</span><br><span class="line"> * 这里的文件名必须是准确的项目名！就是Project工程的bin目录下面的apk安装包的名字</span><br><span class="line"> */</span><br><span class="line">private final static String signApk = &quot;MakePackageDemo-release.apk&quot;;</span><br><span class="line">/**</span><br><span class="line"> * 重命名之后的项目名称前缀(地图项目不用改)</span><br><span class="line"> */</span><br><span class="line">private final static String reNameApk = &quot;Project_&quot;;</span><br><span class="line">/**</span><br><span class="line"> * 需要修改manifest文件的地方(占位符)</span><br><span class="line"> */</span><br><span class="line">private final static String placeHolder = &quot;@market@&quot;;</span><br></pre></td></tr></table></figure><h3 id="6-在-market-txt-中添加渠道信息，每个渠道占一行"><a href="#6-在-market-txt-中添加渠道信息，每个渠道占一行" class="headerlink" title="6. 在 market.txt 中添加渠道信息，每个渠道占一行"></a>6. 在 market.txt 中添加渠道信息，每个渠道占一行</h3><h3 id="7-运行-MakePackages-；"><a href="#7-运行-MakePackages-；" class="headerlink" title="7. 运行 MakePackages ；"></a>7. 运行 MakePackages ；</h3><h2 id="工程介绍"><a href="#工程介绍" class="headerlink" title="工程介绍"></a>工程介绍</h2><ul><li>MakePackageDemo Android项目 需要批量打包的源码</li><li><p>MakePackages Java项目 实现批量打包的程序</p><p>Demo地址：<a href="https://github.com/HongQiQu/AndroidAntMakePackage" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/HongQiQu/AndroidAntMakePackage</a></p><p>其他打包方式参考<br>Android快速打包[手动]：<a href="http://ihongqiqu.com/2014/09/23/quick-build-apk/" rel="external nofollow noopener noreferrer" target="_blank">http://ihongqiqu.com/2014/09/23/quick-build-apk/</a><br>Ant批量打包：<a href="http://ihongqiqu.com/2015/07/16/android-mutiple-channel-build/" rel="external nofollow noopener noreferrer" target="_blank">http://ihongqiqu.com/2015/07/16/android-mutiple-channel-build/</a></p></li></ul><p><br>本文地址 <a href="http://94275.cn/2015/05/18/make-packages/">http://94275.cn/2015/05/18/make-packages/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android打多渠道包 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 打包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[桥接模式]]></title>
      <url>http://94275.cn/2014/12/09/bridgepattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>桥接模式(Bridge)，将抽象部分与它的实现部分分离，使它们都可以独立地变化。优先使用对象的合成/聚合将有助于你保持每个类被封装，并被集中在单个任务上。这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>当一个对象有多个变化因素的时候，通过抽象这些变化因素，将依赖具体实现，修改为依赖抽象。</li><li>当某个变化因素在多个对象中共享时。我们可以抽象出这个变化因素，然后实现这些不同的变化因素。</li><li>当我们期望一个对象的多个变化因素可以动态的变化，而且不影响客户的程序的使用时。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>分离抽象和实现部分</li><li>更好的扩展性</li><li>可动态地切换实现</li><li>可减少子类的个数</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li><li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/BridgePattern.png" alt="BridgePattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Implementor:实现接口<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 12/8/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteImplementorA:实现派生类A<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现派生类A</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 12/8/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">implements</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"具体实现A的方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteImplementorB:实现派生类B<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现派生类B</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 12/8/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorB</span> <span class="keyword">implements</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"具体实现B的方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Abstraction:抽象类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 12/8/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Implementor implementor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImplementor</span><span class="params">(Implementor implementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.implementor = implementor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>RefinedAbstraction:抽象实现子类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象实现子类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 12/8/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (implementor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            implementor.operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端调用</span></span><br><span class="line"><span class="comment"> * 桥接模式(Bridge)，将抽象部分与它的实现部分分离，使它们都可以独立地变化。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 12/8/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Abstraction abstraction = <span class="keyword">new</span> RefinedAbstraction();</span><br><span class="line"></span><br><span class="line">        abstraction.setImplementor(<span class="keyword">new</span> ConcreteImplementorA());</span><br><span class="line">        abstraction.operation();</span><br><span class="line"></span><br><span class="line">        abstraction.setImplementor(<span class="keyword">new</span> ConcreteImplementorB());</span><br><span class="line">        abstraction.operation();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/12/09/bridgepattern/">http://94275.cn/2014/12/09/bridgepattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单例模式]]></title>
      <url>http://94275.cn/2014/12/08/singletonpattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>单例模式(Singleton)，保证一个类仅有一个实例，并提供一个访问它的全局访问点。通常我们可以让一个全局变量使得一个对象被访问，但是它不能防止你实例化多个对象。一个最好的的办法就是，让类自身负责保存它的唯一实例。这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>当某个对象只能存在一个实例的情况下使用单例模式；</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>提供了对唯一实例的受控访问。</li><li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。</li><li>单例类的职责过重，在一定程度上违背了“单一职责原则”。</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/SingletonPattern.png" alt="SingletonPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>SingletonA：饿汉是单例类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例设计模式中的饿汉式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 12/5/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonA instance = <span class="keyword">new</span> SingletonA();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonA <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>SingletonB：懒汉是单例类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例设计模式中的懒汉式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 12/5/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonB instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonB <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonB();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client：客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式客户端调用</span></span><br><span class="line"><span class="comment"> * 简单说来，单例模式（也叫单件模式）的作用就是保证在整个应用程序的生命周期中，</span></span><br><span class="line"><span class="comment"> * 任何一个时刻，单例类的实例都只存在一个（当然也可以不存在）。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 12/5/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 饱汉实现方式</span></span><br><span class="line">        SingletonA singletonA1 = SingletonA.getInstance();</span><br><span class="line">        SingletonA singletonA2 = SingletonA.getInstance();</span><br><span class="line">        <span class="keyword">if</span> (singletonA1 == singletonA2) &#123;</span><br><span class="line">            System.out.println(<span class="string">"singletonA1和singletonA2是一个对象"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"singletonA1和singletonA2不是一个对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 饿汉实现方式</span></span><br><span class="line">        SingletonB singletonB1 = SingletonB.getInstance();</span><br><span class="line">        SingletonB singletonB2 = SingletonB.getInstance();</span><br><span class="line">        <span class="keyword">if</span> (singletonB1 == singletonB2) &#123;</span><br><span class="line">            System.out.println(<span class="string">"singletonB1和singletonB2是一个对象"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"singletonB1和singletonB2不是一个对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更方便的实现方式 待续...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/12/08/singletonpattern/">http://94275.cn/2014/12/08/singletonpattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[迭代器模式]]></title>
      <url>http://94275.cn/2014/12/05/iteratorpattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>迭代模式(Iterator)，提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>当你需要访问一个聚集对象，而且不管这些对象是什么都需要遍历的时候，你就应该考虑用迭代器模式。</li><li>你需要对聚集有多重方式遍历时，可以考虑用迭代器模式。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>迭代器(Iterator)模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，有可让外部代码透明地访问集合内部的数据。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐，大家可能都有感觉，像ArrayList，我们宁可愿意使用for循环和get方法来遍历集合。</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><br>本文地址 <a href="http://94275.cn/2014/12/05/iteratorpattern/">http://94275.cn/2014/12/05/iteratorpattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[组合模式]]></title>
      <url>http://94275.cn/2014/12/04/compositepattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>组合模式(Composite)，将对象组合成树形结构以表示‘部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>需求中是体现部分与整体层次的结构是，以及你希望用户可以忽略组合对象与单个对象的不通过，统一地使用组合结构中的所有对象时，就应该考虑用组合模式了。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>高层模块调用简单。一棵树形机构中的所有节点都是Component，局部和整体对调用者来说没有任何区别，也就是说，高层模块不必关心自己处理的是单个对象还是整个组合结构，简化了高层模块的代码。</li><li>节点自由增加。使用了组合模式后，增加一个树枝节点、树叶节点变得非常容易，只要找到它的父节点就成，非常容易扩展，符合开闭原则，对以后的维护非常有利。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>组合模式有一个非常明显的缺点，看到我们在客户端调用中的定义，提到树叶和树枝使用时的定义了吗？直接使用了实现类！这在面向接口编程上是很不恰当的，与依赖倒置原则冲突，读者在使用的时候要考虑清楚，它限制了你接口的影响范围。</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/CompositePattern.png" alt="CompositePattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Component:组合对象抽象类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组合对象抽象类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/30/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getDepthStr</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; depth; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Leaf:叶子节点，无子节点<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 叶子节点，无子节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/30/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cannot add to a leaf!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cannot remove to a leaf!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        System.out.println(getDepthStr(depth) + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Composite:子节点<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/30/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Component&gt; children = <span class="keyword">new</span> ArrayList&lt;Component&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Composite</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        children.add(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        children.remove(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        System.out.println(getDepthStr(depth) + name);</span><br><span class="line">        <span class="keyword">for</span> (Component component : children) &#123;</span><br><span class="line">            component.display(depth + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端调用</span></span><br><span class="line"><span class="comment"> * 组合模式(Composite)，将对象组合成树形结构以表示‘部分-整体’的层次结构。组合模式使得用户</span></span><br><span class="line"><span class="comment"> * 对单个对象和组合对象的使用具有一致性。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/30/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Composite root = <span class="keyword">new</span> Composite(<span class="string">"root"</span>);</span><br><span class="line">        root.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf A"</span>));</span><br><span class="line">        root.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf B"</span>));</span><br><span class="line"></span><br><span class="line">        Composite composite = <span class="keyword">new</span> Composite(<span class="string">"Composite X"</span>);</span><br><span class="line">        composite.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XA"</span>));</span><br><span class="line">        composite.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XB"</span>));</span><br><span class="line"></span><br><span class="line">        root.add(composite);</span><br><span class="line"></span><br><span class="line">        Composite composite1 = <span class="keyword">new</span> Composite(<span class="string">"Composite XY"</span>);</span><br><span class="line">        composite1.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XYA"</span>));</span><br><span class="line">        composite1.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XYB"</span>));</span><br><span class="line"></span><br><span class="line">        composite.add(composite1);</span><br><span class="line"></span><br><span class="line">        root.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf C"</span>));</span><br><span class="line"></span><br><span class="line">        Leaf leaf = <span class="keyword">new</span> Leaf(<span class="string">"Leaf D"</span>);</span><br><span class="line">        root.add(leaf);</span><br><span class="line">        root.remove(leaf);</span><br><span class="line"></span><br><span class="line">        root.display(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/12/04/compositepattern/">http://94275.cn/2014/12/04/compositepattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[备忘录模式]]></title>
      <url>http://94275.cn/2014/12/03/mementopattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>备忘录模式(Memento),再不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>Memento模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性只是众多属性中的一小部分是，Originator可以根据保存的Memento信息还原到前一状态。</li><li>如果某个系统中使用命令模式时，需要实现命令的撤销功能，那么命令模式可以使用备忘录模式来存储可撤销的状态。</li><li>当角色的状态改变的时候，有可能这个状态无效，这时候就可以使用暂时存储起来的备忘录将状态复原。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>要保存的细节封装在了Memento中，如果需要修改保存的细节，这个时候不会影响客户端。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>角色状态需要完整存储到备忘录对象中，如果状态数据很大很多，那么在资源消耗上，备忘录对象会非常耗内存。</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/MementoPattern.png" alt="MementoPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Memento:备忘录类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 备忘录类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/30/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Originator:发起人<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发起人</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/30/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        state = memento.getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Current State : "</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Caretaker:管理者类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 管理者类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/30/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端调用</span></span><br><span class="line"><span class="comment"> * 备忘录模式(Memento)，再不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</span></span><br><span class="line"><span class="comment"> * 这样以后就可将该对象恢复到原先保存的状态。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/30/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line">        originator.setState(<span class="string">"On"</span>);</span><br><span class="line">        originator.show();</span><br><span class="line"></span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line">        caretaker.setMemento(originator.createMemento());</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">"Off"</span>);</span><br><span class="line">        originator.show();</span><br><span class="line"></span><br><span class="line">        originator.setMemento(caretaker.getMemento());</span><br><span class="line">        originator.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/12/03/mementopattern/">http://94275.cn/2014/12/03/mementopattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[适配器模式]]></title>
      <url>http://94275.cn/2014/12/02/adapterpattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>适配器模式(Adapter)，将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。适配器模式实现方式有两种：类适配和对象适配</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况。两个系统双方要产生关系，但是双方不太容易修改的时候就需要考虑使用适配器模式。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>将目标类和适配者类解耦；</li><li>增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性；</li><li>灵活性和扩展性都非常好，符合开闭原则；</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>类适配对Java、C#等不支持多继承的语言来说具有一定的局限性；</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p>类适配UML结构图：<br><img src="/imgs/post/ClassAdapterPattern.png" alt="ClassAdapterPattern"><br>对象适配UML结构图：<br><img src="/imgs/post/ObjectAdapterPattern.png" alt="ObjectAdapterPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Source:源，需要适配的对象<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/29/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ITarget:目标接口，期望的接口<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/29/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITarget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ClassAdapter:类适配<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类适配器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/29/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassAdapter</span> <span class="keyword">extends</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">ITarget</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>OjbectAdapter:对象适配<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象适配</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/29/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAdapter</span> <span class="keyword">implements</span> <span class="title">ITarget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Source source = <span class="keyword">new</span> Source();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        source.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端调用</span></span><br><span class="line"><span class="comment"> * 适配器模式(Adapter)，将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口</span></span><br><span class="line"><span class="comment"> * 不兼容而不能一起工作的那些类可以一起工作。</span></span><br><span class="line"><span class="comment"> * 适配器模式实现方式有两种：类适配和对象适配</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/29/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 类适配</span></span><br><span class="line">        System.out.println(<span class="string">"类适配："</span>);</span><br><span class="line">        ClassAdapter classAdapter = <span class="keyword">new</span> ClassAdapter();</span><br><span class="line">        classAdapter.run();</span><br><span class="line">        classAdapter.fly();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象适配</span></span><br><span class="line">        System.out.println(<span class="string">"对象适配："</span>);</span><br><span class="line">        ObjectAdapter objectAdapter = <span class="keyword">new</span> ObjectAdapter();</span><br><span class="line">        objectAdapter.run();</span><br><span class="line">        objectAdapter.fly();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/12/02/adapterpattern/">http://94275.cn/2014/12/02/adapterpattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[观察者模式]]></title>
      <url>http://94275.cn/2014/12/01/observerpattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>观察者模式(Observer)，又叫发布-订阅模式(Publish/Subscribe)，定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主体对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>当一个对象的改变需要同时改变其他对象的时候，而且它不知道具体有多少对象有待改变时，应该考虑使用观察者模式。一个抽象模型有两个方面，其中一方面依赖于另一方面，这时用观察者模式可以将这两者封装在独立的对象中使它们各自的独立的改变和复用。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>观察者模式在被观察者和观察者之间建立一个抽象的耦合。</li><li>观察者模式支持广播通讯。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li><li>如果在被观察者之间有循环依赖的话，被观察者会触发它们之间进行循环调用，导致系统崩溃。在使用观察者模式是要特别注意这一点。</li><li>如果对观察者的通知是通过另外的线程进行异步投递的话，系统必须保证投递是以自恰的方式进行的。</li><li>虽然观察者模式可以随时使观察者知道所观察的对象发生了变化，但是观察者模式没有相应的机制使观察者知道所观察的对象是怎么发生变化的。</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/ObserverPattern.png" alt="ObserverPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Subject:主题或叫抽象通知者<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主题或叫抽象通知者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/29/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知所有观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Observer:抽象观察者<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象观察者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/29/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteSubject:具体主题或具体通知者<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体主题或具体通知者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/29/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteObserver:具体观察者<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体观察者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/29/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ConcreteSubject subject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteObserver</span><span class="params">(String name, ConcreteSubject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"观察者 "</span> + name + <span class="string">" 的状态是 "</span> + subject.getState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcreteSubject <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubject</span><span class="params">(ConcreteSubject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端调用</span></span><br><span class="line"><span class="comment"> * 观察者模式(Observer)，又叫发布-订阅模式(Publish/Subscribe)，定义了一种一对多的依赖关系，让多个观察者对象</span></span><br><span class="line"><span class="comment"> * 同时监听某一个主题对象。这个主体对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/29/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConcreteSubject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line"></span><br><span class="line">        subject.attach(<span class="keyword">new</span> ConcreteObserver(<span class="string">"A"</span>, subject));</span><br><span class="line">        subject.attach(<span class="keyword">new</span> ConcreteObserver(<span class="string">"B"</span>, subject));</span><br><span class="line">        subject.attach(<span class="keyword">new</span> ConcreteObserver(<span class="string">"C"</span>, subject));</span><br><span class="line"></span><br><span class="line">        subject.setState(<span class="string">"XYZ"</span>);</span><br><span class="line">        subject.notifyAllObservers();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/12/01/observerpattern/">http://94275.cn/2014/12/01/observerpattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[建造者模式]]></title>
      <url>http://94275.cn/2014/11/30/builderpattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>建造者模式(Builder)，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示.</p><a id="more"></a><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>建造者模式主要用于创建一些复杂的对象，这些对象内部的构建的建造顺序通常是稳定的，但对象内部的构造通常面临着复杂的变化。建造者模式是在当创建复杂对象的算法应该独立于改对象的组成部分以及它们的装配方式时适用的模式。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>如果我们用了建造者模式，那么用户就只需要指定需要创建的类型就可以得到它们，而具体建造的过程和细节就不需要知道了。</li><li>建造者模式的好处就是使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，所有若需要改变一个产品的内部表示，只需要再定义一个具体的建造者就可以了。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="https://github.com/jingle1267/octopress/raw/master/source/imgs/post/BuilderPattern.png" alt="BuilderPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Builder:抽象建造者类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象建造者类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/27/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">getResult</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Product:产品类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/27/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; parts = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String part)</span> </span>&#123;</span><br><span class="line">        parts.add(part);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"产品创建:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String part : parts) &#123;</span><br><span class="line">            System.out.println(<span class="string">"--- "</span> + part);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Director:指挥者类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指挥者类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/27/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        builder.buildPartA();</span><br><span class="line">        builder.buildPartB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteBuilder1:具体建造者类1<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体建造者类1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/27/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder1</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.add(<span class="string">"部件A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.add(<span class="string">"部件B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteBuilder2:具体建造者类2<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体建造者类2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/27/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder2</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.add(<span class="string">"部件X"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.add(<span class="string">"部件Y"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 建造者模式(Builder)，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/27/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Director director = <span class="keyword">new</span> Director();</span><br><span class="line">        Builder b1 = <span class="keyword">new</span> ConcreteBuilder1();</span><br><span class="line">        Builder b2 = <span class="keyword">new</span> ConcreteBuilder2();</span><br><span class="line"></span><br><span class="line">        director.construct(b1);</span><br><span class="line">        Product p1 = b1.getResult();</span><br><span class="line">        p1.show();</span><br><span class="line"></span><br><span class="line">        director.construct(b2);</span><br><span class="line">        Product p2 = b2.getResult();</span><br><span class="line">        p2.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/11/30/builderpattern/">http://94275.cn/2014/11/30/builderpattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[外观模式]]></title>
      <url>http://94275.cn/2014/11/29/facadepattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>外观模式(Facade)，又叫门面模式，它是为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口是的这一子系统更加容易使用。</p><a id="more"></a><h3 id="适用原则"><a href="#适用原则" class="headerlink" title="适用原则"></a>适用原则</h3><p>首先，在设计初期阶段，应该有意识地将不同的两个层分离，层与层之间建立外观Facade；其次，在开发阶段，子系统往往因为不断的重构演化变得越来越复杂，增加外观Facade可以提供一个简单的接口，减少他们之间的依赖；第三，在维护一个遗留的大型系统时，可能这个系统已经非常难以维护和扩展了，你可以为新系统开发一个外观Facade类，来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让新系统与Facade对象交互，Facade与遗留带啊交互所有复杂的工作。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>它对客户屏蔽子系统组件，因而减少了客户处理的对象的数目并使得子系统使用起来更加方便。</li><li>它实现了子系统与客户之间的松耦合关系，而子系统内部的功能组件往往是紧耦合的。</li><li>如果应用需要，它并不限制它们使用子系统类。因此你可以在系统易用性和通用性之间加以选择。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>不符合开闭原则。</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/FacadePattern.png" alt="FacadePattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Facade:外观类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外观类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/27/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SubSystemOne one;</span><br><span class="line">    <span class="keyword">private</span> SubSystemTwo two;</span><br><span class="line">    <span class="keyword">private</span> SubSystemThree three;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        one = <span class="keyword">new</span> SubSystemOne();</span><br><span class="line">        two = <span class="keyword">new</span> SubSystemTwo();</span><br><span class="line">        three = <span class="keyword">new</span> SubSystemThree();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法组A:"</span>);</span><br><span class="line">        one.methodOne();</span><br><span class="line">        three.methodThree();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法组A:"</span>);</span><br><span class="line">        two.methodTwo();</span><br><span class="line">        three.methodThree();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>SubSystemOne:子系统One<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子系统One</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/27/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSystemOne</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统One的方法One"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>SubSystemTwo:子系统Two<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子系统Two</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/27/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSystemTwo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统Two方法Two"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>SubSystemThree:子系统Three<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子系统Three</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/27/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSystemThree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodThree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统Three方法Three"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端调用</span></span><br><span class="line"><span class="comment"> * 外观模式(Facade)，为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口是的这一子系统更加容易使用。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/27/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line"></span><br><span class="line">        facade.methodA();</span><br><span class="line">        facade.methodB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/11/29/facadepattern/">http://94275.cn/2014/11/29/facadepattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[模板方法模式]]></title>
      <url>http://94275.cn/2014/11/28/templatemethodpattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>模板方法模式（TemplateMethod），定义一个操作中的算法骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><a id="more"></a><h3 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h3><p>当我们要完成在某一细节层次一致的一个过程或一系列步骤，但其个别步骤在更详细的层次上的实现可能不同时，我们通常考虑用模板方法模式来处理。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>模板方法模式在一个类中形式化地定义算法，而由它的子类实现细节的处理。</li><li>模板方法是一种代码复用的基本技术。它们在类库中尤为重要，它们提取了类库中的公共行为。</li><li>模板方法模式导致一种反向的控制结构，这种结构有时被称为“好莱坞法则”，即“别找我们，,我们找你”通过一个父类调用其子类的操作(而不是相反的子类调用父类)，通过对子类的扩展增加新的行为，符合“开闭原则”</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象，但是更加符合“单一职责原则”，使得类的内聚性得以提高。</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/TemplateMethodPattern.png" alt="TemplateMethodPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>AbstractClass:抽象模板<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象模板</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/24/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板方法 实现算法骨架</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"模板方法："</span>);</span><br><span class="line">        start();</span><br><span class="line">        end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteClassA:实现抽象模板类A<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现抽象模板类A</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/24/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassA</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteClassA start()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteClassA end()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteClassB:实现抽象模板类B<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现抽象模板类B</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/24/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassB</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteClassB start()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteClassB end()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/24/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractClass cls;</span><br><span class="line"></span><br><span class="line">        cls = <span class="keyword">new</span> ConcreteClassA();</span><br><span class="line">        cls.run();</span><br><span class="line"></span><br><span class="line">        cls = <span class="keyword">new</span> ConcreteClassB();</span><br><span class="line">        cls.run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/11/28/templatemethodpattern/">http://94275.cn/2014/11/28/templatemethodpattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原型模式]]></title>
      <url>http://94275.cn/2014/11/27/prototypepattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>原型模式(Prototype)，用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。原型模式其实就是从一个对象再创建另外一个可定制的对象，而且不需知道任何的创建的细节。</p><a id="more"></a><p>原型模式主要实现有深拷贝和强拷贝两种方式。浅拷贝：对值类型的成员变量进行值的复制,对引用类型的成员变量只复制引用,不复制引用的对象；深拷贝：对值类型的成员变量进行值的复制,对引用类型的成员变量也进行引用对象的复制。</p><h3 id="适用原则"><a href="#适用原则" class="headerlink" title="适用原则"></a>适用原则</h3><ol><li>资源优化场景：类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。</li><li>性能和安全要求的场景：通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</li><li>一个对象多个修改者的场景：一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>性能好：使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。</li><li>简化对象创建：使用原型模式的另一个好处是简化对象的创建，使得创建对象就像我们在编辑文档时的复制粘贴一样简单。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>每一个类都必须配备一个克隆方法。配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类来说不是很难，而对于已经有的类不一定很容易，特别是当一个类引用不支持序列化的间接对象，或者引用含有循环结构的时候。</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/PrototypePattern.png" alt="PrototypePattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Prototype:抽象原型角色<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象原型角色</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/23/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 克隆自身的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个从自身克隆出来的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcretePrototype:具体的原型实现对象<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体的实现对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/23/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">implements</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"tag"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcretePrototype</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">        name = tag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 最简单的克隆，新建一个自身对象。</span></span><br><span class="line">        ConcretePrototype concretePrototype = <span class="keyword">new</span> ConcretePrototype(<span class="keyword">this</span>.name);</span><br><span class="line">        concretePrototype.age = <span class="keyword">this</span>.age;</span><br><span class="line">        <span class="keyword">return</span> concretePrototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式(Prototype)，用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</span></span><br><span class="line"><span class="comment"> * 原型模式其实就是从一个对象再创建另外一个可定制的对象，而且不需知道任何的创建的细节。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/23/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ConcretePrototype concretePrototype = <span class="keyword">new</span> ConcretePrototype(<span class="string">"张三"</span>);</span><br><span class="line">        concretePrototype.age = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">        ConcretePrototype concretePrototype1 = (ConcretePrototype) concretePrototype.clone();</span><br><span class="line">        concretePrototype1.age = <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(String.format(<span class="string">"用户：%s 年龄：%d"</span>, concretePrototype.name, concretePrototype.age));</span><br><span class="line">        System.out.println(String.format(<span class="string">"用户：%s 年龄：%d"</span>, concretePrototype1.name, concretePrototype1.age));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/11/27/prototypepattern/">http://94275.cn/2014/11/27/prototypepattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[状态模式]]></title>
      <url>http://94275.cn/2014/11/26/statepattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>状态模式(StatePattern)，当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。</p><a id="more"></a><h3 id="适用原则"><a href="#适用原则" class="headerlink" title="适用原则"></a>适用原则</h3><p>状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂是的情况。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为是，就可以考虑使用状态模式。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>状态模式的好处是将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。程序中也也就是消除庞大的条件分支语句。</li><li>状态模式通过把各种状态转移逻辑分布到State的子类之间，来减少相互间的依赖。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>导致较多的ConcreteState子类。</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/StatePattern.png" alt="StatePattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>IState:抽象状态类，定义一个接口以封装与Context的一个特定状态相关的行为<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象状态类，定义一个接口以封装与Context的一个特定状态相关的行为</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/26/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Context context)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteStateA:具体状态类A<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体状态类A</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/26/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">implements</span> <span class="title">IState</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"状态A"</span>);</span><br><span class="line">        context.setState(<span class="keyword">new</span> ConcreteStateB());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteStateB:具体状态类B<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体状态类B</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/26/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"状态B"</span>);</span><br><span class="line">        context.setState(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Context:维护一个ConcreteState子类的实例，这个实例定义当前的状态。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Context类，维护一个ConcreteState子类的实例，这个实例定义当前的状态。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/26/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IState state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(IState state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(IState state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.handle(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/26/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">        <span class="comment">// 不断地进行请求，同时更改状态</span></span><br><span class="line">        context.request();</span><br><span class="line">        context.request();</span><br><span class="line">        context.request();</span><br><span class="line">        context.request();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/11/26/statepattern/">http://94275.cn/2014/11/26/statepattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代理模式]]></title>
      <url>http://94275.cn/2014/11/25/proxypattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>代理模式(Proxy)，为其他对象提供一种代理以控制对这个对象的访问。</p><a id="more"></a><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循单一职责的原则。</p><h3 id="适用原则"><a href="#适用原则" class="headerlink" title="适用原则"></a>适用原则</h3><ol><li>远程代理，也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事情。</li><li>虚拟代理，是根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象。</li><li>安全代理，用来控制真是对象访问的权限。</li><li>智能指引，是指当调用真是的对象时，代理处理另外一些事情。<br>在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上.在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>职责清晰。真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，通过后期的代理完成一件完成事务，附带的结果就是编程简洁清晰。</li><li>高扩展性</li><li>代理对象可以在客户端和目标对象之间起到中介的作用，这样起到了的作用和保护了目标对象的作用。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li><li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/ProxyPattern.png" alt="ProxyPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>IProject:抽象借口<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>RealProject:真实的对象<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真实的对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 真实的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"真实的请求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Proxy:代理<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ISubject subject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理开始"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.subject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.subject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.subject.request();</span><br><span class="line">        System.out.println(<span class="string">"代理结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理模式(Proxy)，为其他对象提供一种代理以控制对这个对象的访问。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/11/25/proxypattern/">http://94275.cn/2014/11/25/proxypattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[抽象工厂]]></title>
      <url>http://94275.cn/2014/11/24/abstractfactorypattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>抽象工厂模式(Abstract Factory)，提供了一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。</p><a id="more"></a><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>开闭原则：对扩展开放，对修改关闭。</li><li>里氏替换：主张使用“抽象(Abstraction)”和“多态(Polymorphism)”将设计中的静态结构改为动态结构，维持设计的封闭性。</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>抽象工厂模式特别适合于这样的一种产品结构：产品分为几个系列，在每个系列中，产品的布局都是要同的，在一个系列中某个位置的产品，在另一个系列中一定有一个对应的产品。这样的产品结构是存在的，这几个系列中同一位置的产品可能是互斥的，它们是针对不同客户的解决方案，每个客户都只择其一。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>抽象工厂模式除了具有工厂方法模式的优点外，最主要的优点就是可以在类的内部对产品族进行约束。所谓的产品族，一般或多或少的都存在一定的关联，抽象工厂模式就可以在类内部对产品族的关联关系进行定义和描述，而不必专门引入一个新的类来进行管理。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>产品族的扩展将是一件十分费力的事情，假如产品族中需要增加一个新的产品，则几乎所有的工厂类都需要进行修改。所以使用抽象工厂模式时，对产品等级结构的划分是非常重要的。</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/AbstractFactoryPattern.png" alt="AbstractFactoryPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>IFactory:抽象工厂类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建产品A</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductA <span class="title">createProductA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建产品B</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductB <span class="title">createProductB</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Factory1:工厂1<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory1</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Factory2:工厂2<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory2</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>IProductA:抽象产品A<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象产品A</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProductA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产品A的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ProductA1:产品A1<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">implements</span> <span class="title">IProductA</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ProductA2:产品A2<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">implements</span> <span class="title">IProductA</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>IProductB:抽象产品B<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象产品B</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProductB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产品B的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ProductB1:产品B1<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">implements</span> <span class="title">IProductB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ProductB2:产品B2<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">implements</span> <span class="title">IProductB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂(Abstract Factory)，提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IFactory factory;</span><br><span class="line">        IProductA productA;</span><br><span class="line">        IProductB productB;</span><br><span class="line"></span><br><span class="line">        factory = <span class="keyword">new</span> Factory1();</span><br><span class="line">        productA = factory.createProductA();</span><br><span class="line">        productB = factory.createProductB();</span><br><span class="line">        productA.run();</span><br><span class="line">        productB.run();</span><br><span class="line"></span><br><span class="line">        factory = <span class="keyword">new</span> Factory2();</span><br><span class="line">        productA = factory.createProductA();</span><br><span class="line">        productB = factory.createProductB();</span><br><span class="line">        productA.run();</span><br><span class="line">        productB.run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/11/24/abstractfactorypattern/">http://94275.cn/2014/11/24/abstractfactorypattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[策略模式]]></title>
      <url>http://94275.cn/2014/11/23/strategypattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>策略模式(Strategy)是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。</p><a id="more"></a><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>策略模式遵循开闭原则，对扩展开放，对修改关闭。</p><h3 id="适用原则"><a href="#适用原则" class="headerlink" title="适用原则"></a>适用原则</h3><ol><li>策略模式都是用来封装算法的，但在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。</li><li>对客户隐藏具体策略(算法)的实现细节，彼此完全独立。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>策略模式的有优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。</li><li>策略模式提供了可以替换继承关系的办法。继承</li><li>使用策略模式可以避免使用多重条件转移语句。</li><li>策略模式提供了管理相关的算法族的办法。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li><li>策略模式造成很多的策略类，每个具体策略类都会产生一个新类。</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/StrategyPattern.png" alt="StrategyPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>IStrategy:抽象算法类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象算法类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithm</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>StrategyA:算法A<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体算法A</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyA</span> <span class="keyword">implements</span> <span class="title">IStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"算法A实现"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>StrategyB:算法B<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体算法B</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyB</span> <span class="keyword">implements</span> <span class="title">IStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"算法B实现"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Context:上下文<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上下文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(IStrategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上下文接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy.algorithm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略模式(Strategy)是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，</span></span><br><span class="line"><span class="comment"> * 只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context;</span><br><span class="line"></span><br><span class="line">        context = <span class="keyword">new</span> Context(<span class="keyword">new</span> StrategyA());</span><br><span class="line">        context.contextInterface();</span><br><span class="line"></span><br><span class="line">        context = <span class="keyword">new</span> Context(<span class="keyword">new</span> StrategyB());</span><br><span class="line">        context.contextInterface();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/11/23/strategypattern/">http://94275.cn/2014/11/23/strategypattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单工厂]]></title>
      <url>http://94275.cn/2014/11/22/simplefactorypattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>简单工厂模式是属于创建型模式，又叫做静态工厂方法（Static Factory Method）模式，简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式。</p><a id="more"></a><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>迪米特法则：一个对象应该对其他对象保持最少的了解。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>简单工厂模式分离产品的创建者和消费者，有利于软件系统结构的优化。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>工厂类是整个模式的关键所在。它包含必要的判断逻辑，能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。用户在使用时可以直接根据工厂类去创建所需的实例，而无需了解这些对象是如何创建以及如何组织的。有利于整个软件体系结构的优化。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>由于工厂类集中了所有实例的创建逻辑，这就直接导致一旦这个工厂出了问题，所有的客户端都会受到牵连；而且由于简单工厂模式的产品室基于一个共同的抽象类或者接口，这样一来，但产品的种类增加的时候，即有不同的产品接口或者抽象类的时候，工厂类就需要判断何时创建何种种类的产品，这就和创建何种种类产品的产品相互混淆在了一起，违背了单一职责，导致系统丧失灵活性和可维护性。而且更重要的是，简单工厂模式违背了“开放封闭原则”，就是违背了“系统对扩展开放，对修改关闭”的原则，因为当我新增加一个产品的时候必须修改工厂类，相应的工厂类就需要重新编译一遍。</p><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/SimpleFactoryPattern.png" alt="SimpleFactoryPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Operation:运算类接口<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运算接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两个操作数的运算值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num1 操作数1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num2 操作数2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回两个操作数的运算值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">operate</span><span class="params">(Double num1, Double num2)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>AddOperation:加法运算类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加法实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddOperation</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">operate</span><span class="params">(Double num1, Double num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>SubOperation:减法运算类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 减法实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubOperation</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">operate</span><span class="params">(Double num1, Double num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>SimpleFactory:简单工厂<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取与参数运算符相匹配的类实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operator 运算符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回与参数运算符相匹配的类实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Operation <span class="title">createOperation</span><span class="params">(<span class="keyword">char</span> operator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operator) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AddOperation();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SubOperation();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> MulOperation();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> DivOperation();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"找不到与"</span> + operator + <span class="string">"相匹配的运算符"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Client:客户端调用类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂模式是属于创建型模式，又叫做静态工厂方法（Static Factory Method）模式，</span></span><br><span class="line"><span class="comment"> * 简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/22/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleFactory simpleFactory = <span class="keyword">new</span> SimpleFactory();</span><br><span class="line"></span><br><span class="line">        Operation addOperation = simpleFactory.createOperation(<span class="string">'+'</span>);</span><br><span class="line">        System.out.println(addOperation.operate(<span class="number">3.0</span>, <span class="number">5.0</span>));</span><br><span class="line"></span><br><span class="line">        Operation subOperation = simpleFactory.createOperation(<span class="string">'-'</span>);</span><br><span class="line">        System.out.println(subOperation.operate(<span class="number">3.0</span>, <span class="number">5.0</span>));</span><br><span class="line"></span><br><span class="line">        Operation mulOperation = simpleFactory.createOperation(<span class="string">'*'</span>);</span><br><span class="line">        System.out.println(mulOperation.operate(<span class="number">3.0</span>, <span class="number">5.0</span>));</span><br><span class="line"></span><br><span class="line">        Operation divOperation = simpleFactory.createOperation(<span class="string">'/'</span>);</span><br><span class="line">        System.out.println(divOperation.operate(<span class="number">3.0</span>, <span class="number">5.0</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/11/22/simplefactorypattern/">http://94275.cn/2014/11/22/simplefactorypattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工厂方法]]></title>
      <url>http://94275.cn/2014/11/21/factorymethodpattern/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>工厂方法模式，英文Factory method pattern，工厂方法模式是简单工厂模式的进化版， 看本文之间最好先看一下简单工厂模式。工厂方法模式是定义一个创建产品对象的工厂接口，工厂接口本身不去创建对象，而是交给其子类或者是其实现类去创建，将实际创建工作推迟到子类中进行。</p><a id="more"></a><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>开放-封闭原则。针对扩展是开放的，针对修改是封闭的。</li><li>里氏代换原则。Liskov Substitution Principle，简称LSP。子类型必须能替换掉他们的父类型。</li><li>依赖倒置原则。 也叫依赖倒转原则，Dependence Inversion Principle，对抽象进行编程，不要对实现进行编程。</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。</li><li>工厂模式是一种典型的解耦模式，迪米特法则在工厂模式中表现的尤为明显。假如调用者自己组装产品需要增加依赖关系时，可以考虑使用工厂模式。将会大大降低对象之间的耦合度。</li><li>由于工厂模式是依靠抽象架构的，它把实例化产品的任务交由实现类完成，扩展性比较好。也就是说，当需要系统有比较好的扩展性时，可以考虑工厂模式，不同的产品用不同的实现工厂来组装。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无需关心创建细节，甚至无需知道具体产品类的类名。</li><li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，正是因为所有的具体工厂类都具有同一抽象父类。</li><li>使用工厂方法模式的另一个优点是在系统中加入新产品时，无需修改抽象工厂和抽象产品提供的接口，无需修改客户端，也无需修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了，这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/FactoryMethodPattern.png" alt="FactoryMethodPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Operation:运算基类，抽象出getResult()方法。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作抽象类</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/21/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> num1;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getNum1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum1</span><span class="params">(<span class="keyword">double</span> num1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num1 = num1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getNum2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum2</span><span class="params">(<span class="keyword">double</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num2 = num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>AddOperation:加法运算类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加法操作</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/21/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddOperation</span> <span class="keyword">extends</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>SubOperation:减法运算类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 减法操作</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/21/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubOperation</span> <span class="keyword">extends</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>IFactory:创建运算类的工厂接口，包含一个创建运算类的抽象方法。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂抽象</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/21/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Operation <span class="title">createOperation</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>AddFactory:加法工厂，实现IFactory，创建加法运算类。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加法工厂</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/21/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Operation <span class="title">createOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AddOperation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>SubFactory:减法工厂，实现IFactory，创建减法运算类。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 减法工厂</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/21/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Operation <span class="title">createOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubOperation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/11/21/factorymethodpattern/">http://94275.cn/2014/11/21/factorymethodpattern/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[装饰者模式]]></title>
      <url>http://94275.cn/2014/11/20/design-pattern-decorator/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。对于不同功能之间的多种复杂的对象如果使用继承的方式，类的数量将会碰撞，而采用组合的方式，这样就可以在运行时实现不同的功能的组合。<br>装饰者模式可以动态的将职责附加到对象上。对于扩展功能的情况，提供了比继承更有弹性的解决方案。</p><a id="more"></a><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>多用组合，少用继承。利用继承设计子类的行为，是在编译时静态决定的，而且所有的子类都会继承到相同的行为。然而，如果能够利用组合的做法扩展对象的行为，就可以在运行时动态地进行扩展。</li><li>开闭原则。对扩展，对修改关闭。</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li><li>需要动态地给一个对象增加功能，这些功能也可以动态地被撤销。当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>装饰者模式可以提供比继承更多的灵活性</li><li>可以通过一种动态的方式来扩展一个对象的功能，在运行时选择不同的装饰器，从而实现不同的行为。</li><li>通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合。可以使用多个具体装饰类来装饰同一对象，得到功能更为强大的对象。</li><li>具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，在使用时再对其进行组合，原有代码无须改变，符合“开闭原则”。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>会产生很多的小对象，增加了系统的复杂性</li><li>这种比继承更加灵活机动的特性，也同时意味着装饰模式比继承更加易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为烦琐。</li></ol><h3 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h3><p><img src="/imgs/post/DecoratorPatternUML.png" alt="DecoratorPattern"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Component:定义一个对象接口，可以给这些对象动态地添加职责。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteComponent:定义一个对象，可以给这个对象添加一些职责。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被装饰的对象</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/20/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是被装饰的对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Decorator:拥有一个指向Component对象的引用，并定义一个与 Component接口一致的接口。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (component != <span class="keyword">null</span>) &#123;</span><br><span class="line">            component.operation();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteDecoratorA:装饰部分A<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体装饰</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/20/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecoratorA</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        decorate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decorate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"装饰操作A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcreteDecoratorB:装饰部分B<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体装饰</span></span><br><span class="line"><span class="comment"> * Created by zhenguo on 11/20/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String tag = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecoratorB</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">        tag = getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        System.out.println(<span class="string">"装饰操作B tag = "</span> + tag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><br>本文地址 <a href="http://94275.cn/2014/11/20/design-pattern-decorator/">http://94275.cn/2014/11/20/design-pattern-decorator/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git代码问题解决]]></title>
      <url>http://94275.cn/2014/11/02/git-error-handle/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>遇到一张很赞的图，这张图基本可以搞定Git代码管理中所有的疑难杂症。</p><a id="more"></a><p><img src="/imgs/post/git-pretty.png" alt="git-pretty"></p><p><br>本文地址 <a href="http://94275.cn/2014/11/02/git-error-handle/">http://94275.cn/2014/11/02/git-error-handle/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse转移到IntelliJ IDEA]]></title>
      <url>http://94275.cn/2014/10/25/eclipse-to-intellig-idea/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>本人使用IntelliJ IDEA其实并不太久，用了这段时间以后，觉得的确很是好用。刚刚从Eclipse转过来的很多人开始可能不适应，我就把使用过程中的一些经验和常用功能分享下。</p><a id="more"></a><h3 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h3><p>在Eclipse中设置显示行号很简单，转移到Intellij Idea也不难。只需要在IDE Settings中设置，具体设置如下图:</p><p><img src="/imgs/post/show_line_numbers.png" alt="show_line_numbers"></p><h3 id="文件和导航关联"><a href="#文件和导航关联" class="headerlink" title="文件和导航关联"></a>文件和导航关联</h3><p>我们在写代码的时候经常需要打开某个文件的时候，想在左边的文件树上自动打开关联到位置，这样很方便的找寻本目录下的其他文件或者其他的相关文件，其实这个IntelliJ提供了好几种解决方案，第一个就是和Eclipse一样的方式，如下:</p><p><img src="/imgs/post/source_autoscroll.png" alt="source_autoscroll"></p><p>在上图的浮层中可以看到两个选项AutoScroll to Source和AutoScroll from source，IntelliJ很人性化的分了两个设置在里面，你两个都勾选就是基本和Eclipse的功能保持了完全一致，只是勾选一个自然也可以.</p><p>还有一种方式就是利用IntelliJ提供的Navigation Bar，IntelliJ很多功能操作都可以键盘化，这个就是喜欢键盘化操作的人的必备功能，操作方式就是打开文件的时候，使用快捷键⌘+UP (Jump to Navigation Bar)，然后就会出现一个下拉，基本就是这个文件所在目录的文件列表，还可以使用上下左右的键位来选择其他目录，是不是很酷？</p><p>备注:此处建议把View &gt; Navigation Bar的选项点掉，这样就使用快捷键之后就会在你鼠标的位置出现，感觉会更输入一些，当然这样你就基本失去了使用鼠标的权利，这个需要你根据个人癖好使用即可。</p><h3 id="版本控制设置"><a href="#版本控制设置" class="headerlink" title="版本控制设置"></a>版本控制设置</h3><p>大家以前Eclipse的时候在本地文件和版本库不一致的时候，那么文件以及所在的文件夹都会出现一个〉表示，大家能很轻松的看到本地文件修改了哪一些，但是IntelliJ中默认是不能这样的。仅仅是给变化的文件在修改的时候提供了颜色上的变化，不包括其所在的各个父级文件夹哦，如果想和Eclipse一样的话需要如下图把设置勾选就可以了：</p><p><img src="/imgs/post/vcs_show_dir_status.png" alt="vcs_show_dir_status"></p><p>其实看英文解释就可以明白了，这个默认开启以后如果想调整文件夹的显示颜色的时候就直接去Settings &gt; Editor &gt; Colors &amp; Fonts &gt; File Status中调整即可了，可以调整成自己喜欢的样子。</p><h3 id="Eclipse项目导入"><a href="#Eclipse项目导入" class="headerlink" title="Eclipse项目导入"></a>Eclipse项目导入</h3><p>Intellij Idea导入Eclipse项目很简单，操作如下图：</p><p><img src="/imgs/post/import_eclipse_web_project.png" alt="import_eclipse_web_project"></p><p>先写着几点，还有很多功能来探索。总体感觉Intellij Idea比Eclipse更好用。</p><p><br>本文地址 <a href="http://94275.cn/2014/10/25/eclipse-to-intellig-idea/">http://94275.cn/2014/10/25/eclipse-to-intellig-idea/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[IOC原理]]></title>
      <url>http://94275.cn/2014/10/19/inversion-of-control/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>IoC(Inversion Of Control)，直观地讲，就是容器控制程序之间的关系，而非传统实现中，由程序代码直接操控。这也就是所谓“控制反转”的概念所在。控制权由应用代码中转到了外部容器，控制权的转移是所谓反转。IoC 还有另外一个名字——“依赖注入（Dependency Injection）”。从名字上理解，所谓依赖注入，即组件之间的依赖关系由容器在运行期决定，形象地说，即由容器动态地将某种依赖关系注入到组件之中。</p><a id="more"></a><p>在我们的程序中，要实现某个功能，我们都会用到两个或两个以上的类来协同完成，那么在一个类中，我们就会要有它的合作类的引用，也就是说这个类依赖于别的类，这个合作类的获取，也就是依赖获取的方式主要有三种。</p><p>下面通过一个生动形象的例子介绍控制反转。比如，一个女孩希望找到合适的男朋友，如下图所示，可以有3种方式，即青梅竹马、亲友介绍、父母包办。</p><p><img src="/imgs/post/ioc_pic_6_2.jpeg" alt="ioc_pic_6_2"></p><h3 id="第一种-青梅竹马，也就是自己生成"><a href="#第一种-青梅竹马，也就是自己生成" class="headerlink" title="第一种 青梅竹马，也就是自己生成"></a>第一种 青梅竹马，也就是自己生成</h3><p>此方式比较简单，代码和图示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">kiss</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Boy boy = <span class="keyword">new</span> Boy();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/post/ioc_pic_6_3.jpeg" alt="ioc_pic_6_3"></p><p>第一种方法存在如下问题：</p><ul><li>1.Girl 类依赖于 Boy 类，如果 Boy 类未完成，则编译都不能通过。</li><li>2.不能更改，想换 Boy 的时候，无法进行修改。</li><li>3.很难共享，只能自己用。</li><li>4.Girl 要对 Boy 的生命周期负责，两个类耦合在了一起。</li></ul><h3 id="第二种-亲友介绍，也就是通过中介得到"><a href="#第二种-亲友介绍，也就是通过中介得到" class="headerlink" title="第二种 亲友介绍，也就是通过中介得到"></a>第二种 亲友介绍，也就是通过中介得到</h3><p>此方法实现代码和图示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">kiss</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Boy boy = BoyFactory.createBoy();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/post/ioc_pic_6_4.jpeg" alt="ioc_pic_6_4"></p><p>第二种方法通过使用工程类，间接得到需要的对象。存在如下问题：</p><ul><li>1.每个子类的生成的代码都写死在工厂类里面了，如果要换个子类，则必须更改工厂类中的方法</li><li>2.面向接口编程，一般都会使用工厂类，一般每个接口都会对于一个工程类，当项目非常大的时候，则会有非常多的工厂类</li></ul><h3 id="第三种-父母包办，也就是直接被注入"><a href="#第三种-父母包办，也就是直接被注入" class="headerlink" title="第三种 父母包办，也就是直接被注入"></a>第三种 父母包办，也就是直接被注入</h3><p>此种方法实现代码和图示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">kiss</span><span class="params">(Boy boy)</span></span>&#123;</span><br><span class="line">    <span class="comment">// kiss boy</span></span><br><span class="line">    boy.kiss();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/post/ioc_pic_6_5.jpeg" alt="ioc_pic_6_5"></p><p>第三种方法只需要在外部传入一个现成的对象给方法调用，不同的实现传入不同的对象即可。</p><hr><p><br><br><br><br>哪一种为控制反转 IoC 呢？虽然在现实生活中我们都希望青梅竹马，但在现实世界里，选择的却是父母包办，它就是控制反转，而这里具有控制力的父母，就是所谓的容器概念。</p><p>典型的 IOC 可以如下图所示。</p><p><img src="/imgs/post/ioc_pic_6_6.jpeg" alt="ioc_pic_6_6"></p><h3 id="如何实现-IoC"><a href="#如何实现-IoC" class="headerlink" title="如何实现 IoC"></a>如何实现 IoC</h3><p>IOC 可以通过以下3种方式实现：</p><h4 id="第一种-接口注入"><a href="#第一种-接口注入" class="headerlink" title="第一种 接口注入"></a>第一种 接口注入</h4><p>这种方式要求我们自己定义的组建类必须实现容器给定的一个接口，然后容器通过这个接口，为我们的组建类注入所依赖的类<br>缺点：容器对组建的侵入性会很强，实现的组建只能给此容器用了，移植性不强</p><h4 id="第二种-Setter注入"><a href="#第二种-Setter注入" class="headerlink" title="第二种 Setter注入"></a>第二种 Setter注入</h4><p>在容器中，通过调用对象的 setter() 方法，将该对象的依赖传递到类当中</p><h4 id="第三种-构造器注入"><a href="#第三种-构造器注入" class="headerlink" title="第三种 构造器注入"></a>第三种 构造器注入</h4><p>通过使用构造器，在类初始化的时候，传入对象的依赖</p><p>如果是这样的话，那么我们<font color="red">仅仅只是完成了一些基于依赖倒转的代码重构工作而已，并没有真正的体现系统的动态性</font>。最大程度的将两个类之间的依赖降低，实现解耦合，我们可以开发<font color="red">基于配置</font>的程序。</p><p>IoC 核心理念：</p><ol><li>在类当中不创建对象，在代码中不直接与对象和服务连接</li><li>在配置文件中描述创建对象的方式，以及各个组件之间的联系</li><li><p>外部容器通过解析配置文件，通过反射来将这些联系在一起</p><p>The Hollywood principle：Don’t call us,we’ll call you.<br>即，所有组件都是被动的、不主动联系（调用）外部代码，<br>要等着外部代码的调用——–所有的组件的初始化和相互调用都由容器负责实现。<br>简单的说，就是整个程序之间的关系，都由容器来控制:将程序的控制权反转给容器,就是所谓的反转。<br><br></p></li></ol><hr><p>参考文献地址：</p><ul><li><a href="http://blog.csdn.net/xiaoxing1521025/article/details/8846031" target="_blank" rel="noopener">spring IOC原理</a></li><li><a href="http://java-mzd.iteye.com/blog/818344" rel="external nofollow noopener noreferrer" target="_blank">IOC原理分析</a></li></ul><p><br>本文地址 <a href="http://94275.cn/2014/10/19/inversion-of-control/">http://94275.cn/2014/10/19/inversion-of-control/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> IOC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Log工具类]]></title>
      <url>http://94275.cn/2014/10/16/android-log/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>工欲善其事，必先利其器。在 Android 开发过程中，相信都会遇到这样的问题：</p><ul><li>Log 太多，不容易找到自己设置打印的内容</li><li>找到 Log 但是定位到 Java 源码有不是很方便</li><li>对 Log 打印需要设置 Tag，大多时候 Tag 就是本类的类名，存在重复的工作</li><li>发布正式版本需要注释或者关掉很多 Log 开关</li></ul><a id="more"></a><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>参考 Android 源码，使用官方的 Log 打印方法（设置Tag），然后再 Eclipse 里面设置过滤标签，这样就可以查看某一个类的 Log 了，但是这样效率比较低下。基于上面的一些问题，我研究实现了一种简单易用的 Log 工具类。我的工具类主要有如下特点：</p><ul><li>减少一个 Log 参数</li><li>调用某些 Log 方法，可以实现跳转到 Java 源代码的功能</li><li>采用此工具类，屏蔽 Log 只需要关闭 Log 总开关即可</li></ul><h3 id="减少一个-Log-参数"><a href="#减少一个-Log-参数" class="headerlink" title="减少一个 Log 参数"></a>减少一个 Log 参数</h3><p>实现方法是采用 <code>StackTraceElement</code> 获取调用类的方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String result = <span class="string">""</span>;</span><br><span class="line">    StackTraceElement thisMethodStack = (<span class="keyword">new</span> Exception()).getStackTrace()[<span class="number">2</span>];</span><br><span class="line">    result = thisMethodStack.getClassName();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳转到源代码-Log-调用处"><a href="#跳转到源代码-Log-调用处" class="headerlink" title="跳转到源代码 Log 调用处"></a>跳转到源代码 Log 调用处</h3><p>实现双击 Log 跳转到 Java 源代码调用处，实现方法是参考 Android Logcat 错处日志，发现 Eclipse 实现跳转是因为 Log 中有 <code>at MyClassName.MyMethodName(MClassName.java:行数)</code> 。具体见代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Realization of double click jump events.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">callMethodAndLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String result = <span class="string">"at "</span>;</span><br><span class="line">    StackTraceElement thisMethodStack = (<span class="keyword">new</span> Exception()).getStackTrace()[<span class="number">2</span>];</span><br><span class="line">    result += thisMethodStack.getClassName() + <span class="string">"."</span>;</span><br><span class="line">    result += thisMethodStack.getMethodName();</span><br><span class="line">    result += <span class="string">"("</span> + thisMethodStack.getFileName();</span><br><span class="line">    result += <span class="string">":"</span> + thisMethodStack.getLineNumber() + <span class="string">")  "</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="屏蔽所有-Log"><a href="#屏蔽所有-Log" class="headerlink" title="屏蔽所有 Log"></a>屏蔽所有 Log</h3><p>采用 <a href="https://github.com/jingle1267/android-utils/blob/master/src/com/worthed/util/LogUtils.java" rel="external nofollow noopener noreferrer" target="_blank">LogUtils</a> 工具类，只需要将此类中<code>DEBUG_LEVEL</code>设置的值大一点。</p><ul><li>如果想要屏蔽所有的 Log 只需要将 <code>DEBUG_LEVEL</code> 设置为 <code>Log.ASSERT</code> 即可。</li><li>如果想要只显示 Error 则只需要将 <code>DEBUG_LEVEL</code> 设置为 <code>Log.WARN</code> 即可。</li><li>如果只想要显示 Error 和 Warn 则将 <code>DEBUG_LEVEL</code> 设置为 <code>Log.INFO</code> 即可。</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>只需要用 LogUtils 替换掉 Android 系统的 Log 类，并去掉 log 方法的第一个参数，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LogUtils.d(Object); <span class="comment">// 次行代码将打印Object类的toString()</span></span><br></pre></td></tr></table></figure><p>无代码无真相，下面是此工具类源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2014 Zhenguo Jin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.worthed.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class can replace android.util.Log.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jingle1267@163.com</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> And you can turn off the log by set DEBUG_LEVEL = Log.ASSERT.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Master switch.To catch error info you need set this value below Log.WARN</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEBUG_LEVEL = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 'System.out' switch.When it is true, you can see the 'System.out' log.</span></span><br><span class="line"><span class="comment">     * Otherwise, you cannot.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG_SYSOUT = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send a &#123;<span class="doctag">@link</span> #VERBOSE&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.VERBOSE &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            String tag = getClassName();</span><br><span class="line">            String msg = obj != <span class="keyword">null</span> ? obj.toString() : <span class="string">"obj == null"</span>;</span><br><span class="line">            Log.v(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send a &#123;<span class="doctag">@link</span> #DEBUG_LEVEL&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.DEBUG &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            String tag = getClassName();</span><br><span class="line">            String msg = obj != <span class="keyword">null</span> ? obj.toString() : <span class="string">"obj == null"</span>;</span><br><span class="line">            Log.d(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send an &#123;<span class="doctag">@link</span> #INFO&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.INFO &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            String tag = getClassName();</span><br><span class="line">            String msg = obj != <span class="keyword">null</span> ? obj.toString() : <span class="string">"obj == null"</span>;</span><br><span class="line">            Log.i(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send a &#123;<span class="doctag">@link</span> #WARN&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.WARN &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            String tag = getClassName();</span><br><span class="line">            String msg = obj != <span class="keyword">null</span> ? obj.toString() : <span class="string">"obj == null"</span>;</span><br><span class="line">            Log.w(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send an &#123;<span class="doctag">@link</span> #ERROR&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.ERROR &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            String tag = getClassName();</span><br><span class="line">            String msg = obj != <span class="keyword">null</span> ? obj.toString() : <span class="string">"obj == null"</span>;</span><br><span class="line">            Log.e(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * What a Terrible Failure: Report a condition that should never happen. The</span></span><br><span class="line"><span class="comment">     * error will always be logged at level ASSERT with the call stack.</span></span><br><span class="line"><span class="comment">     * Depending on system configuration, a report may be added to the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.os.DropBoxManager&#125; and/or the process may be terminated</span></span><br><span class="line"><span class="comment">     * immediately with an error dialog.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wtf</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.ASSERT &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            String tag = getClassName();</span><br><span class="line">            String msg = obj != <span class="keyword">null</span> ? obj.toString() : <span class="string">"obj == null"</span>;</span><br><span class="line">            Log.wtf(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send a &#123;<span class="doctag">@link</span> #VERBOSE&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag</span></span><br><span class="line"><span class="comment">     *            Used to identify the source of a log message. It usually</span></span><br><span class="line"><span class="comment">     *            identifies the class or activity where the log call occurs.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     *            The message you would like logged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.VERBOSE &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            Log.v(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send a &#123;<span class="doctag">@link</span> #DEBUG_LEVEL&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag</span></span><br><span class="line"><span class="comment">     *            Used to identify the source of a log message. It usually</span></span><br><span class="line"><span class="comment">     *            identifies the class or activity where the log call occurs.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     *            The message you would like logged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.DEBUG &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            Log.d(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send an &#123;<span class="doctag">@link</span> #INFO&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag</span></span><br><span class="line"><span class="comment">     *            Used to identify the source of a log message. It usually</span></span><br><span class="line"><span class="comment">     *            identifies the class or activity where the log call occurs.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     *            The message you would like logged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.INFO &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            Log.i(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send a &#123;<span class="doctag">@link</span> #WARN&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag</span></span><br><span class="line"><span class="comment">     *            Used to identify the source of a log message. It usually</span></span><br><span class="line"><span class="comment">     *            identifies the class or activity where the log call occurs.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     *            The message you would like logged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.WARN &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            Log.w(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send an &#123;<span class="doctag">@link</span> #ERROR&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag</span></span><br><span class="line"><span class="comment">     *            Used to identify the source of a log message. It usually</span></span><br><span class="line"><span class="comment">     *            identifies the class or activity where the log call occurs.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     *            The message you would like logged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.ERROR &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            Log.e(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * What a Terrible Failure: Report a condition that should never happen. The</span></span><br><span class="line"><span class="comment">     * error will always be logged at level ASSERT with the call stack.</span></span><br><span class="line"><span class="comment">     * Depending on system configuration, a report may be added to the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.os.DropBoxManager&#125; and/or the process may be terminated</span></span><br><span class="line"><span class="comment">     * immediately with an error dialog.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag</span></span><br><span class="line"><span class="comment">     *            Used to identify the source of a log message.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     *            The message you would like logged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wtf</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.ASSERT &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            Log.wtf(tag, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send a &#123;<span class="doctag">@link</span> #VERBOSE&#125; log message. And just print method name and</span></span><br><span class="line"><span class="comment">     * position in black.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.VERBOSE &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            String tag = getClassName();</span><br><span class="line">            String method = callMethodAndLine();</span><br><span class="line">            Log.v(tag, method);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SYSOUT) &#123;</span><br><span class="line">                System.out.println(tag + <span class="string">"  "</span> + method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send a &#123;<span class="doctag">@link</span> #DEBUG_LEVEL&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     *            The object to print.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.DEBUG &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            String tag = getClassName();</span><br><span class="line">            String method = callMethodAndLine();</span><br><span class="line">            String content = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">                content = object.toString() + <span class="string">"                    ----    "</span></span><br><span class="line">                        + method;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                content = <span class="string">" ## "</span> + <span class="string">"                ----    "</span> + method;</span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(tag, content);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SYSOUT) &#123;</span><br><span class="line">                System.out.println(tag + <span class="string">"  "</span> + content + <span class="string">"  "</span> + method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send an &#123;<span class="doctag">@link</span> #ERROR&#125; log message.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     *            The object to print.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printError</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.ERROR &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            String tag = getClassName();</span><br><span class="line">            String method = callMethodAndLine();</span><br><span class="line">            String content = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">                content = object.toString() + <span class="string">"                    ----    "</span></span><br><span class="line">                        + method;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                content = <span class="string">" ## "</span> + <span class="string">"                    ----    "</span> + method;</span><br><span class="line">            &#125;</span><br><span class="line">            Log.e(tag, content);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SYSOUT) &#123;</span><br><span class="line">                System.err.println(tag + <span class="string">"  "</span> + method + <span class="string">"  "</span> + content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Print the array of stack trace elements of this method in black.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCallHierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.VERBOSE &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            String tag = getClassName();</span><br><span class="line">            String method = callMethodAndLine();</span><br><span class="line">            String hierarchy = getCallHierarchy();</span><br><span class="line">            Log.v(tag, method + hierarchy);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SYSOUT) &#123;</span><br><span class="line">                System.out.println(tag + <span class="string">"  "</span> + method + hierarchy);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Print debug log in blue.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     *            The object to print.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMyLog</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Log.DEBUG &gt; DEBUG_LEVEL) &#123;</span><br><span class="line">            String tag = <span class="string">"MYLOG"</span>;</span><br><span class="line">            String method = callMethodAndLine();</span><br><span class="line">            String content = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">                content = object.toString() + <span class="string">"                    ----    "</span></span><br><span class="line">                        + method;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                content = <span class="string">" ## "</span> + <span class="string">"                ----    "</span> + method;</span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(tag, content);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SYSOUT) &#123;</span><br><span class="line">                System.out.println(tag + <span class="string">"  "</span> + content + <span class="string">"  "</span> + method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getCallHierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        StackTraceElement[] trace = (<span class="keyword">new</span> Exception()).getStackTrace();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; trace.length; i++) &#123;</span><br><span class="line">            result += <span class="string">"\r\t"</span> + trace[i].getClassName() + <span class="string">"."</span></span><br><span class="line">                    + trace[i].getMethodName() + <span class="string">"():"</span></span><br><span class="line">                    + trace[i].getLineNumber();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        StackTraceElement thisMethodStack = (<span class="keyword">new</span> Exception()).getStackTrace()[<span class="number">2</span>];</span><br><span class="line">        result = thisMethodStack.getClassName();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Realization of double click jump events.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">callMethodAndLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">"at "</span>;</span><br><span class="line">        StackTraceElement thisMethodStack = (<span class="keyword">new</span> Exception()).getStackTrace()[<span class="number">2</span>];</span><br><span class="line">        result += thisMethodStack.getClassName() + <span class="string">"."</span>;</span><br><span class="line">        result += thisMethodStack.getMethodName();</span><br><span class="line">        result += <span class="string">"("</span> + thisMethodStack.getFileName();</span><br><span class="line">        result += <span class="string">":"</span> + thisMethodStack.getLineNumber() + <span class="string">")  "</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取更多请参看我 Github 分享的 Android 工具类库 <a href="https://github.com/jingle1267/android-utils" rel="external nofollow noopener noreferrer" target="_blank">android-utils</a> 。</p><p><br>本文地址 <a href="http://94275.cn/2014/10/16/android-log/">http://94275.cn/2014/10/16/android-log/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android UI优化策略]]></title>
      <url>http://94275.cn/2014/10/15/android-ui-optimize/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>Android 是一个运行在移动终端上的操作系统，跟传统PC最大的不同所在就是移动终端的资源紧缺问题“比较”明显，当然对于一些屌丝机型，应该用“非常“来形容才靠谱。</p><p>废话不多说了，Android 的 UI 优化方法主要有以下几点：</p><a id="more"></a><ul><li>1.使用尽量少的组件来实现布局功能。主要包括布局层级尽量不要超过10级和布局 view 数量尽量不要好过80。</li><li>2.使用 ViewStub 暂缓加载比较复杂的布局</li><li>3.使用 include 模块化代码，达到重用布局</li><li>4.去除不必要的 inflate</li><li>5.去除不必要的 findViewById</li></ul><h3 id="1-使用尽量少的组件来实现布局功能"><a href="#1-使用尽量少的组件来实现布局功能" class="headerlink" title="1.使用尽量少的组件来实现布局功能"></a>1.使用尽量少的组件来实现布局功能</h3><ul><li>单个页面布局层数尽量不超过10级</li><li>单个页面不居中View数不超过80个</li><li>使用merge标签来减少不必要的根节点</li></ul><h3 id="2-暂缓加载比较复杂的布局"><a href="#2-暂缓加载比较复杂的布局" class="headerlink" title="2.暂缓加载比较复杂的布局"></a>2.暂缓加载比较复杂的布局</h3><p>使用ViewStub暂缓加载比较复杂的布局</p><h3 id="3-模块化代码-重用布局"><a href="#3-模块化代码-重用布局" class="headerlink" title="3.模块化代码,重用布局"></a>3.模块化代码,重用布局</h3><p>使用include标签模块化代码，达到重用布局</p><h3 id="4-去除不必要的-inflate"><a href="#4-去除不必要的-inflate" class="headerlink" title="4.去除不必要的 inflate"></a>4.去除不必要的 inflate</h3><p>对于 inflate 的布局可以直接缓存，用全局变量代替局部变量，避免下次需再次 inflate</p><h3 id="5-去除不必要的-findViewById"><a href="#5-去除不必要的-findViewById" class="headerlink" title="5.去除不必要的 findViewById"></a>5.去除不必要的 findViewById</h3><p>因为 findViewById 是比较耗时的操作，故也应该采用缓存，用全局变量代替局部变量，避免重复操作。</p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="http://www.cnblogs.com/net168/archive/2014/10/09/4004950.html" target="_blank" rel="noopener">Android：一个高效的UI才是一个拉风的UI（一）</a><br><br><a href="http://www.cnblogs.com/net168/p/4017921.html" target="_blank" rel="noopener">Android：一个高效的UI才是一个拉风的UI（二）</a></p><p><br>本文地址 <a href="http://94275.cn/2014/10/15/android-ui-optimize/">http://94275.cn/2014/10/15/android-ui-optimize/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
        <tags>
            
            <tag> Android优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[View注入框架之ButterKnife]]></title>
      <url>http://94275.cn/2014/10/15/butter-knife-injection/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>俗话说：“不会偷懒的程序员不是好的程序员！”。作为一名 Android 开发，是不是经常厌烦了大量的 findViewById 以及 setOnClickListener 代码，而 <a href="https://github.com/JakeWharton/butterknife" rel="external nofollow noopener noreferrer" target="_blank">ButterKnife</a> 是一个专注于 Android 系统的 View 注入框架，让你从此从这些烦人臃肿的代码中解脱出来。先来看一段代码示例说明下 ButterKnife 是如何简化代码的：</p><a id="more"></a><p>注意：如果你是使用的 Eclipse 引用该 library，你需要参考这里 <a href="http://jakewharton.github.io/butterknife/ide-eclipse.html" rel="external nofollow noopener noreferrer" target="_blank">Eclipse Configuration</a> 做一些配置，否则会运行出错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">  TextView title;</span><br><span class="line">  TextView subtitle;</span><br><span class="line">  TextView footer;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.simple_activity);</span><br><span class="line">    title = (TextView) findViewById(R.id.title);</span><br><span class="line">    subtitle = (TextView) findViewById(R.id.subtitle);</span><br><span class="line">    footer = (TextView) findViewById(R.id.footer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO Use views...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而用 ButterKnife 之后的代码是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">  <span class="meta">@InjectView</span>(R.id.title) TextView title;</span><br><span class="line">  <span class="meta">@InjectView</span>(R.id.subtitle) TextView subtitle;</span><br><span class="line">  <span class="meta">@InjectView</span>(R.id.footer) TextView footer;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.simple_activity);</span><br><span class="line">    ButterKnife.inject(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// TODO Use "injected" views...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是非常简洁易用？下面就来系统的介绍下 ButterKnife 的用法。</p><h3 id="Butter-Knife-的特性"><a href="#Butter-Knife-的特性" class="headerlink" title="Butter Knife 的特性"></a>Butter Knife 的特性</h3><ul><li>1.支持 Activity 中的 View 注入</li><li>2.支持 View 中的 View 注入</li><li>3.支持 View 事件回调函数注入</li></ul><p>目前支持如下事件回调函数：</p><ul><li>View: @OnLongClick and @OnFocusChanged.</li><li>TextView: @OnEditorAction.</li><li>AdapterView: @OnItemClick and @OnItemLongClick.</li><li>CompoundButton: @OnCheckedChanged.</li></ul><p>下面来看一些注入的示例代码：</p><h3 id="在Activity中注入"><a href="#在Activity中注入" class="headerlink" title="在Activity中注入"></a>在Activity中注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">  <span class="meta">@InjectView</span>(R.id.title) TextView title;</span><br><span class="line">  <span class="meta">@InjectView</span>(R.id.subtitle) TextView subtitle;</span><br><span class="line">  <span class="meta">@InjectView</span>(R.id.footer) TextView footer;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.simple_activity);</span><br><span class="line">    ButterKnife.inject(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// TODO Use "injected" views...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Fragment中注入"><a href="#在Fragment中注入" class="headerlink" title="在Fragment中注入"></a>在Fragment中注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">  <span class="meta">@InjectView</span>(R.id.button1) Button button1;</span><br><span class="line">  <span class="meta">@InjectView</span>(R.id.button2) Button button2;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span> <span class="function">View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</span><br><span class="line">    ButterKnife.inject(<span class="keyword">this</span>, view);</span><br><span class="line">    <span class="comment">// TODO Use "injected" views...</span></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在ViewHolde模式中注入"><a href="#在ViewHolde模式中注入" class="headerlink" title="在ViewHolde模式中注入"></a>在ViewHolde模式中注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View view, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">    ViewHolder holder;</span><br><span class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">      holder = (ViewHolder) view.getTag();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      view = inflater.inflate(R.layout.whatever, parent, <span class="keyword">false</span>);</span><br><span class="line">      holder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">      view.setTag(holder);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    holder.name.setText(<span class="string">"John Doe"</span>);</span><br><span class="line">    <span class="comment">// etc...</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> convertView;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@InjectView</span>(R.id.title) TextView name;</span><br><span class="line">    <span class="meta">@InjectView</span>(R.id.job_title) TextView jobTitle;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">      ButterKnife.inject(<span class="keyword">this</span>, view);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注入回调函数"><a href="#注入回调函数" class="headerlink" title="注入回调函数"></a>注入回调函数</h3><p>下面是集中注入回调函数的方法实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带有 Button 参数</span></span><br><span class="line"><span class="meta">@OnClick</span>(R.id.submit)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(Button button)</span> </span>&#123;</span><br><span class="line">  button.setText(<span class="string">"Hello!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 不带参数</span></span><br><span class="line"><span class="meta">@OnClick</span>(R.id.submit)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO submit data to server...</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 同时注入多个 View 事件</span></span><br><span class="line"><span class="meta">@OnClick</span>(&#123; R.id.door1, R.id.door2, R.id.door3 &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pickDoor</span><span class="params">(DoorView door)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (door.hasPrizeBehind()) &#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"You win!"</span>, LENGTH_SHORT).show();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">"Try again"</span>, LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reset函数"><a href="#Reset函数" class="headerlink" title="Reset函数"></a>Reset函数</h3><p>如果需要在 界面 销毁的时候，把注入的 View 设置为 Null， 则可以用 reset 函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">  <span class="meta">@InjectView</span>(R.id.button1) Button button1;</span><br><span class="line">  <span class="meta">@InjectView</span>(R.id.button2) Button button2;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span> <span class="function">View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</span><br><span class="line">    ButterKnife.inject(<span class="keyword">this</span>, view);</span><br><span class="line">    <span class="comment">// TODO Use "injected" views...</span></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroyView();</span><br><span class="line">    Views.reset(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外还支持可选的 view 注入，如果该 view 没有，就没有吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Optional</span> <span class="meta">@InjectView</span>(R.id.might_not_be_there) TextView mightNotBeThere;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Optional</span> <span class="meta">@OnClick</span>(R.id.maybe_missing) <span class="function"><span class="keyword">void</span> <span class="title">onMaybeMissingClicked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有两个 findViewById 函数来简化查找 View 的方式，如果上面都满足不了你的需求，你可以用用他们：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, <span class="keyword">null</span>);</span><br><span class="line">TextView firstName = Views.findById(view, R.id.first_name);</span><br><span class="line">TextView lastName = Views.findById(view, R.id.last_name);</span><br><span class="line">ImageView photo = Views.findById(view, R.id.photo);</span><br></pre></td></tr></table></figure><p>最后，如果你是用 Android Studio 来作为 IDE 的话，那么有一个 ButterKnife 的插件 <a href="https://plugins.jetbrains.com/plugin/7369" rel="external nofollow noopener noreferrer" target="_blank">android-butterknife-zelezny</a>, 该插件可以让你手动生成上述注入代码，从此让自己成为一个更懒惰的程序员，上张截图吧。</p><p><img src="/imgs/post/butter_knife_plugin.gif" alt="ButterKnifePlugin"></p><p><br>本文地址 <a href="http://94275.cn/2014/10/15/butter-knife-injection/">http://94275.cn/2014/10/15/butter-knife-injection/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[android View Finder[转]]]></title>
      <url>http://94275.cn/2014/10/15/android-find-view/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>在 Android 获取一个 View 一般都是通过如下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TextView textView = (TextView) findViewById(R.id.textview);</span><br></pre></td></tr></table></figure><p>相信大家都写过无数次 findViewById 了吧，每次都要 Cast 一下是否很不爽啊。今天就来介绍三种简便的方法避免这种 Cast。</p><a id="more"></a><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>在项目基类 BaseActivity 中添加如下函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(“unchecked”)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;E extends View&gt; <span class="function">E <span class="title">getView</span> <span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (E) findViewById(id);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException ex) &#123;</span><br><span class="line">        Log.e(TAG, “Could not cast View to concrete <span class="class"><span class="keyword">class</span>.”, <span class="title">ex</span>)</span>;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以通过如下方式获取 view 了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TextView textView = getView(R.id.textview);</span><br><span class="line">Button button = getView(R.id.button);</span><br><span class="line">ImageView image = getView(R.id.imageview);</span><br></pre></td></tr></table></figure><p>注意：如果级联调用 getView 函数，则还是需要 Cast 的，如下示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span> <span class="params">(ImageView img)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Do nothing</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span> <span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    myMethod(getView(R.id.imageview)); <span class="comment">//这样无法通过编译</span></span><br><span class="line">    myMethod((ImageView) getView(R.id.imageview)); <span class="comment">//需要Cast才可以</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>第一种方法只在Activity里有效，其实我们经常在其他View或者Fragment里也常用findViewById方法，当然你可以把上述方法copy一遍，但是这违反了面向对象基本的封装原则，有大神封装了一个ViewFinder类，具体代码可以见我Gist上的文件<a href="https://gist.github.com/jingle1267/5d2ba7c14f5db6d87571" rel="external nofollow noopener noreferrer" target="_blank">ViewFinder.java</a>, 使用的时候你只需要在你的Activity或者View里这样使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ViewFinder finder = <span class="keyword">new</span> ViewFinder(<span class="keyword">this</span>);</span><br><span class="line">TextView textView = finder.find(R.id.textview);</span><br></pre></td></tr></table></figure><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><p>前两种方法本质上是利用了泛型，还有一种利用注解的方式，使用起来更方便，不仅省事的处理了 findViewById ，甚至包括 setOnClickListener 这种方法也能很方便的调用，具体见我这篇博客 <a href="http://stormzhang.github.io/openandroid/android/2014/01/12/android-butterknife/" rel="external nofollow noopener noreferrer" target="_blank">ButterKnife–View注入框架</a>。</p><p>注意：如果你是使用的Eclipse引用该library，你需要参考这里 <a href="http://jakewharton.github.io/butterknife/ide-eclipse.html" rel="external nofollow noopener noreferrer" target="_blank">Eclipse Configuration</a> 做一些配置，否则会运行出错。</p><p><br>本文地址 <a href="http://94275.cn/2014/10/15/android-find-view/">http://94275.cn/2014/10/15/android-find-view/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[输入1则输出0，输入0则输出1]]></title>
      <url>http://94275.cn/2014/09/25/0-in-1-out-1-in-0-out/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>前几天面试，遇到一个有意思的题目：要写写一个方法，输入1则输出0，输入0则输出1。假设该函数输入变量类型和返回变量类型均为int。据说有很多种写法，下面是我自己想到的和找到的一些方法：</p><a id="more"></a><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>使用if-else判断来处理。比较简单，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse1</span><span class="params">(<span class="keyword">int</span> input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 输入有误</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>跟方法二差不多，用while循环来做，其他代码不变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse2</span><span class="params">(<span class="keyword">int</span> input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (input == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>使用switch-case来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse3</span><span class="params">(<span class="keyword">int</span> input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (input) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// 输入有误</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><p>使用三目运算符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse4</span><span class="params">(<span class="keyword">int</span> input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法五"><a href="#方法五" class="headerlink" title="方法五"></a>方法五</h3><p>将传入的值减1，然后去绝对值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse5</span><span class="params">(<span class="keyword">int</span> input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Math.abs(input - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法六"><a href="#方法六" class="headerlink" title="方法六"></a>方法六</h3><p>将传入的值加1取除以2的余数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse6</span><span class="params">(<span class="keyword">int</span> input )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (input + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法七"><a href="#方法七" class="headerlink" title="方法七"></a>方法七</h3><p>与1异或。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse7</span><span class="params">(<span class="keyword">int</span> input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input^<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法八"><a href="#方法八" class="headerlink" title="方法八"></a>方法八</h3><p>减去2，然后取补码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse8</span><span class="params">(<span class="keyword">int</span> input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ~(input - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法九"><a href="#方法九" class="headerlink" title="方法九"></a>方法九</h3><p>用0和1的和减去输入值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse9</span><span class="params">(<span class="keyword">int</span> input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法十"><a href="#方法十" class="headerlink" title="方法十"></a>方法十</h3><p>表驱动方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse10</span><span class="params">(<span class="keyword">int</span> input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] values = &#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="number">0</span> || input == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> values[input];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如您有其他算法可留言或者邮件(<a href="mailto:jingle1267@163.com" rel="external nofollow noopener noreferrer" target="_blank">jingle1267@163.com</a>)告诉我，谢谢。</p><p><br>本文地址 <a href="http://94275.cn/2014/09/25/0-in-1-out-1-in-0-out/">http://94275.cn/2014/09/25/0-in-1-out-1-in-0-out/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Octopress发布文章]]></title>
      <url>http://94275.cn/2014/09/23/octopress-post-article/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>自从使用octopress来发布博文之后，感觉不是一般的爽。 但是经常忘记发布流程和指令，故在此写下一文，以备忘记之后还能有据可看。</p><a id="more"></a><h2 id="发布文章步骤如下："><a href="#发布文章步骤如下：" class="headerlink" title="发布文章步骤如下："></a>发布文章步骤如下：</h2><ul><li>1.创建文章文件</li><li>2.写博文</li><li>3.生成静态博文</li><li>4.预览博文</li><li>5.发布博文</li><li>6.提交源码</li></ul><h3 id="1-创建文章文件"><a href="#1-创建文章文件" class="headerlink" title="1.创建文章文件"></a>1.创建文章文件</h3><p>要发布博文，首先需要使用下面指令创建博文MarkDown文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake new_post[&apos;my topic&apos;]</span><br></pre></td></tr></table></figure><p>注意，rake new_post[‘my first octopress blog’] 中的 my first octopress blog 并不是博客标题，而是和生成的文件名以及url地址有关，该名称不支持中文。博客标题可以在生成的markdown文件中修改。生成的markdown文件在octopress/source/_posts目录中。</p><h3 id="2-写博文"><a href="#2-写博文" class="headerlink" title="2.写博文"></a>2.写博文</h3><p>找对生成的markdown文件，编辑内容，当然是使用markdown语法来编辑，将标题可以修改为中文标题，还可以设置分类等信息以及编写正文部分。</p><h3 id="3-生成静态博文"><a href="#3-生成静态博文" class="headerlink" title="3.生成静态博文"></a>3.生成静态博文</h3><p>每次执行了添加博客的命令，或是修改了现有博客的内容后，都要执行下面命令进行重新生成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake generate</span><br></pre></td></tr></table></figure><h3 id="4-预览博文"><a href="#4-预览博文" class="headerlink" title="4.预览博文"></a>4.预览博文</h3><p>博文写好，想要预览，那马就需要下面这条指令了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake preview</span><br></pre></td></tr></table></figure><p>输入了上面这条指令，然后就可以直接访问<a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a>来进行预览。</p><h3 id="5-发布博文"><a href="#5-发布博文" class="headerlink" title="5.发布博文"></a>5.发布博文</h3><p>想要把写好的博文同步到Github服务器上，那么就需要下面这条指令了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake deploy</span><br></pre></td></tr></table></figure><p>执行成功之后，就可以访问<username>.github.io 查看线上效果了。</username></p><h3 id="6-提交源码"><a href="#6-提交源码" class="headerlink" title="6.提交源码"></a>6.提交源码</h3><p>最后需要将Octopress的源文件推送到Github的Source分支上，执行下面命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m “your message”</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure><p>在安装的过程中可能会碰到各种问题，根据错误提示信息google，肯定会找到答案。</p><p><br>本文地址 <a href="http://94275.cn/2014/09/23/octopress-post-article/">http://94275.cn/2014/09/23/octopress-post-article/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android快速打包[手动]]]></title>
      <url>http://94275.cn/2014/09/23/quick-build-apk/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>当开发应用需要推广到多个渠道，而且针对不同的渠道需要打不通的 APK。传统的打包方式，打包速度不能满足用较少时间打包多个 APK。如果应用代码量较小编译速度还尚可勉强接受，倘若应用比较大，那打包就会浪费很多时间。此博文主要通过减少编译过程和简化打包过程，来有效减少总的打包时间。</p><a id="more"></a><p>Android快速打包方法需要用到Google的APK编译工具 <a href="http://baike.baidu.com/view/9152472.htm?fr=aladdin#ref_[1]_9160842" rel="external nofollow noopener noreferrer" target="_blank">APKTool</a>。想要快速打包还有一个很重要的前提就是：<b>不同渠道的应用基于配置实现</b>，即目前只能修改配置文件中资源，无法修改以编译好的代码。</p><h2 id="快速打包步骤："><a href="#快速打包步骤：" class="headerlink" title="快速打包步骤："></a>快速打包步骤：</h2><ul><li>1.decode. 例如：apktool d cloudLauncher_121101_1.2.8.apk cache</li><li>2.修改原始包相应的manifest.xml文件 config.xml</li><li>3.build. 例如：apktool b cache</li><li><p>4.签名. 例如：jarsigner -verbose -keystore ezhuo_releasekey.releasekey -signedjar e-Zhuo_25100_v1.2.6.apk ./cache/dist/e-Zhuo_25000_v1.2.6.apk ezhuo</p><p>APKTool 可以到 <a href="https://code.google.com/p/android-apktool/" rel="external nofollow noopener noreferrer" target="_blank">Google官网下载下载</a><br>​<br>Ant 批量打包：<a href="http://ihongqiqu.com/blog/2015/05/18/make-packages/" rel="external nofollow noopener noreferrer" target="_blank">http://ihongqiqu.com/2015/05/18/make-packages/</a><br>极速打包方式：<a href="http://ihongqiqu.com/2015/07/16/android-mutiple-channel-build/" rel="external nofollow noopener noreferrer" target="_blank">http://ihongqiqu.com/2015/07/16/android-mutiple-channel-build/</a><br>​<br>如有任何问题可以留言或者<a href="mailto:jingle1267@163.com" rel="external nofollow noopener noreferrer" target="_blank">邮件联系我</a>，多谢。</p></li></ul><p><br>本文地址 <a href="http://94275.cn/2014/09/23/quick-build-apk/">http://94275.cn/2014/09/23/quick-build-apk/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android打多渠道包 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 打包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android应用程序架构[译]]]></title>
      <url>http://94275.cn/2014/09/12/architecting-android-applications/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>前一段时间一直在研究架构方面的知识，加上公司程序的架构也有一些问题，所以我决定找个合适的时间来写一下Android应用程序架构的文章。</p><p>此文旨在描述我的一些架构上观点，以及之前几个月我调查研究的一些架构相关知识。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>我们知道想要写高质量的软件是非常艰难和复杂的：</strong>不只是满足需求，还需要代码健壮、易维护、可测试以及足够灵活来满足需求增加和改变。上述几点特征正是任何软件需要遵循的方法。</p><p>实现好的 Android 应用程序架构代表以下一组生产系统的实践：</p><ul><li>独立的架构</li><li>可以测试的</li><li>独立的UI</li><li>独立的数据库</li><li>独立其他外部组件</li></ul><p><img src="/imgs/post/clean_architecture1.png" alt="clean_architecture1"></p><p>上图中可以看到架构有此层，但是实际中不一定是4层。此图只是一个纲要。在开发中我们需要依据<strong>依赖规则：</strong>只可以外层依赖内层，外层对内层来说是透明的。</p><p>为了更好的理解上图含义，下面对上图中的术语作一个简单的阐述：</p><ul><li>Entities: 程序的业务实体</li><li>Use Cases: 用例统筹业务实体中数据。</li><li>Interface Adapters: 适配器接口把来自用例（Use Cases）和实体（Entities）的数据转换为 UI（Frameworks and Drivers）需要的数据。Presenters 和 Controllers 都属于这里。</li><li>Frameworks and Drivers: 所有的细节：UI、工具、框架等。</li></ul><p>通过 <a href="http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html" rel="external nofollow noopener noreferrer" target="_blank">这篇文章</a> 或 <a href="http://vimeo.com/43612849" rel="external nofollow noopener noreferrer" target="_blank">视频</a> 了解更多解释。</p><h2 id="我的方案-Our-Scenario"><a href="#我的方案-Our-Scenario" class="headerlink" title="我的方案 (Our Scenario)"></a>我的方案 (Our Scenario)</h2><p>我以一个简单的例子开始：创建一个简单的应用，这个应用显示一个来自网络的用户列表，当点击任何一个用户，跳转到此用户的详情页面。</p><h2 id="Android架构-Android-Architecture"><a href="#Android架构-Android-Architecture" class="headerlink" title="Android架构 (Android Architecture)"></a>Android架构 (Android Architecture)</h2><p>通过保持业务逻辑不需要了解外部世界来实现关系的分离，因此，可以不依赖外部元素进行测试。</p><p>为了实现关系分离，<strong>我建议分三层架构</strong>，每层与其他层分离，每层有自己的职责。值得注意的是，每层使用自己的数据模型来保证每层的独立性。如果不在引用中使用一套数据模型，付出的代价将是需要使用数据映射来完成数据变换。关系见下图：</p><p><img src="/imgs/post/clean_architecture_android.png" alt="clean_architecture_android"></p><blockquote><p>PS: 我没有采用任何第三方的库(除了 JSON 数据解析库GSON和测试库 Junit、Mockito、Robolectric 和 Espresso)，这样保证了 Demo 尽量简单。我们平日比较常用能让我们开发更简单的 orm 框架、依赖注入框架以及其他的工具或三方库都没有使用。<font color="green"><strong>“重复发明轮子是非常不建议的”</strong></font></p></blockquote><h2 id="表现层-Presentation-Layer"><a href="#表现层-Presentation-Layer" class="headerlink" title="表现层 (Presentation Layer)"></a>表现层 (Presentation Layer)</h2><p>这一层主要是控件逻辑相关和动画展示。这层实现不仅限于 <strong>MVP</strong>，还包括其他的模式，比如 MVC 或者 MVVM。这我不再赘述。Fragments 和 activities 只是用来显示和 UI 逻辑以及渲染，没有任何逻辑操作。</p><p>在这一层 Presenters 是由各种 interactors (use cases) 组成的，他们负责执行一个异步任务，并通过回调取回需要的数据给UI渲染。</p><p><img src="/imgs/post/presentation_layer.png" alt="presentation layer"></p><p>如果你想看一看一些比较酷的 MVP、MVVM 例子，可以参考 Effective Android UI 。</p><h2 id="领域层-Domain-Layer"><a href="#领域层-Domain-Layer" class="headerlink" title="领域层 (Domain Layer)"></a>领域层 (Domain Layer)</h2><p>所有的业务逻辑都是在这层处理的。考虑到 Android 工程，你会看到所有的 interactors (use cases) 也是在这里实现的。</p><p>这层是一个纯 Java 的模块，不包含任何 Android 依赖，所有的外部交互都是通过接口来实现。</p><p><img src="/imgs/post/domain_layer.png" alt="domain layer"></p><h2 id="数据层-Data-Layer"><a href="#数据层-Data-Layer" class="headerlink" title="数据层 (Data Layer)"></a>数据层 (Data Layer)</h2><p>所有 App 需要的数据都是通过这层的 UserRepository （实现了 DomainLayer 的接口）提供的，它使用了 Repository Pattern 的策略—— 通过一个工厂，根据不同的条件抓取不同的数据源。比如，当通过 id 来获取一个 user 时，如果这个 user 在缓存中不存在，那么它会选择磁盘缓存作为数据源，如果磁盘缓存也不存在它会通过云端接口获取数据，并保存在本地缓存中。</p><p>这个理念的核心是数据源对于 Client 端来说是透明的，Client 端不需要关心它是从内存、磁盘或者云端拿到的数据，它只知道这样可以拿到数</p><p><img src="/imgs/post/data_layer.png" alt="data layer"></p><blockquote><p>PS: 在代码方面，我实现了一个简单的基于文件和 SharedPreference 的磁盘缓存（仅为演示）。你可以替换为任何好用的第三方缓存库，注意永远不要重新发明轮子。</p></blockquote><h2 id="错误处理-Error-Handling"><a href="#错误处理-Error-Handling" class="headerlink" title="错误处理 (Error Handling)"></a>错误处理 (Error Handling)</h2><p>这是一个值得讨论的话题，非常欢迎任何分享。我的策略是实用回调机制。如果 DataRepo 发生变化，回调接口提供两个方法：onResponse() 和 onError(), 后者把错误封装在 ErrorBundle 类里面：这种处理方式带来一个问题，错误通过层层传递（就是异步编程中常见的 CallbackHell 问题 ）导致代码可读性变差。</p><p>或者可以使用 EventBus 来处理，但是这种方式有点像 GOTO 会导致代码逻辑混乱。</p><h2 id="测试-Testing"><a href="#测试-Testing" class="headerlink" title="测试 (Testing)"></a>测试 (Testing)</h2><p>至于测试，对于每层我采用了不同的方案：</p><ul><li>Presentation Layer 使用 AndroidInstruction 和 espresso 做集成测试和功能测试</li><li>Domain Layer 使用 JUnit 和 mockito 做单元测试</li><li>Data Layer 使用 Robolectric（这层有 Android 依赖）和 junit、mockito做集成和单元测试。</li></ul><h2 id="无码无真相-Show-me-the-code"><a href="#无码无真相-Show-me-the-code" class="headerlink" title="无码无真相 (Show me the code)"></a>无码无真相 (Show me the code)</h2><p><a href="https://github.com/android10/Android-CleanArchitecture" rel="external nofollow noopener noreferrer" target="_blank">Android-CleanArchitecture (Github)</a></p><p>原文地址：<a href="http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/" rel="external nofollow noopener noreferrer" target="_blank">Architecting Android…The clean way?</a></p><p><br>本文地址 <a href="http://94275.cn/2014/09/12/architecting-android-applications/">http://94275.cn/2014/09/12/architecting-android-applications/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android切图之不规则形状-4 [译]]]></title>
      <url>http://94275.cn/2014/08/02/irregular-shapes-part-4/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>前面几篇文章我们实现了生成不规则图形，以及实现消息气泡效果。在最后这片文章中，我们将要实现心型图片。</p><p>我知道软件工程师是非常浪漫的一群人，所以我想在情人节的时候发表这篇博客，但是最终决定现在发布，这样腾出来几天时间可以给你们增加一些更有趣的东西。</p><a id="more"></a><p>我们只需要很简单的几步画一个心形的图片。为了画心形的图片，我参考了<a href="http://www.mathematische-basteleien.de/heart.htm" rel="external nofollow noopener noreferrer" target="_blank">Heart Curve</a>。 Heart Curve提过了好几种画心形的方法。我最终选择符合我们要求的Heart Curve上提供的第四种方法。</p><p>在开始画心形图案之前，我们需要设置我们的BitmapShader, Canvas和Paint对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Bitmap bmp;</span><br><span class="line"></span><br><span class="line">bmp = Bitmap.createBitmap(bitmap.getWidth(),</span><br><span class="line">    bitmap.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">BitmapShader shader = <span class="keyword">new</span> BitmapShader(bitmap,</span><br><span class="line">    BitmapShader.TileMode.CLAMP,</span><br><span class="line">    BitmapShader.TileMode.CLAMP);</span><br><span class="line"></span><br><span class="line">Canvas canvas = <span class="keyword">new</span> Canvas(bmp);</span><br><span class="line">Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">paint.setShader(shader);</span><br></pre></td></tr></table></figure><p>因为下一步计算需要，我们需要把Bitmap的宽和高保存起来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> width = bitmap.getWidth();</span><br><span class="line"><span class="keyword">float</span> height = bitmap.getHeight();</span><br></pre></td></tr></table></figure><p>为了画心形，我们还需要创建Path, Matrix和Regiond对象。我们也可以把在用的时候单独创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Path oval = <span class="keyword">new</span> Path();</span><br><span class="line">Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">Region region = <span class="keyword">new</span> Region();</span><br></pre></td></tr></table></figure><p>有了前面的准备工作，接下来我们来画心形。首先我们需要做的是定义一个矩形用来画椭圆。矩形位于Bitmap的水平正中间位置，高度和Bitmap的高度相同，宽度是Bitmap的3/4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RectF ovalRect = <span class="keyword">new</span> RectF(width / <span class="number">8</span>, <span class="number">0</span>,</span><br><span class="line">    width - (width / <span class="number">8</span>), height);</span><br></pre></td></tr></table></figure><p>接下来，我们在定义好的矩形中画椭圆：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oval.addOval(ovalRect, Path.Direction.CW);</span><br></pre></td></tr></table></figure><p>如果我们渲染了这个Path，我们将看到Betty出现在椭圆形状中：</p><p><img src="/imgs/post/oral_betty.jpg" alt="oval_betty"><br>下一步我们需要做的是将椭圆旋转30度。我们需要使用之前创建的Matrix对象来实现旋转。使用Matrix，我们可以将物体进行各种变换，还可以通过一些辅助方法实现一些基本的方法。在我们的例子中，我们需要以椭圆中心为轴旋转30度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix.postRotate(<span class="number">30</span>, width / <span class="number">2</span>, height / <span class="number">2</span>);</span><br><span class="line">oval.transform(matrix, oval);</span><br></pre></td></tr></table></figure><p>旋转后效果如下：</p><p><img src="/imgs/post/oral_rotate_betty.jpg" alt="oral_rotate_betty"></p><p>值得注意的一点：我们不需要全部的椭圆，只需要右侧的一半就行了。所以，我们用之前创建的Region对象来裁剪椭圆。Region代表矩形区域。下面来截取右侧的部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">region.setPath(oval, <span class="keyword">new</span> Region((<span class="keyword">int</span>)width / <span class="number">2</span>, <span class="number">0</span>, </span><br><span class="line">(<span class="keyword">int</span>)width, (<span class="keyword">int</span>)height));</span><br><span class="line">canvas.drawPath(region.getBoundaryPath(), paint);</span><br></pre></td></tr></table></figure><p>截取之后的效果图如下:</p><p><img src="/imgs/post/half_heart.jpg" alt="half_heart"></p><p>接下来我们需要画另外一部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix.reset();</span><br><span class="line">oval.reset();</span><br></pre></td></tr></table></figure><p>接下来重复之前的操作，画左侧的部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">oval.addOval(ovalRect, Path.Direction.CW);</span><br><span class="line">matrix.postRotate(-<span class="number">30</span>, width / <span class="number">2</span>, height / <span class="number">2</span>);</span><br><span class="line">oval.transform(matrix, oval);</span><br><span class="line">region.setPath(oval, </span><br><span class="line"><span class="keyword">new</span> Region(<span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">int</span>)width / <span class="number">2</span>, (<span class="keyword">int</span>)height));</span><br><span class="line">canvas.drawPath(region.getBoundaryPath(), paint);</span><br></pre></td></tr></table></figure><p>最终结果如图：</p><p><img src="/imgs/post/betty_heart.jpg" alt="heart"></p><p>值得注意的是，使用Path对象和Region对象很容易实现图片裁剪。但是这些需要API 19。</p><p>虽然我们本系列文章都是来讲解不规则图形切图的，但是我们用到的技术不仅仅局限于图片。我们也可以用这写技术来实现立体的，多彩的和渐变等等的效果。最后说一下，作为轻量级的图片裁剪技术，本系列文章算是比较节省系统开销。</p><p>切图之不规则图形系列<a href="https://bitbucket.org/StylingAndroid/irregular-shapes/src/01df49cd0df1bc55088ad00114946eabb8e38da7/?at=Part4" rel="external nofollow noopener noreferrer" target="_blank">源码下载</a>，英文原版<a href="http://blog.stylingandroid.com/irregular-shapes-part-4/" rel="external nofollow noopener noreferrer" target="_blank">地址</a>。</p><p><br>本文地址 <a href="http://94275.cn/2014/08/02/irregular-shapes-part-4/">http://94275.cn/2014/08/02/irregular-shapes-part-4/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android不规则图形专题 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Android切图之不规则形状-3 [译]]]></title>
      <url>http://94275.cn/2014/07/29/irregular-shapes-part-3/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>在之前不规则图形切图系列中，我们采用了两种方法来实现图片的圆角。在这篇文章中我们将会创建像WhatsApp中消息气泡一样的效果。</p><p>为了实现这个效果，我们需要使用上文中提到的基于BitmapShader的技术。圆角矩阵跟之前实现方法一样，但是需要在图片左侧留出一定的距离。在本文的代码中将画一个三角形来代替WhatsApp的消息气泡的“句柄”，这根就像漫画中指向人嘴的消息。</p><a id="more"></a><p>我们知道如何画圆角矩形，这就实现了我们效果的一半了。所以，我们需要做的就是画一个三角形。问题来了，在Canvas中没有画三角形的方法，所以我们需要用一些原始的方法来画三角形。Canvas支持moveTo()和lineTo()方法，通过这两个方法我们可以实现由直线组成的简单形状。但是我们有不能填充三角形内部，所以我们又需要使用Path对象。Path也包含moveTo()和lineTo()方法。Path不仅能够画简单的图形，而且还能够用BitmapShader来渲染图形内部。</p><p>为了画一个三角形我们首先需要创建Path对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Path triangle = <span class="keyword">new</span> Path();</span><br></pre></td></tr></table></figure><p>然后我们使用moveTo()来吧起点移动到开始位置。在我们的需求中，我们需要把起点移动到Canvas左边缘并向下一点点。这个点是气泡消息的三角形的最外侧的一个一个点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">triangle.moveTo(<span class="number">0</span>, TRIANGLE_OFFSET);</span><br></pre></td></tr></table></figure><p>然后我们需要使用lineTo()方法画一条线。这条线起点是我们用moveTo()方法设定的点，终点是圆角矩形的边界。这条线需要向上倾斜：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">triangle.lineTo(TRIANGLE_WIDTH, TRIANGLE_OFFSET - (TRIANGLE_HEIGHT / <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>再然后，我们需要用lineTo()方法画第二条线。这次我们希望最后的一条线是向下倾斜的，所以我们需要把终点选择在起点（moveTo()确定的点）一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">triangle.lineTo(TRIANGLE_WIDTH, TRIANGLE_OFFSET + (TRIANGLE_HEIGHT / <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>最后，我们画最后一条线来完成整个三角形。一般来说，我们会选择从lineTo()最终的点直接画线到moveTo()的点。但是，有更简单的方法：close()。这个方法可以帮助我们自动完成多边形最后一遍的绘制。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">triangle.close();</span><br></pre></td></tr></table></figure><p>现在我们的三角形也画好了，我们剩下的唯一需要做的就是用Shader把三角形画到Canvas上。完整方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> RADIUS_FACTOR = <span class="number">8.0f</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRIANGLE_WIDTH = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRIANGLE_HEIGHT = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRIANGLE_OFFSET = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">processImage</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">    Bitmap bmp;</span><br><span class="line"></span><br><span class="line">    bmp = Bitmap.createBitmap(bitmap.getWidth(), </span><br><span class="line">        bitmap.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">    BitmapShader shader = <span class="keyword">new</span> BitmapShader(bitmap, </span><br><span class="line">        BitmapShader.TileMode.CLAMP, </span><br><span class="line">        BitmapShader.TileMode.CLAMP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> radius = Math.min(bitmap.getWidth(), </span><br><span class="line">        bitmap.getHeight()) / RADIUS_FACTOR;</span><br><span class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(bmp);</span><br><span class="line">    Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">    paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">    paint.setShader(shader);</span><br><span class="line"></span><br><span class="line">    RectF rect = <span class="keyword">new</span> RectF(TRIANGLE_WIDTH, <span class="number">0</span>, </span><br><span class="line">        bitmap.getWidth(), bitmap.getHeight());</span><br><span class="line">    canvas.drawRoundRect(rect, radius, radius, paint);</span><br><span class="line"></span><br><span class="line">    Path triangle = <span class="keyword">new</span> Path();</span><br><span class="line">    triangle.moveTo(<span class="number">0</span>, TRIANGLE_OFFSET);</span><br><span class="line">    triangle.lineTo(TRIANGLE_WIDTH, </span><br><span class="line">        TRIANGLE_OFFSET - (TRIANGLE_HEIGHT / <span class="number">2</span>));</span><br><span class="line">    triangle.lineTo(TRIANGLE_WIDTH, </span><br><span class="line">        TRIANGLE_OFFSET + (TRIANGLE_HEIGHT / <span class="number">2</span>));</span><br><span class="line">    triangle.close();</span><br><span class="line">    canvas.drawPath(triangle, paint);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后效果如下图。三角形和圆角矩形组合通过Shader实现了消息气泡的效果。</p><p><img src="/imgs/post/part3.jpg" alt="part3"></p><p>在Android切图之不规则图形这个系列里面，我们下篇文章将通过其他方法实现一些复杂点的图形（其实如果我们把它拆解后会发现其实也很简答的哦）。</p><p>切图之不规则图形系列<a href="https://bitbucket.org/StylingAndroid/irregular-shapes/src/9a57e86fa5edb946c92d099c0fa6cd9960d35d73/?at=Part3" rel="external nofollow noopener noreferrer" target="_blank">源码下载</a>，英文原版<a href="http://blog.stylingandroid.com/irregular-shapes-part-3/" rel="external nofollow noopener noreferrer" target="_blank">地址</a>。</p><p><br>本文地址 <a href="http://94275.cn/2014/07/29/irregular-shapes-part-3/">http://94275.cn/2014/07/29/irregular-shapes-part-3/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android不规则图形专题 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Android切图之不规则形状-2 [译]]]></title>
      <url>http://94275.cn/2014/07/27/irregular-shapes-part-2/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>上篇文章我们实现了用透明图片的方式来实现圆角切图。但是采用透明浮层的方法有很多问题不完全符合我们的要求。在这篇文章中我们采用一种不使用额外的图片的替代方案来实现相同的圆角图片的效果。</p><p>在本文开始之前，我首先声明写着一些列的技术文章是我完全免费为大家提供的。我第一次学习用BitmapShader创建圆角图片是从Romain的一篇<a href="http://www.curious-creature.org/2012/12/11/android-recipe-1-image-with-rounded-corners/" rel="external nofollow noopener noreferrer" target="_blank">博客文章</a>。我们将会创建一些更酷的效果，下面先罗列一些用到的技术及说明：<br><a id="more"></a></p><p><strong><em>Shader</em></strong>是非常有用和给力的图像填充类。Paint对象通过使用Shader增加渲染效果，然后画图到Canvas。</p><p><strong><em>BitmapShader</em></strong>除了具有Shader的特性外还支持对Bitmapde各种操作。本文中我们不再需要关心图片的大小问题了。</p><p>为了跟上篇文章中的图像效果看起来相同，我们计算图片的圆弧半斤大概是图片最小边的1/8。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">processImage</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">    Bitmap bmp;</span><br><span class="line"></span><br><span class="line">    bmp = Bitmap.createBitmap(bitmap.getWidth(), </span><br><span class="line">        bitmap.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">    BitmapShader shader = <span class="keyword">new</span> BitmapShader(bitmap, </span><br><span class="line">        BitmapShader.TileMode.CLAMP, </span><br><span class="line">        BitmapShader.TileMode.CLAMP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> radius = Math.min(bitmap.getWidth(), </span><br><span class="line">        bitmap.getHeight()) / RADIUS_FACTOR;</span><br><span class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(bmp);</span><br><span class="line">    Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">    paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">    paint.setShader(shader);</span><br><span class="line"></span><br><span class="line">    RectF rect = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line">        bitmap.getWidth(), bitmap.getHeight());</span><br><span class="line">    canvas.drawRoundRect(rect, radius, radius, paint);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也是一个很简单的例子。我们只需要用源图创建一个BitmapShader，然后添加给Paint对象，最后用Paint画圆角矩形。</p><p>比较上一篇文章很容易就可以发现内存需求小多了。这里我们只需要两个Bitmap对象而在上篇博客中我们需要三个Bitmap对象。还有就是这种方法对图片的大小没有要求。采用浮层的方法我们需要对图片进行放大缩小。从产生的效果图片中我们可以发现，本文提供的方法比较之前的方法很难出现图片变模糊的家问题。</p><p><img src="/imgs/post/part2.jpg" alt="part2"></p><p>就像我之前提过的，这种方法除了实现圆角外还可以实现很多非常赞的效果。在下一篇文章中我们将要实现像WhatsApp中一样的聊天消息形状的效果。</p><p>切图之不规则图形系列<a href="https://bitbucket.org/StylingAndroid/irregular-shapes/src/0d256e9f59e350f63ae1d43fdec5ba76cfa41c6a/?at=Part2" rel="external nofollow noopener noreferrer" target="_blank">源码下载</a>，英文原版<a href="http://blog.stylingandroid.com/irregular-shapes-part-2/" rel="external nofollow noopener noreferrer" target="_blank">地址</a>。</p><p><br>本文地址 <a href="http://94275.cn/2014/07/27/irregular-shapes-part-2/">http://94275.cn/2014/07/27/irregular-shapes-part-2/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android不规则图形专题 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Android切图之不规则形状-1 [译]]]></title>
      <url>http://94275.cn/2014/07/22/irregular-shapes-part-1/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>不久之前，我被问到如何创建一个像WhatsApp中气泡消息一样的，图像边缘是不规则图形的图片。更多的关于不规则图形方面的知识将在接下来的一系列的《Android切图之不规则形状》中学习到。</p><p>在继续下一步之前，我必须承认我忘记是谁问的我关于切图的问题了。如果这个人是正在看此文的你，请联系我，我非常感谢你在一定程度上激励了我写这一系列的文章。<br><a id="more"></a><br>我们用一个很简单的不规则图形开始：我一个圆角矩形。值得注意的是，圆角矩形可以通过Android SDK的API20中的RoundRectShapeDrawable来实现，但是这个不能够实现我们将来需要实现的更为复杂的效果（这些之后的文章中会出现），所以我们将继续使用常规的方法。</p><p>我们将要用到的第一个技术就是我们之前可能用过的透明浮层。</p><p>浮层的方法是非常简单的。我们把两张图重叠起来：第一张是想要显示圆角的矩形图和第二张是是圆角矩形图。有了这两张图形我们只需要利用Porter Duff的透明规则让浮层透明就可以实现我们想要的效果。</p><p>下面是我们需要准备的两张图片：</p><p><img src="/imgs/post/betty_sm.jpg" alt="betty"> <img src="/imgs/post/mask_sm.png" alt="mask"></p><p>第一张是我们切图系列文章的模特Betty。第二章是圆角矩形的浮层图像。这张绿色的浮层图像只是想让我们能够看到圆角矩形的形状（实际上是没有用的）。</p><p>代码是很简单的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">combineImages</span><span class="params">(Bitmap bgd, Bitmap fg)</span> </span>&#123;</span><br><span class="line">    Bitmap bmp;</span><br><span class="line">   	<span class="keyword">int</span> width = bgd.getWidth() &gt; fg.getWidth() ? </span><br><span class="line">       	bgd.getWidth() : fg.getWidth();</span><br><span class="line">   	<span class="keyword">int</span> height = bgd.getHeight() &gt; fg.getHeight() ? </span><br><span class="line">       	bgd.getHeight() : fg.getHeight();</span><br><span class="line"></span><br><span class="line">   	bmp = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);</span><br><span class="line">   	Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">   	paint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_ATOP));</span><br><span class="line"></span><br><span class="line">   	Canvas canvas = <span class="keyword">new</span> Canvas(bmp);</span><br><span class="line">   	canvas.drawBitmap(bgd, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">   	canvas.drawBitmap(fg, <span class="number">0</span>, <span class="number">0</span>, paint);</span><br><span class="line"></span><br><span class="line">   	<span class="keyword">return</span> bmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建的新的Bitmap是源图和浮层图的最大值。<strong><em>我们需要先画浮层图像然后用设置了PorterDuffXFerMode.SRC_STOP的Paint对象来画Betty</em></strong>。最后结果如下图：</p><p><img src="/imgs/post/part1.jpg" alt="part1"></p><p>OK,我们实现了预设的目标。但是现在的方法存在很多的问题。</p><p>首先，我们需要两张相同大小的图片来合成新图。我们可能需要写一些代码来缩小放大图片，但是放大图片的时候会是图片产生模糊。我们也可能会遇到两张图片大小不同导致圆角矩形产生扭曲。</p><p>另外一个大问题是这种方法效率不高。为了实现我们想要的效果，我们需要加载两张图片到内存，然后合并他们到第三张图片。如果图片非常大，当我们采用这种方式就很容易产生OutOfMemoryError。</p><p>不过，值得庆幸的是，在接下来的文章中我会引入更高效的方法来实现我们想要的效果。</p><p>切图之不规则图形系列<a href="https://bitbucket.org/StylingAndroid/irregular-shapes/src/418e35ffc95d73601a5097fb81589190f07e2b4b/?at=Part1" rel="external nofollow noopener noreferrer" target="_blank">源码下载</a>，英文原版<a href="http://blog.stylingandroid.com/irregular-shapes-part-1/" rel="external nofollow noopener noreferrer" target="_blank">地址</a>。</p><h2 id="参考内容："><a href="#参考内容：" class="headerlink" title="参考内容："></a>参考内容：</h2><ul><li><p><a href="http://blog.csdn.net/t12x3456/article/details/10432935" title="PorterDuff及Xfermode详解" target="_blank" rel="noopener">PorterDuff及Xfermode详解</a></p></li><li><p><a href="http://pcq019.blog.163.com/blog/static/124602323201232710853970/" title="16条Porter-Duff规则简要说明  " rel="external nofollow noopener noreferrer" target="_blank">16条Porter-Duff规则简要说明</a></p></li></ul><p><br>本文地址 <a href="http://94275.cn/2014/07/22/irregular-shapes-part-1/">http://94275.cn/2014/07/22/irregular-shapes-part-1/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Android不规则图形专题 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[快速开发小技巧:如何通过一个命令行将apk从多台设备安装或卸载]]></title>
      <url>http://94275.cn/2014/07/22/adb-install-to-mutiple-devices/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>最近，开发手机应用的时候发现从设备上安装和卸载应用花费我太多的时间。如果是多台设备的话就更能体会到到时间的消耗了。本文我将解决如何用一条命令行管理多台设备。</p><p>首先我介绍一个拥有多个并排开关按钮和USB接口的设备（你可以从 <a href="http://www.amazon.com/gp/product/B007S642BW/ref=oh_details_o08_s00_i00?ie=UTF8&amp;psc=1" rel="external nofollow noopener noreferrer" target="_blank">Amazon</a><br>买到）。我选择这个设备是因为它可以通过开关按钮方便的添加和移除设备以及它价格便宜。</p><a id="more"></a><h3 id="ADB-介绍"><a href="#ADB-介绍" class="headerlink" title="ADB 介绍"></a>ADB 介绍</h3><p><img src="/imgs/post/android_usb_bus.jpg" alt="device"></p><p>将这个设备插到电脑上，然后把 Android 设备插到此线板上。然后我们就可以连接电脑通过命令行管理手机了。安装 APK 到 Android 设备我们需要在命令行输入以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install -r path/to/the/app/to/install.apk</span><br></pre></td></tr></table></figure><p>此命令在只有一台设备的时候能能够正常运行（adb 就是为一台设备设计的），但是如果有多台设备的话，就会出现下面的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- waiting for device -</span><br><span class="line"> </span><br><span class="line">error: more than one device and emulator</span><br><span class="line"> </span><br><span class="line">- waiting for device -</span><br><span class="line"> </span><br><span class="line">error: more than one device and emulator</span><br><span class="line"> </span><br><span class="line">- waiting for device -</span><br><span class="line"> </span><br><span class="line">Failure</span><br></pre></td></tr></table></figure><p>我们需要指定命令对哪台设备有效。为了获取设备 ID 我们需要输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>此命令将返回如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line"> </span><br><span class="line">04544fawebf0b595dc device</span><br><span class="line"> </span><br><span class="line">13928weff7c device</span><br></pre></td></tr></table></figure><p>如果我们要安装APK到一个设备，我们需要多次执行下面的命令.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s (deviceID) install -r path/to/the/app/to/install.apk</span><br></pre></td></tr></table></figure><p>如果我要安装APK到所有的设备，以前我是这样做的：依次复制 Device ID ，在命令行依次输入上面的命令并把 Device ID 粘贴进去。虽然有了上面的集线器，<br>但是这样还是不够效率。通过在网上搜索，最终在 <a href="http://stackoverflow.com/questions/17882474/running-adb-commands-on-all-connected-devices/17882578#17882578" rel="external nofollow noopener noreferrer" target="_blank">Stackoverflow</a> 上找到一个很好解决这个问题的脚本。</p><h3 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h3><p>首先，新建文件名为 adb+ 的文件，复制到下面脚本到 adb+。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># Script adb+</span><br><span class="line"># Usage</span><br><span class="line"># You can run any command adb provides on all your currently connected devices</span><br><span class="line"># ./adb+ &lt;command&gt; is the equivalent of ./adb -s &lt;serial number&gt; &lt;command&gt;</span><br><span class="line">#</span><br><span class="line"># Examples</span><br><span class="line"># ./adb+ version</span><br><span class="line"># ./adb+ install apidemo.apk</span><br><span class="line"># ./adb+ uninstall com.example.android.apis</span><br><span class="line">adb devices | while read line</span><br><span class="line">do</span><br><span class="line">  if [ ! &quot;$line&quot; = &quot;&quot; ] &amp;&amp; [ `echo $line | awk &apos;&#123;print $2&#125;&apos;` = &quot;device&quot; ]</span><br><span class="line">  then</span><br><span class="line">      device=`echo $line | awk &apos;&#123;print $1&#125;&apos;`</span><br><span class="line">      echo &quot;adb -s $device $@ ...&quot;</span><br><span class="line">      adb -s $device $@</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>然后将此文件保存到你的 Android SDK 安装目录中和adb命令同文件夹的文件中（platform-tools 文件夹）。</p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><p>此脚本使用非常方便。在保证你的所有的设备连接到电脑的情况下，直接将 adb 命令替换成 adb+ 命令就 OK 了（简单吧）。例如，安装APK到设备命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb+ install -r path/to/the/app/to/install.apk</span><br></pre></td></tr></table></figure><p>此命令将返回如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">04544fabs23f0b595dc install -r /path/to/your/app/name_of_the_app.apk ...</span><br><span class="line"></span><br><span class="line">4619 KB/s (13249277 bytes in 2.800s)</span><br><span class="line"></span><br><span class="line">    pkg: /data/local/tmp/name_of_the_app.apk</span><br><span class="line"></span><br><span class="line">Success</span><br><span class="line"></span><br><span class="line">1399834vskj28f7c install -r/path/to/your/app/name_of_the_app.apk ...</span><br><span class="line"></span><br><span class="line">3608 KB/s (13249277 bytes in 3.585s)</span><br><span class="line"></span><br><span class="line">    pkg: /data/local/tmp/name_of_the_app.apk</span><br><span class="line"></span><br><span class="line">Success</span><br></pre></td></tr></table></figure><h3 id="可能遇到的问题："><a href="#可能遇到的问题：" class="headerlink" title="可能遇到的问题："></a>可能遇到的问题：</h3><p>如果运行 adb+ 遇到如下提示信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: adb+: Permission denied</span><br></pre></td></tr></table></figure><p>这个问题是因为你的命令没有可执行的权限。解决办法很简单，在 adb+ 所在的目录执行如下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 ./adb+</span><br></pre></td></tr></table></figure><p>现在再尝试一次，你应该能够成功了。</p><p>就是如此简单，新的命令将遍历所有的设备执行相同的命令。APK 可以用很少的时间就安装到所有连接的设备上。你觉得如何呢？这个是否能够帮助你管理多台设备上的应用？如果有问题请留言。<br>​</p><p><br>本文地址 <a href="http://94275.cn/2014/07/22/adb-install-to-mutiple-devices/">http://94275.cn/2014/07/22/adb-install-to-mutiple-devices/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Stay hungry, stay foolish]]></title>
      <url>http://94275.cn/2014/07/22/Stay-hungry-stay-foolish/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Nov 22 2019 11:17:03 GMT+0800 (China Standard Time) --><p>From Stanford Report, June 14, 2005<br>This is the text of the Commencement address by Steve Jobs, CEO of Apple Computer and of Pixar Animation Studios<br>Delivered on June 12, 2005.</p><p>I am honored to be with you today at your commencement from one of the finest universities in the world. I never graduated from college. Truth be told, this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.</p><a id="more"></a><p><img src="/imgs/post/steve_jobs.jpg" alt="steve jobs"></p><p><br></p><h5 id="The-first-story-is-about-connecting-the-dots"><a href="#The-first-story-is-about-connecting-the-dots" class="headerlink" title="The first story is about connecting the dots."></a>The first story is about connecting the dots.</h5><p>I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out?</p><p>It started before I was born. My biological mother was a young, unwed college graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl. So my parents, who were on a waiting list, got a call in the middle of the night asking: “We have an unexpected baby boy; do you want him?” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later when my parents promised that I would someday go to college.</p><p>And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out. And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked interesting.</p><p>It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the 5￠ deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example:</p><p>Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this. I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating.</p><p>None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts. And since Windows just copied the Mac, its likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later.</p><p>Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something — your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.</p><p><br></p><h5 id="My-second-story-is-about-love-and-loss"><a href="#My-second-story-is-about-love-and-loss" class="headerlink" title="My second story is about love and loss."></a>My second story is about love and loss.</h5><p>I was lucky — I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a $2 billion company with over 4000 employees. We had just released our finest creation — the Macintosh — a year earlier, and I had just turned 30. And then I got fired. How can you get fired from a company you started? Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating.<br>I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly. I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me — I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over.</p><p>I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life.</p><p>During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world. In a remarkable turn of events, Apple bought NeXT, I returned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together.</p><p>I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love. And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle.</p><p><br></p><h5 id="My-third-story-is-about-death"><a href="#My-third-story-is-about-death" class="headerlink" title="My third story is about death."></a>My third story is about death.</h5><p>When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today?” And whenever the answer has been “No” for too many days in a row, I know I need to change something.</p><p>Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything — all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.</p><p>About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes.</p><p>I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now.</p><p>This was the closest I’ve been to facing death, and I hope its the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept:</p><p>No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true.</p><p>Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma — which is living with the results of other people’s thinking. Don’t let the noise of others’ opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p><p>When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notions.</p><p>Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you.</p><p><strong>Stay Hungry. Stay Foolish.</strong></p><p>Thank you all very much.</p><p><br>本文地址 <a href="http://94275.cn/2014/07/22/Stay-hungry-stay-foolish/">http://94275.cn/2014/07/22/Stay-hungry-stay-foolish/</a> 作者为<a href="/about/"> Zhenguo</a></p><!-- rebuild by neat -->]]></content>
      
        
    </entry>
    
  
  
</search>
